
bin\Debug\codeAGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800200  000038b4  00003968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800334  00800334  00003a9c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00003a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00003a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000003f8  00000000  00000000  00003c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032a1  00000000  00000000  00004097  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016b4  00000000  00000000  00007338  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024cc  00000000  00000000  000089ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  0000aeb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000b734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c102  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_13>
      38:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_14>
      3c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_15>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_21>
      58:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_22>
      5c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__vector_41>
      a8:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <__vector_42>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 eb       	ldi	r30, 0xB4	; 180
      fc:	f8 e3       	ldi	r31, 0x38	; 56
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 33       	cpi	r26, 0x34	; 52
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a4 e3       	ldi	r26, 0x34	; 52
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 34       	cpi	r26, 0x42	; 66
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 a3 14 	call	0x2946	; 0x2946 <main>
     122:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <__vector_23>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "h_bridge.h"

ISR(TIMER0_OVF_vect)
{
     12a:	1f 92       	push	r1
     12c:	0f 92       	push	r0
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	0f 92       	push	r0
     132:	00 90 5b 00 	lds	r0, 0x005B
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	8f 93       	push	r24
     13c:	af 93       	push	r26
     13e:	bf 93       	push	r27
     140:	ef 93       	push	r30
     142:	ff 93       	push	r31
     144:	df 93       	push	r29
     146:	cf 93       	push	r28
     148:	cd b7       	in	r28, 0x3d	; 61
     14a:	de b7       	in	r29, 0x3e	; 62
	if (OCR0A == 0 && OCR0B == 0)
     14c:	e7 e4       	ldi	r30, 0x47	; 71
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	88 23       	and	r24, r24
     154:	11 f5       	brne	.+68     	; 0x19a <__vector_23+0x70>
     156:	e8 e4       	ldi	r30, 0x48	; 72
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	88 23       	and	r24, r24
     15e:	e9 f4       	brne	.+58     	; 0x19a <__vector_23+0x70>
	{
		PORT_RPWM_RV &= ~(1<<PIN_RPWM_RV);
     160:	ae e2       	ldi	r26, 0x2E	; 46
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	ee e2       	ldi	r30, 0x2E	; 46
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	8f 7e       	andi	r24, 0xEF	; 239
     16c:	8c 93       	st	X, r24
		PORT_LPWM_RV &= ~(1<<PIN_LPWM_RV);
     16e:	ae e2       	ldi	r26, 0x2E	; 46
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	ee e2       	ldi	r30, 0x2E	; 46
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	8f 7d       	andi	r24, 0xDF	; 223
     17a:	8c 93       	st	X, r24
		PORT_RPWM_RA &= ~(1<<PIN_RPWM_RA);
     17c:	a4 e3       	ldi	r26, 0x34	; 52
     17e:	b0 e0       	ldi	r27, 0x00	; 0
     180:	e4 e3       	ldi	r30, 0x34	; 52
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	8f 7d       	andi	r24, 0xDF	; 223
     188:	8c 93       	st	X, r24
		PORT_LPWM_RA &= ~(1<<PIN_LPWM_RA);
     18a:	ae e2       	ldi	r26, 0x2E	; 46
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	ee e2       	ldi	r30, 0x2E	; 46
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	87 7f       	andi	r24, 0xF7	; 247
     196:	8c 93       	st	X, r24
     198:	43 c0       	rjmp	.+134    	; 0x220 <__vector_23+0xf6>
	}
	else if (OCR0A != 0)
     19a:	e7 e4       	ldi	r30, 0x47	; 71
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	88 23       	and	r24, r24
     1a2:	e9 f0       	breq	.+58     	; 0x1de <__vector_23+0xb4>
	{
		PORT_LPWM_RV &= ~(1<<PIN_LPWM_RV);
     1a4:	ae e2       	ldi	r26, 0x2E	; 46
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	ee e2       	ldi	r30, 0x2E	; 46
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8f 7d       	andi	r24, 0xDF	; 223
     1b0:	8c 93       	st	X, r24
		PORT_RPWM_RV |= (1<<PIN_RPWM_RV);
     1b2:	ae e2       	ldi	r26, 0x2E	; 46
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	ee e2       	ldi	r30, 0x2E	; 46
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	8c 93       	st	X, r24
		PORT_LPWM_RA &= ~(1<<PIN_LPWM_RA);
     1c0:	ae e2       	ldi	r26, 0x2E	; 46
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	ee e2       	ldi	r30, 0x2E	; 46
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	87 7f       	andi	r24, 0xF7	; 247
     1cc:	8c 93       	st	X, r24
		PORT_RPWM_RA |= (1<<PIN_RPWM_RA);
     1ce:	a4 e3       	ldi	r26, 0x34	; 52
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e4 e3       	ldi	r30, 0x34	; 52
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 62       	ori	r24, 0x20	; 32
     1da:	8c 93       	st	X, r24
     1dc:	21 c0       	rjmp	.+66     	; 0x220 <__vector_23+0xf6>
	}
	else if (OCR0B != 0)
     1de:	e8 e4       	ldi	r30, 0x48	; 72
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	88 23       	and	r24, r24
     1e6:	e1 f0       	breq	.+56     	; 0x220 <__vector_23+0xf6>
	{
		PORT_RPWM_RV &= ~(1<<PIN_RPWM_RV);
     1e8:	ae e2       	ldi	r26, 0x2E	; 46
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ee e2       	ldi	r30, 0x2E	; 46
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	80 81       	ld	r24, Z
     1f2:	8f 7e       	andi	r24, 0xEF	; 239
     1f4:	8c 93       	st	X, r24
		PORT_LPWM_RV |= (1<<PIN_LPWM_RV);
     1f6:	ae e2       	ldi	r26, 0x2E	; 46
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	ee e2       	ldi	r30, 0x2E	; 46
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	80 62       	ori	r24, 0x20	; 32
     202:	8c 93       	st	X, r24
		PORT_RPWM_RA &= ~(1<<PIN_RPWM_RA);
     204:	a4 e3       	ldi	r26, 0x34	; 52
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	e4 e3       	ldi	r30, 0x34	; 52
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	8f 7d       	andi	r24, 0xDF	; 223
     210:	8c 93       	st	X, r24
		PORT_LPWM_RA |= (1<<PIN_LPWM_RA);
     212:	ae e2       	ldi	r26, 0x2E	; 46
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	ee e2       	ldi	r30, 0x2E	; 46
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	88 60       	ori	r24, 0x08	; 8
     21e:	8c 93       	st	X, r24
	}
}
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	ff 91       	pop	r31
     226:	ef 91       	pop	r30
     228:	bf 91       	pop	r27
     22a:	af 91       	pop	r26
     22c:	8f 91       	pop	r24
     22e:	0f 90       	pop	r0
     230:	00 92 5b 00 	sts	0x005B, r0
     234:	0f 90       	pop	r0
     236:	0f be       	out	0x3f, r0	; 63
     238:	0f 90       	pop	r0
     23a:	1f 90       	pop	r1
     23c:	18 95       	reti

0000023e <__vector_21>:

ISR(TIMER0_COMPA_vect)
{
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	00 90 5b 00 	lds	r0, 0x005B
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	8f 93       	push	r24
     250:	af 93       	push	r26
     252:	bf 93       	push	r27
     254:	ef 93       	push	r30
     256:	ff 93       	push	r31
     258:	df 93       	push	r29
     25a:	cf 93       	push	r28
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
	if (OCR0A != 255)
     260:	e7 e4       	ldi	r30, 0x47	; 71
     262:	f0 e0       	ldi	r31, 0x00	; 0
     264:	80 81       	ld	r24, Z
     266:	8f 3f       	cpi	r24, 0xFF	; 255
     268:	71 f0       	breq	.+28     	; 0x286 <__vector_21+0x48>
	{
		PORT_RPWM_RV &= ~(1<<PIN_RPWM_RV);
     26a:	ae e2       	ldi	r26, 0x2E	; 46
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	ee e2       	ldi	r30, 0x2E	; 46
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	8f 7e       	andi	r24, 0xEF	; 239
     276:	8c 93       	st	X, r24
		PORT_RPWM_RA &= ~(1<<PIN_RPWM_RA);
     278:	a4 e3       	ldi	r26, 0x34	; 52
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	e4 e3       	ldi	r30, 0x34	; 52
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	8f 7d       	andi	r24, 0xDF	; 223
     284:	8c 93       	st	X, r24
	}
}
     286:	cf 91       	pop	r28
     288:	df 91       	pop	r29
     28a:	ff 91       	pop	r31
     28c:	ef 91       	pop	r30
     28e:	bf 91       	pop	r27
     290:	af 91       	pop	r26
     292:	8f 91       	pop	r24
     294:	0f 90       	pop	r0
     296:	00 92 5b 00 	sts	0x005B, r0
     29a:	0f 90       	pop	r0
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	0f 90       	pop	r0
     2a0:	1f 90       	pop	r1
     2a2:	18 95       	reti

000002a4 <__vector_22>:

ISR(TIMER0_COMPB_vect)
{
     2a4:	1f 92       	push	r1
     2a6:	0f 92       	push	r0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	0f 92       	push	r0
     2ac:	00 90 5b 00 	lds	r0, 0x005B
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	8f 93       	push	r24
     2b6:	af 93       	push	r26
     2b8:	bf 93       	push	r27
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	cd b7       	in	r28, 0x3d	; 61
     2c4:	de b7       	in	r29, 0x3e	; 62
	if (OCR0B != 255)
     2c6:	e8 e4       	ldi	r30, 0x48	; 72
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	8f 3f       	cpi	r24, 0xFF	; 255
     2ce:	71 f0       	breq	.+28     	; 0x2ec <__vector_22+0x48>
	{
	    PORT_LPWM_RV &= ~(1<<PIN_LPWM_RV);
     2d0:	ae e2       	ldi	r26, 0x2E	; 46
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	ee e2       	ldi	r30, 0x2E	; 46
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	8f 7d       	andi	r24, 0xDF	; 223
     2dc:	8c 93       	st	X, r24
		PORT_LPWM_RA &= ~(1<<PIN_LPWM_RA);
     2de:	ae e2       	ldi	r26, 0x2E	; 46
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	ee e2       	ldi	r30, 0x2E	; 46
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	87 7f       	andi	r24, 0xF7	; 247
     2ea:	8c 93       	st	X, r24
	}
}
     2ec:	cf 91       	pop	r28
     2ee:	df 91       	pop	r29
     2f0:	ff 91       	pop	r31
     2f2:	ef 91       	pop	r30
     2f4:	bf 91       	pop	r27
     2f6:	af 91       	pop	r26
     2f8:	8f 91       	pop	r24
     2fa:	0f 90       	pop	r0
     2fc:	00 92 5b 00 	sts	0x005B, r0
     300:	0f 90       	pop	r0
     302:	0f be       	out	0x3f, r0	; 63
     304:	0f 90       	pop	r0
     306:	1f 90       	pop	r1
     308:	18 95       	reti

0000030a <__vector_15>:

ISR(TIMER2_OVF_vect)
{
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	00 90 5b 00 	lds	r0, 0x005B
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	8f 93       	push	r24
     31c:	af 93       	push	r26
     31e:	bf 93       	push	r27
     320:	ef 93       	push	r30
     322:	ff 93       	push	r31
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
	if (OCR2A == 0 && OCR2B == 0)
     32c:	e3 eb       	ldi	r30, 0xB3	; 179
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	88 23       	and	r24, r24
     334:	11 f5       	brne	.+68     	; 0x37a <__vector_15+0x70>
     336:	e4 eb       	ldi	r30, 0xB4	; 180
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	88 23       	and	r24, r24
     33e:	e9 f4       	brne	.+58     	; 0x37a <__vector_15+0x70>
	{
		PORT_RPWM_LV &= ~(1<<PIN_RPWM_LV);
     340:	a5 e2       	ldi	r26, 0x25	; 37
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	e5 e2       	ldi	r30, 0x25	; 37
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8f 7e       	andi	r24, 0xEF	; 239
     34c:	8c 93       	st	X, r24
		PORT_LPWM_LV &= ~(1<<PIN_LPWM_LV);
     34e:	a5 e2       	ldi	r26, 0x25	; 37
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e5 e2       	ldi	r30, 0x25	; 37
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8f 7d       	andi	r24, 0xDF	; 223
     35a:	8c 93       	st	X, r24
		PORT_RPWM_LA &= ~(1<<PIN_RPWM_LV);
     35c:	a5 e2       	ldi	r26, 0x25	; 37
     35e:	b0 e0       	ldi	r27, 0x00	; 0
     360:	e5 e2       	ldi	r30, 0x25	; 37
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	8f 7e       	andi	r24, 0xEF	; 239
     368:	8c 93       	st	X, r24
		PORT_LPWM_LA &= ~(1<<PIN_LPWM_LV);
     36a:	a5 e2       	ldi	r26, 0x25	; 37
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	e5 e2       	ldi	r30, 0x25	; 37
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	8f 7d       	andi	r24, 0xDF	; 223
     376:	8c 93       	st	X, r24
     378:	43 c0       	rjmp	.+134    	; 0x400 <__vector_15+0xf6>
	}
	else if (OCR2A != 0)
     37a:	e3 eb       	ldi	r30, 0xB3	; 179
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	88 23       	and	r24, r24
     382:	e9 f0       	breq	.+58     	; 0x3be <__vector_15+0xb4>
	{
		PORT_LPWM_LV &= ~(1<<PIN_LPWM_LV);
     384:	a5 e2       	ldi	r26, 0x25	; 37
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	e5 e2       	ldi	r30, 0x25	; 37
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	8f 7d       	andi	r24, 0xDF	; 223
     390:	8c 93       	st	X, r24
		PORT_RPWM_LV |= (1<<PIN_RPWM_LV);
     392:	a5 e2       	ldi	r26, 0x25	; 37
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e5 e2       	ldi	r30, 0x25	; 37
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	80 61       	ori	r24, 0x10	; 16
     39e:	8c 93       	st	X, r24
		PORT_LPWM_LA &= ~(1<<PIN_LPWM_LA);
     3a0:	a5 e2       	ldi	r26, 0x25	; 37
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	e5 e2       	ldi	r30, 0x25	; 37
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	8f 77       	andi	r24, 0x7F	; 127
     3ac:	8c 93       	st	X, r24
		PORT_RPWM_LA |= (1<<PIN_RPWM_LA);
     3ae:	a5 e2       	ldi	r26, 0x25	; 37
     3b0:	b0 e0       	ldi	r27, 0x00	; 0
     3b2:	e5 e2       	ldi	r30, 0x25	; 37
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	80 64       	ori	r24, 0x40	; 64
     3ba:	8c 93       	st	X, r24
     3bc:	21 c0       	rjmp	.+66     	; 0x400 <__vector_15+0xf6>
	}
	else if (OCR2B != 0)
     3be:	e4 eb       	ldi	r30, 0xB4	; 180
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	80 81       	ld	r24, Z
     3c4:	88 23       	and	r24, r24
     3c6:	e1 f0       	breq	.+56     	; 0x400 <__vector_15+0xf6>
	{
		PORT_RPWM_LV &= ~(1<<PIN_RPWM_LV);
     3c8:	a5 e2       	ldi	r26, 0x25	; 37
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	e5 e2       	ldi	r30, 0x25	; 37
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	8f 7e       	andi	r24, 0xEF	; 239
     3d4:	8c 93       	st	X, r24
		PORT_LPWM_LV |= (1<<PIN_LPWM_LV);
     3d6:	a5 e2       	ldi	r26, 0x25	; 37
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e5 e2       	ldi	r30, 0x25	; 37
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	80 62       	ori	r24, 0x20	; 32
     3e2:	8c 93       	st	X, r24
		PORT_RPWM_LA &= ~(1<<PIN_RPWM_LA);
     3e4:	a5 e2       	ldi	r26, 0x25	; 37
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e5 e2       	ldi	r30, 0x25	; 37
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	8f 7b       	andi	r24, 0xBF	; 191
     3f0:	8c 93       	st	X, r24
		PORT_LPWM_LA |= (1<<PIN_LPWM_LA);
     3f2:	a5 e2       	ldi	r26, 0x25	; 37
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	e5 e2       	ldi	r30, 0x25	; 37
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	80 68       	ori	r24, 0x80	; 128
     3fe:	8c 93       	st	X, r24
	}
}
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	ff 91       	pop	r31
     406:	ef 91       	pop	r30
     408:	bf 91       	pop	r27
     40a:	af 91       	pop	r26
     40c:	8f 91       	pop	r24
     40e:	0f 90       	pop	r0
     410:	00 92 5b 00 	sts	0x005B, r0
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <__vector_13>:

ISR(TIMER2_COMPA_vect)
{
     41e:	1f 92       	push	r1
     420:	0f 92       	push	r0
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	0f 92       	push	r0
     426:	00 90 5b 00 	lds	r0, 0x005B
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	8f 93       	push	r24
     430:	af 93       	push	r26
     432:	bf 93       	push	r27
     434:	ef 93       	push	r30
     436:	ff 93       	push	r31
     438:	df 93       	push	r29
     43a:	cf 93       	push	r28
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
	if (OCR2A != 255)
     440:	e3 eb       	ldi	r30, 0xB3	; 179
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	8f 3f       	cpi	r24, 0xFF	; 255
     448:	71 f0       	breq	.+28     	; 0x466 <__vector_13+0x48>
	{
		PORT_RPWM_LV &= ~(1<<PIN_RPWM_LV);
     44a:	a5 e2       	ldi	r26, 0x25	; 37
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	e5 e2       	ldi	r30, 0x25	; 37
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	80 81       	ld	r24, Z
     454:	8f 7e       	andi	r24, 0xEF	; 239
     456:	8c 93       	st	X, r24
		PORT_RPWM_LA &= ~(1<<PIN_RPWM_LA);
     458:	a5 e2       	ldi	r26, 0x25	; 37
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e5 e2       	ldi	r30, 0x25	; 37
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	8f 7b       	andi	r24, 0xBF	; 191
     464:	8c 93       	st	X, r24
	}
}
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	8f 91       	pop	r24
     474:	0f 90       	pop	r0
     476:	00 92 5b 00 	sts	0x005B, r0
     47a:	0f 90       	pop	r0
     47c:	0f be       	out	0x3f, r0	; 63
     47e:	0f 90       	pop	r0
     480:	1f 90       	pop	r1
     482:	18 95       	reti

00000484 <__vector_14>:

ISR(TIMER2_COMPB_vect)
{
     484:	1f 92       	push	r1
     486:	0f 92       	push	r0
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	0f 92       	push	r0
     48c:	00 90 5b 00 	lds	r0, 0x005B
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	af 93       	push	r26
     498:	bf 93       	push	r27
     49a:	ef 93       	push	r30
     49c:	ff 93       	push	r31
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
	if (OCR2B != 255)
     4a6:	e4 eb       	ldi	r30, 0xB4	; 180
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 3f       	cpi	r24, 0xFF	; 255
     4ae:	71 f0       	breq	.+28     	; 0x4cc <__vector_14+0x48>
	{
	    PORT_LPWM_LV &= ~(1<<PIN_LPWM_LV);
     4b0:	a5 e2       	ldi	r26, 0x25	; 37
     4b2:	b0 e0       	ldi	r27, 0x00	; 0
     4b4:	e5 e2       	ldi	r30, 0x25	; 37
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	8f 7d       	andi	r24, 0xDF	; 223
     4bc:	8c 93       	st	X, r24
		PORT_LPWM_LA &= ~(1<<PIN_LPWM_LA);
     4be:	a5 e2       	ldi	r26, 0x25	; 37
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e5 e2       	ldi	r30, 0x25	; 37
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	8f 77       	andi	r24, 0x7F	; 127
     4ca:	8c 93       	st	X, r24
	}
}
     4cc:	cf 91       	pop	r28
     4ce:	df 91       	pop	r29
     4d0:	ff 91       	pop	r31
     4d2:	ef 91       	pop	r30
     4d4:	bf 91       	pop	r27
     4d6:	af 91       	pop	r26
     4d8:	8f 91       	pop	r24
     4da:	0f 90       	pop	r0
     4dc:	00 92 5b 00 	sts	0x005B, r0
     4e0:	0f 90       	pop	r0
     4e2:	0f be       	out	0x3f, r0	; 63
     4e4:	0f 90       	pop	r0
     4e6:	1f 90       	pop	r1
     4e8:	18 95       	reti

000004ea <init_h_bridge>:

void init_h_bridge(void)
{
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
	// Config pins as output
	DDR_RPWM_RV |= (1<<PIN_RPWM_RV);
     4f2:	ad e2       	ldi	r26, 0x2D	; 45
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	ed e2       	ldi	r30, 0x2D	; 45
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	80 61       	ori	r24, 0x10	; 16
     4fe:	8c 93       	st	X, r24
	DDR_LPWM_RV |= (1<<PIN_LPWM_RV);
     500:	ad e2       	ldi	r26, 0x2D	; 45
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	ed e2       	ldi	r30, 0x2D	; 45
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	80 62       	ori	r24, 0x20	; 32
     50c:	8c 93       	st	X, r24
	DDR_RPWM_RA |= (1<<PIN_RPWM_RA);
     50e:	a0 e3       	ldi	r26, 0x30	; 48
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	e0 e3       	ldi	r30, 0x30	; 48
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	8c 93       	st	X, r24
	DDR_LPWM_RA |= (1<<PIN_LPWM_RA);
     51c:	ad e2       	ldi	r26, 0x2D	; 45
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	ed e2       	ldi	r30, 0x2D	; 45
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	88 60       	ori	r24, 0x08	; 8
     528:	8c 93       	st	X, r24
	DDR_RPWM_LV |= (1<<PIN_RPWM_LV);
     52a:	a4 e2       	ldi	r26, 0x24	; 36
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	e4 e2       	ldi	r30, 0x24	; 36
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	80 81       	ld	r24, Z
     534:	80 61       	ori	r24, 0x10	; 16
     536:	8c 93       	st	X, r24
	DDR_LPWM_LV |= (1<<PIN_LPWM_LV);
     538:	a4 e2       	ldi	r26, 0x24	; 36
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e4 e2       	ldi	r30, 0x24	; 36
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	80 62       	ori	r24, 0x20	; 32
     544:	8c 93       	st	X, r24
	DDR_RPWM_LA |= (1<<PIN_RPWM_LA);
     546:	a4 e2       	ldi	r26, 0x24	; 36
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	e4 e2       	ldi	r30, 0x24	; 36
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	80 64       	ori	r24, 0x40	; 64
     552:	8c 93       	st	X, r24
	DDR_LPWM_LA |= (1<<PIN_LPWM_LA);
     554:	a4 e2       	ldi	r26, 0x24	; 36
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	e4 e2       	ldi	r30, 0x24	; 36
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	80 68       	ori	r24, 0x80	; 128
     560:	8c 93       	st	X, r24

	// Output low
	PORT_RPWM_RV &= ~(1<<PIN_RPWM_RV);
     562:	ae e2       	ldi	r26, 0x2E	; 46
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	ee e2       	ldi	r30, 0x2E	; 46
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	8f 7e       	andi	r24, 0xEF	; 239
     56e:	8c 93       	st	X, r24
	PORT_LPWM_RV &= ~(1<<PIN_LPWM_RV);
     570:	ae e2       	ldi	r26, 0x2E	; 46
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	ee e2       	ldi	r30, 0x2E	; 46
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	8f 7d       	andi	r24, 0xDF	; 223
     57c:	8c 93       	st	X, r24
	PORT_RPWM_RA &= ~(1<<PIN_RPWM_RA);
     57e:	a4 e3       	ldi	r26, 0x34	; 52
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e4 e3       	ldi	r30, 0x34	; 52
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	8f 7d       	andi	r24, 0xDF	; 223
     58a:	8c 93       	st	X, r24
	PORT_LPWM_RA &= ~(1<<PIN_LPWM_RA);
     58c:	ae e2       	ldi	r26, 0x2E	; 46
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	ee e2       	ldi	r30, 0x2E	; 46
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	87 7f       	andi	r24, 0xF7	; 247
     598:	8c 93       	st	X, r24

	// Use mode 0, clkdiv = 64
	TCCR0A = 0;
     59a:	e4 e4       	ldi	r30, 0x44	; 68
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	10 82       	st	Z, r1
	TCCR0B = (0<<CS02) | (1<<CS01) | (1<<CS00);
     5a0:	e5 e4       	ldi	r30, 0x45	; 69
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	83 e0       	ldi	r24, 0x03	; 3
     5a6:	80 83       	st	Z, r24

	// Disable PWM output
	OCR0A = 0;
     5a8:	e7 e4       	ldi	r30, 0x47	; 71
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	10 82       	st	Z, r1
	OCR0B = 0;
     5ae:	e8 e4       	ldi	r30, 0x48	; 72
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	10 82       	st	Z, r1

	// Interrupts on OCA, OCB and OVF
	TIMSK0 = (1<<OCIE0B) | (1<<OCIE0A) | (1<<TOIE0);
     5b4:	ee e6       	ldi	r30, 0x6E	; 110
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	87 e0       	ldi	r24, 0x07	; 7
     5ba:	80 83       	st	Z, r24

	// Use mode 0, clkdiv = 64
	TCCR2A = 0;
     5bc:	e0 eb       	ldi	r30, 0xB0	; 176
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	10 82       	st	Z, r1
	TCCR2B = (0<<CS22) | (1<<CS21) | (1<<CS20);
     5c2:	e1 eb       	ldi	r30, 0xB1	; 177
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	80 83       	st	Z, r24

	// Disable PWM output
	OCR2A = 0;
     5ca:	e3 eb       	ldi	r30, 0xB3	; 179
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
	OCR2B = 0;
     5d0:	e4 eb       	ldi	r30, 0xB4	; 180
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	10 82       	st	Z, r1

	// Interrupts on OCA, OCB and OVF
	TIMSK2 = (1<<OCIE2B) | (1<<OCIE2A) | (1<<TOIE2);
     5d6:	e0 e7       	ldi	r30, 0x70	; 112
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	87 e0       	ldi	r24, 0x07	; 7
     5dc:	80 83       	st	Z, r24

	sei();
     5de:	78 94       	sei
}
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	08 95       	ret

000005e6 <h_bridge_set_percentage_rechts>:

void h_bridge_set_percentage_rechts(signed char percentage)
{
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	0f 92       	push	r0
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	89 83       	std	Y+1, r24	; 0x01
	if (percentage >= -100 && percentage <= 100)
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	8c 39       	cpi	r24, 0x9C	; 156
     5f6:	0c f4       	brge	.+2      	; 0x5fa <h_bridge_set_percentage_rechts+0x14>
     5f8:	46 c0       	rjmp	.+140    	; 0x686 <h_bridge_set_percentage_rechts+0xa0>
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	85 36       	cpi	r24, 0x65	; 101
     5fe:	0c f0       	brlt	.+2      	; 0x602 <h_bridge_set_percentage_rechts+0x1c>
     600:	42 c0       	rjmp	.+132    	; 0x686 <h_bridge_set_percentage_rechts+0xa0>
	{
		if (percentage >= 0)
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	88 23       	and	r24, r24
     606:	04 f1       	brlt	.+64     	; 0x648 <h_bridge_set_percentage_rechts+0x62>
		{
			// Disable LPWM, calculate RPWM
			OCR0B = 0;
     608:	e8 e4       	ldi	r30, 0x48	; 72
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	10 82       	st	Z, r1
			OCR0A = (255*percentage)/100;
     60e:	e7 e4       	ldi	r30, 0x47	; 71
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	48 2f       	mov	r20, r24
     616:	55 27       	eor	r21, r21
     618:	47 fd       	sbrc	r20, 7
     61a:	50 95       	com	r21
     61c:	ca 01       	movw	r24, r20
     61e:	9c 01       	movw	r18, r24
     620:	22 0f       	add	r18, r18
     622:	33 1f       	adc	r19, r19
     624:	c9 01       	movw	r24, r18
     626:	96 95       	lsr	r25
     628:	98 2f       	mov	r25, r24
     62a:	88 27       	eor	r24, r24
     62c:	97 95       	ror	r25
     62e:	87 95       	ror	r24
     630:	82 1b       	sub	r24, r18
     632:	93 0b       	sbc	r25, r19
     634:	84 0f       	add	r24, r20
     636:	95 1f       	adc	r25, r21
     638:	24 e6       	ldi	r18, 0x64	; 100
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	b9 01       	movw	r22, r18
     63e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__divmodhi4>
     642:	cb 01       	movw	r24, r22
     644:	80 83       	st	Z, r24
     646:	1f c0       	rjmp	.+62     	; 0x686 <h_bridge_set_percentage_rechts+0xa0>
		}
		else // percentage < 0
		{
			// Disable RPWM, calculate LPWM
			OCR0A = 0;
     648:	e7 e4       	ldi	r30, 0x47	; 71
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	10 82       	st	Z, r1
			OCR0B = (255*percentage)/-100;
     64e:	e8 e4       	ldi	r30, 0x48	; 72
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	48 2f       	mov	r20, r24
     656:	55 27       	eor	r21, r21
     658:	47 fd       	sbrc	r20, 7
     65a:	50 95       	com	r21
     65c:	ca 01       	movw	r24, r20
     65e:	9c 01       	movw	r18, r24
     660:	22 0f       	add	r18, r18
     662:	33 1f       	adc	r19, r19
     664:	c9 01       	movw	r24, r18
     666:	96 95       	lsr	r25
     668:	98 2f       	mov	r25, r24
     66a:	88 27       	eor	r24, r24
     66c:	97 95       	ror	r25
     66e:	87 95       	ror	r24
     670:	82 1b       	sub	r24, r18
     672:	93 0b       	sbc	r25, r19
     674:	84 0f       	add	r24, r20
     676:	95 1f       	adc	r25, r21
     678:	2c e9       	ldi	r18, 0x9C	; 156
     67a:	3f ef       	ldi	r19, 0xFF	; 255
     67c:	b9 01       	movw	r22, r18
     67e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__divmodhi4>
     682:	cb 01       	movw	r24, r22
     684:	80 83       	st	Z, r24
		}
	}
}
     686:	0f 90       	pop	r0
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	08 95       	ret

0000068e <h_bridge_set_percentage_links>:

void h_bridge_set_percentage_links(signed char percentage)
{
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	0f 92       	push	r0
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	89 83       	std	Y+1, r24	; 0x01
	if (percentage >= -100 && percentage <= 100)
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	8c 39       	cpi	r24, 0x9C	; 156
     69e:	0c f4       	brge	.+2      	; 0x6a2 <h_bridge_set_percentage_links+0x14>
     6a0:	46 c0       	rjmp	.+140    	; 0x72e <h_bridge_set_percentage_links+0xa0>
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	85 36       	cpi	r24, 0x65	; 101
     6a6:	0c f0       	brlt	.+2      	; 0x6aa <h_bridge_set_percentage_links+0x1c>
     6a8:	42 c0       	rjmp	.+132    	; 0x72e <h_bridge_set_percentage_links+0xa0>
	{
		if (percentage >= 0)
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	88 23       	and	r24, r24
     6ae:	04 f1       	brlt	.+64     	; 0x6f0 <h_bridge_set_percentage_links+0x62>
		{
			// Disable LPWM, calculate RPWM
			OCR2B = 0;
     6b0:	e4 eb       	ldi	r30, 0xB4	; 180
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	10 82       	st	Z, r1
			OCR2A = (255*percentage)/100;
     6b6:	e3 eb       	ldi	r30, 0xB3	; 179
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	48 2f       	mov	r20, r24
     6be:	55 27       	eor	r21, r21
     6c0:	47 fd       	sbrc	r20, 7
     6c2:	50 95       	com	r21
     6c4:	ca 01       	movw	r24, r20
     6c6:	9c 01       	movw	r18, r24
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	c9 01       	movw	r24, r18
     6ce:	96 95       	lsr	r25
     6d0:	98 2f       	mov	r25, r24
     6d2:	88 27       	eor	r24, r24
     6d4:	97 95       	ror	r25
     6d6:	87 95       	ror	r24
     6d8:	82 1b       	sub	r24, r18
     6da:	93 0b       	sbc	r25, r19
     6dc:	84 0f       	add	r24, r20
     6de:	95 1f       	adc	r25, r21
     6e0:	24 e6       	ldi	r18, 0x64	; 100
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	b9 01       	movw	r22, r18
     6e6:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__divmodhi4>
     6ea:	cb 01       	movw	r24, r22
     6ec:	80 83       	st	Z, r24
     6ee:	1f c0       	rjmp	.+62     	; 0x72e <h_bridge_set_percentage_links+0xa0>
		}
		else // percentage < 0
		{
			// Disable RPWM, calculate LPWM
			OCR2A = 0;
     6f0:	e3 eb       	ldi	r30, 0xB3	; 179
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	10 82       	st	Z, r1
			OCR2B = (255*percentage)/-100;
     6f6:	e4 eb       	ldi	r30, 0xB4	; 180
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	48 2f       	mov	r20, r24
     6fe:	55 27       	eor	r21, r21
     700:	47 fd       	sbrc	r20, 7
     702:	50 95       	com	r21
     704:	ca 01       	movw	r24, r20
     706:	9c 01       	movw	r18, r24
     708:	22 0f       	add	r18, r18
     70a:	33 1f       	adc	r19, r19
     70c:	c9 01       	movw	r24, r18
     70e:	96 95       	lsr	r25
     710:	98 2f       	mov	r25, r24
     712:	88 27       	eor	r24, r24
     714:	97 95       	ror	r25
     716:	87 95       	ror	r24
     718:	82 1b       	sub	r24, r18
     71a:	93 0b       	sbc	r25, r19
     71c:	84 0f       	add	r24, r20
     71e:	95 1f       	adc	r25, r21
     720:	2c e9       	ldi	r18, 0x9C	; 156
     722:	3f ef       	ldi	r19, 0xFF	; 255
     724:	b9 01       	movw	r22, r18
     726:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__divmodhi4>
     72a:	cb 01       	movw	r24, r22
     72c:	80 83       	st	Z, r24
		}
	}
}
     72e:	0f 90       	pop	r0
     730:	cf 91       	pop	r28
     732:	df 91       	pop	r29
     734:	08 95       	ret

00000736 <lcd_init_4d>:
  Entry:    equates (LCD instructions) set up for the desired operation
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_init_4d(void)
{
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	df 93       	push	r29
     73c:	cf 93       	push	r28
     73e:	cd b7       	in	r28, 0x3d	; 61
     740:	de b7       	in	r29, 0x3e	; 62
     742:	c2 5d       	subi	r28, 0xD2	; 210
     744:	d0 40       	sbci	r29, 0x00	; 0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	fe 01       	movw	r30, r28
     752:	e1 53       	subi	r30, 0x31	; 49
     754:	ff 4f       	sbci	r31, 0xFF	; 255
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a8 ec       	ldi	r26, 0xC8	; 200
     75c:	b2 e4       	ldi	r27, 0x42	; 66
     75e:	80 83       	st	Z, r24
     760:	91 83       	std	Z+1, r25	; 0x01
     762:	a2 83       	std	Z+2, r26	; 0x02
     764:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     766:	8e 01       	movw	r16, r28
     768:	05 53       	subi	r16, 0x35	; 53
     76a:	1f 4f       	sbci	r17, 0xFF	; 255
     76c:	fe 01       	movw	r30, r28
     76e:	e1 53       	subi	r30, 0x31	; 49
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	60 81       	ld	r22, Z
     774:	71 81       	ldd	r23, Z+1	; 0x01
     776:	82 81       	ldd	r24, Z+2	; 0x02
     778:	93 81       	ldd	r25, Z+3	; 0x03
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	4a e7       	ldi	r20, 0x7A	; 122
     780:	55 e4       	ldi	r21, 0x45	; 69
     782:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     786:	dc 01       	movw	r26, r24
     788:	cb 01       	movw	r24, r22
     78a:	f8 01       	movw	r30, r16
     78c:	80 83       	st	Z, r24
     78e:	91 83       	std	Z+1, r25	; 0x01
     790:	a2 83       	std	Z+2, r26	; 0x02
     792:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     794:	fe 01       	movw	r30, r28
     796:	e5 53       	subi	r30, 0x35	; 53
     798:	ff 4f       	sbci	r31, 0xFF	; 255
     79a:	60 81       	ld	r22, Z
     79c:	71 81       	ldd	r23, Z+1	; 0x01
     79e:	82 81       	ldd	r24, Z+2	; 0x02
     7a0:	93 81       	ldd	r25, Z+3	; 0x03
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e8       	ldi	r20, 0x80	; 128
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     7ae:	88 23       	and	r24, r24
     7b0:	44 f4       	brge	.+16     	; 0x7c2 <lcd_init_4d+0x8c>
		__ticks = 1;
     7b2:	fe 01       	movw	r30, r28
     7b4:	e7 53       	subi	r30, 0x37	; 55
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	80 83       	st	Z, r24
     7c0:	64 c0       	rjmp	.+200    	; 0x88a <lcd_init_4d+0x154>
	else if (__tmp > 65535)
     7c2:	fe 01       	movw	r30, r28
     7c4:	e5 53       	subi	r30, 0x35	; 53
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	60 81       	ld	r22, Z
     7ca:	71 81       	ldd	r23, Z+1	; 0x01
     7cc:	82 81       	ldd	r24, Z+2	; 0x02
     7ce:	93 81       	ldd	r25, Z+3	; 0x03
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	3f ef       	ldi	r19, 0xFF	; 255
     7d4:	4f e7       	ldi	r20, 0x7F	; 127
     7d6:	57 e4       	ldi	r21, 0x47	; 71
     7d8:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
     7dc:	18 16       	cp	r1, r24
     7de:	0c f0       	brlt	.+2      	; 0x7e2 <lcd_init_4d+0xac>
     7e0:	43 c0       	rjmp	.+134    	; 0x868 <lcd_init_4d+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7e2:	fe 01       	movw	r30, r28
     7e4:	e1 53       	subi	r30, 0x31	; 49
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	60 81       	ld	r22, Z
     7ea:	71 81       	ldd	r23, Z+1	; 0x01
     7ec:	82 81       	ldd	r24, Z+2	; 0x02
     7ee:	93 81       	ldd	r25, Z+3	; 0x03
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e2       	ldi	r20, 0x20	; 32
     7f6:	51 e4       	ldi	r21, 0x41	; 65
     7f8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	8e 01       	movw	r16, r28
     802:	07 53       	subi	r16, 0x37	; 55
     804:	1f 4f       	sbci	r17, 0xFF	; 255
     806:	bc 01       	movw	r22, r24
     808:	cd 01       	movw	r24, r26
     80a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	f8 01       	movw	r30, r16
     814:	91 83       	std	Z+1, r25	; 0x01
     816:	80 83       	st	Z, r24
     818:	1f c0       	rjmp	.+62     	; 0x858 <lcd_init_4d+0x122>
     81a:	fe 01       	movw	r30, r28
     81c:	e9 53       	subi	r30, 0x39	; 57
     81e:	ff 4f       	sbci	r31, 0xFF	; 255
     820:	80 e9       	ldi	r24, 0x90	; 144
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	91 83       	std	Z+1, r25	; 0x01
     826:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     828:	fe 01       	movw	r30, r28
     82a:	e9 53       	subi	r30, 0x39	; 57
     82c:	ff 4f       	sbci	r31, 0xFF	; 255
     82e:	80 81       	ld	r24, Z
     830:	91 81       	ldd	r25, Z+1	; 0x01
     832:	01 97       	sbiw	r24, 0x01	; 1
     834:	f1 f7       	brne	.-4      	; 0x832 <lcd_init_4d+0xfc>
     836:	fe 01       	movw	r30, r28
     838:	e9 53       	subi	r30, 0x39	; 57
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     840:	de 01       	movw	r26, r28
     842:	a7 53       	subi	r26, 0x37	; 55
     844:	bf 4f       	sbci	r27, 0xFF	; 255
     846:	fe 01       	movw	r30, r28
     848:	e7 53       	subi	r30, 0x37	; 55
     84a:	ff 4f       	sbci	r31, 0xFF	; 255
     84c:	80 81       	ld	r24, Z
     84e:	91 81       	ldd	r25, Z+1	; 0x01
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	11 96       	adiw	r26, 0x01	; 1
     854:	9c 93       	st	X, r25
     856:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     858:	fe 01       	movw	r30, r28
     85a:	e7 53       	subi	r30, 0x37	; 55
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	80 81       	ld	r24, Z
     860:	91 81       	ldd	r25, Z+1	; 0x01
     862:	00 97       	sbiw	r24, 0x00	; 0
     864:	d1 f6       	brne	.-76     	; 0x81a <lcd_init_4d+0xe4>
     866:	27 c0       	rjmp	.+78     	; 0x8b6 <lcd_init_4d+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     868:	8e 01       	movw	r16, r28
     86a:	07 53       	subi	r16, 0x37	; 55
     86c:	1f 4f       	sbci	r17, 0xFF	; 255
     86e:	fe 01       	movw	r30, r28
     870:	e5 53       	subi	r30, 0x35	; 53
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	60 81       	ld	r22, Z
     876:	71 81       	ldd	r23, Z+1	; 0x01
     878:	82 81       	ldd	r24, Z+2	; 0x02
     87a:	93 81       	ldd	r25, Z+3	; 0x03
     87c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     880:	dc 01       	movw	r26, r24
     882:	cb 01       	movw	r24, r22
     884:	f8 01       	movw	r30, r16
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	80 83       	st	Z, r24
     88a:	de 01       	movw	r26, r28
     88c:	ab 53       	subi	r26, 0x3B	; 59
     88e:	bf 4f       	sbci	r27, 0xFF	; 255
     890:	fe 01       	movw	r30, r28
     892:	e7 53       	subi	r30, 0x37	; 55
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	80 81       	ld	r24, Z
     898:	91 81       	ldd	r25, Z+1	; 0x01
     89a:	8d 93       	st	X+, r24
     89c:	9c 93       	st	X, r25
     89e:	fe 01       	movw	r30, r28
     8a0:	eb 53       	subi	r30, 0x3B	; 59
     8a2:	ff 4f       	sbci	r31, 0xFF	; 255
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <lcd_init_4d+0x172>
     8ac:	fe 01       	movw	r30, r28
     8ae:	eb 53       	subi	r30, 0x3B	; 59
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
     8b2:	91 83       	std	Z+1, r25	; 0x01
     8b4:	80 83       	st	Z, r24
//   this instruction can be sent on just the four available data lines and it will be interpreted
//   properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
//   control lines have previously been configured properly.

// Set up the RS and E lines for the 'lcd_write_4' subroutine.
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
     8b6:	ab e0       	ldi	r26, 0x0B	; 11
     8b8:	b1 e0       	ldi	r27, 0x01	; 1
     8ba:	eb e0       	ldi	r30, 0x0B	; 11
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	80 81       	ld	r24, Z
     8c0:	87 7f       	andi	r24, 0xF7	; 247
     8c2:	8c 93       	st	X, r24
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
     8c4:	ab e0       	ldi	r26, 0x0B	; 11
     8c6:	b1 e0       	ldi	r27, 0x01	; 1
     8c8:	eb e0       	ldi	r30, 0x0B	; 11
     8ca:	f1 e0       	ldi	r31, 0x01	; 1
     8cc:	80 81       	ld	r24, Z
     8ce:	8b 7f       	andi	r24, 0xFB	; 251
     8d0:	8c 93       	st	X, r24

// Reset the LCD controller
    lcd_write_4(lcd_FunctionReset);                 // first part of reset sequence
     8d2:	80 e3       	ldi	r24, 0x30	; 48
     8d4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
     8d8:	fe 01       	movw	r30, r28
     8da:	ef 53       	subi	r30, 0x3F	; 63
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 e2       	ldi	r26, 0x20	; 32
     8e4:	b1 e4       	ldi	r27, 0x41	; 65
     8e6:	80 83       	st	Z, r24
     8e8:	91 83       	std	Z+1, r25	; 0x01
     8ea:	a2 83       	std	Z+2, r26	; 0x02
     8ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8ee:	8e 01       	movw	r16, r28
     8f0:	03 54       	subi	r16, 0x43	; 67
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	fe 01       	movw	r30, r28
     8f6:	ef 53       	subi	r30, 0x3F	; 63
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	60 81       	ld	r22, Z
     8fc:	71 81       	ldd	r23, Z+1	; 0x01
     8fe:	82 81       	ldd	r24, Z+2	; 0x02
     900:	93 81       	ldd	r25, Z+3	; 0x03
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	4a e7       	ldi	r20, 0x7A	; 122
     908:	55 e4       	ldi	r21, 0x45	; 69
     90a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     90e:	dc 01       	movw	r26, r24
     910:	cb 01       	movw	r24, r22
     912:	f8 01       	movw	r30, r16
     914:	80 83       	st	Z, r24
     916:	91 83       	std	Z+1, r25	; 0x01
     918:	a2 83       	std	Z+2, r26	; 0x02
     91a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     91c:	fe 01       	movw	r30, r28
     91e:	e3 54       	subi	r30, 0x43	; 67
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	60 81       	ld	r22, Z
     924:	71 81       	ldd	r23, Z+1	; 0x01
     926:	82 81       	ldd	r24, Z+2	; 0x02
     928:	93 81       	ldd	r25, Z+3	; 0x03
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e8       	ldi	r20, 0x80	; 128
     930:	5f e3       	ldi	r21, 0x3F	; 63
     932:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     936:	88 23       	and	r24, r24
     938:	44 f4       	brge	.+16     	; 0x94a <lcd_init_4d+0x214>
		__ticks = 1;
     93a:	fe 01       	movw	r30, r28
     93c:	e5 54       	subi	r30, 0x45	; 69
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	91 83       	std	Z+1, r25	; 0x01
     946:	80 83       	st	Z, r24
     948:	64 c0       	rjmp	.+200    	; 0xa12 <lcd_init_4d+0x2dc>
	else if (__tmp > 65535)
     94a:	fe 01       	movw	r30, r28
     94c:	e3 54       	subi	r30, 0x43	; 67
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	60 81       	ld	r22, Z
     952:	71 81       	ldd	r23, Z+1	; 0x01
     954:	82 81       	ldd	r24, Z+2	; 0x02
     956:	93 81       	ldd	r25, Z+3	; 0x03
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	3f ef       	ldi	r19, 0xFF	; 255
     95c:	4f e7       	ldi	r20, 0x7F	; 127
     95e:	57 e4       	ldi	r21, 0x47	; 71
     960:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
     964:	18 16       	cp	r1, r24
     966:	0c f0       	brlt	.+2      	; 0x96a <lcd_init_4d+0x234>
     968:	43 c0       	rjmp	.+134    	; 0x9f0 <lcd_init_4d+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     96a:	fe 01       	movw	r30, r28
     96c:	ef 53       	subi	r30, 0x3F	; 63
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	60 81       	ld	r22, Z
     972:	71 81       	ldd	r23, Z+1	; 0x01
     974:	82 81       	ldd	r24, Z+2	; 0x02
     976:	93 81       	ldd	r25, Z+3	; 0x03
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e2       	ldi	r20, 0x20	; 32
     97e:	51 e4       	ldi	r21, 0x41	; 65
     980:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	8e 01       	movw	r16, r28
     98a:	05 54       	subi	r16, 0x45	; 69
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
     992:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     996:	dc 01       	movw	r26, r24
     998:	cb 01       	movw	r24, r22
     99a:	f8 01       	movw	r30, r16
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	80 83       	st	Z, r24
     9a0:	1f c0       	rjmp	.+62     	; 0x9e0 <lcd_init_4d+0x2aa>
     9a2:	fe 01       	movw	r30, r28
     9a4:	e7 54       	subi	r30, 0x47	; 71
     9a6:	ff 4f       	sbci	r31, 0xFF	; 255
     9a8:	80 e9       	ldi	r24, 0x90	; 144
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	91 83       	std	Z+1, r25	; 0x01
     9ae:	80 83       	st	Z, r24
     9b0:	fe 01       	movw	r30, r28
     9b2:	e7 54       	subi	r30, 0x47	; 71
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	80 81       	ld	r24, Z
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <lcd_init_4d+0x284>
     9be:	fe 01       	movw	r30, r28
     9c0:	e7 54       	subi	r30, 0x47	; 71
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c8:	de 01       	movw	r26, r28
     9ca:	a5 54       	subi	r26, 0x45	; 69
     9cc:	bf 4f       	sbci	r27, 0xFF	; 255
     9ce:	fe 01       	movw	r30, r28
     9d0:	e5 54       	subi	r30, 0x45	; 69
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	91 81       	ldd	r25, Z+1	; 0x01
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	11 96       	adiw	r26, 0x01	; 1
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e0:	fe 01       	movw	r30, r28
     9e2:	e5 54       	subi	r30, 0x45	; 69
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	d1 f6       	brne	.-76     	; 0x9a2 <lcd_init_4d+0x26c>
     9ee:	27 c0       	rjmp	.+78     	; 0xa3e <lcd_init_4d+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9f0:	8e 01       	movw	r16, r28
     9f2:	05 54       	subi	r16, 0x45	; 69
     9f4:	1f 4f       	sbci	r17, 0xFF	; 255
     9f6:	fe 01       	movw	r30, r28
     9f8:	e3 54       	subi	r30, 0x43	; 67
     9fa:	ff 4f       	sbci	r31, 0xFF	; 255
     9fc:	60 81       	ld	r22, Z
     9fe:	71 81       	ldd	r23, Z+1	; 0x01
     a00:	82 81       	ldd	r24, Z+2	; 0x02
     a02:	93 81       	ldd	r25, Z+3	; 0x03
     a04:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	f8 01       	movw	r30, r16
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
     a12:	de 01       	movw	r26, r28
     a14:	a9 54       	subi	r26, 0x49	; 73
     a16:	bf 4f       	sbci	r27, 0xFF	; 255
     a18:	fe 01       	movw	r30, r28
     a1a:	e5 54       	subi	r30, 0x45	; 69
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	8d 93       	st	X+, r24
     a24:	9c 93       	st	X, r25
     a26:	fe 01       	movw	r30, r28
     a28:	e9 54       	subi	r30, 0x49	; 73
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	f1 f7       	brne	.-4      	; 0xa30 <lcd_init_4d+0x2fa>
     a34:	fe 01       	movw	r30, r28
     a36:	e9 54       	subi	r30, 0x49	; 73
     a38:	ff 4f       	sbci	r31, 0xFF	; 255
     a3a:	91 83       	std	Z+1, r25	; 0x01
     a3c:	80 83       	st	Z, r24
    _delay_ms(10);                                  // 4.1 mS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // second part of reset sequence
     a3e:	80 e3       	ldi	r24, 0x30	; 48
     a40:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
     a44:	fe 01       	movw	r30, r28
     a46:	ed 54       	subi	r30, 0x4D	; 77
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a8 e4       	ldi	r26, 0x48	; 72
     a50:	b3 e4       	ldi	r27, 0x43	; 67
     a52:	80 83       	st	Z, r24
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	a2 83       	std	Z+2, r26	; 0x02
     a58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     a5a:	8e 01       	movw	r16, r28
     a5c:	01 55       	subi	r16, 0x51	; 81
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
     a60:	fe 01       	movw	r30, r28
     a62:	ed 54       	subi	r30, 0x4D	; 77
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	60 81       	ld	r22, Z
     a68:	71 81       	ldd	r23, Z+1	; 0x01
     a6a:	82 81       	ldd	r24, Z+2	; 0x02
     a6c:	93 81       	ldd	r25, Z+3	; 0x03
     a6e:	2b ea       	ldi	r18, 0xAB	; 171
     a70:	3a ea       	ldi	r19, 0xAA	; 170
     a72:	4a ea       	ldi	r20, 0xAA	; 170
     a74:	50 e4       	ldi	r21, 0x40	; 64
     a76:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     a7a:	dc 01       	movw	r26, r24
     a7c:	cb 01       	movw	r24, r22
     a7e:	f8 01       	movw	r30, r16
     a80:	80 83       	st	Z, r24
     a82:	91 83       	std	Z+1, r25	; 0x01
     a84:	a2 83       	std	Z+2, r26	; 0x02
     a86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a88:	fe 01       	movw	r30, r28
     a8a:	e1 55       	subi	r30, 0x51	; 81
     a8c:	ff 4f       	sbci	r31, 0xFF	; 255
     a8e:	60 81       	ld	r22, Z
     a90:	71 81       	ldd	r23, Z+1	; 0x01
     a92:	82 81       	ldd	r24, Z+2	; 0x02
     a94:	93 81       	ldd	r25, Z+3	; 0x03
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e8       	ldi	r20, 0x80	; 128
     a9c:	5f e3       	ldi	r21, 0x3F	; 63
     a9e:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     aa2:	88 23       	and	r24, r24
     aa4:	34 f4       	brge	.+12     	; 0xab2 <lcd_init_4d+0x37c>
		__ticks = 1;
     aa6:	fe 01       	movw	r30, r28
     aa8:	e2 55       	subi	r30, 0x52	; 82
     aaa:	ff 4f       	sbci	r31, 0xFF	; 255
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	80 83       	st	Z, r24
     ab0:	e0 c0       	rjmp	.+448    	; 0xc72 <lcd_init_4d+0x53c>
	else if (__tmp > 255)
     ab2:	fe 01       	movw	r30, r28
     ab4:	e1 55       	subi	r30, 0x51	; 81
     ab6:	ff 4f       	sbci	r31, 0xFF	; 255
     ab8:	60 81       	ld	r22, Z
     aba:	71 81       	ldd	r23, Z+1	; 0x01
     abc:	82 81       	ldd	r24, Z+2	; 0x02
     abe:	93 81       	ldd	r25, Z+3	; 0x03
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	4f e7       	ldi	r20, 0x7F	; 127
     ac6:	53 e4       	ldi	r21, 0x43	; 67
     ac8:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
     acc:	18 16       	cp	r1, r24
     ace:	0c f0       	brlt	.+2      	; 0xad2 <lcd_init_4d+0x39c>
     ad0:	c0 c0       	rjmp	.+384    	; 0xc52 <lcd_init_4d+0x51c>
	{
		_delay_ms(__us / 1000.0);
     ad2:	fe 01       	movw	r30, r28
     ad4:	ed 54       	subi	r30, 0x4D	; 77
     ad6:	ff 4f       	sbci	r31, 0xFF	; 255
     ad8:	60 81       	ld	r22, Z
     ada:	71 81       	ldd	r23, Z+1	; 0x01
     adc:	82 81       	ldd	r24, Z+2	; 0x02
     ade:	93 81       	ldd	r25, Z+3	; 0x03
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	4a e7       	ldi	r20, 0x7A	; 122
     ae6:	54 e4       	ldi	r21, 0x44	; 68
     ae8:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	fe 01       	movw	r30, r28
     af2:	e6 55       	subi	r30, 0x56	; 86
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 83       	st	Z, r24
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	a2 83       	std	Z+2, r26	; 0x02
     afc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     afe:	8e 01       	movw	r16, r28
     b00:	0a 55       	subi	r16, 0x5A	; 90
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	fe 01       	movw	r30, r28
     b06:	e6 55       	subi	r30, 0x56	; 86
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	60 81       	ld	r22, Z
     b0c:	71 81       	ldd	r23, Z+1	; 0x01
     b0e:	82 81       	ldd	r24, Z+2	; 0x02
     b10:	93 81       	ldd	r25, Z+3	; 0x03
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	4a e7       	ldi	r20, 0x7A	; 122
     b18:	55 e4       	ldi	r21, 0x45	; 69
     b1a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	f8 01       	movw	r30, r16
     b24:	80 83       	st	Z, r24
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	a2 83       	std	Z+2, r26	; 0x02
     b2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b2c:	fe 01       	movw	r30, r28
     b2e:	ea 55       	subi	r30, 0x5A	; 90
     b30:	ff 4f       	sbci	r31, 0xFF	; 255
     b32:	60 81       	ld	r22, Z
     b34:	71 81       	ldd	r23, Z+1	; 0x01
     b36:	82 81       	ldd	r24, Z+2	; 0x02
     b38:	93 81       	ldd	r25, Z+3	; 0x03
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e8       	ldi	r20, 0x80	; 128
     b40:	5f e3       	ldi	r21, 0x3F	; 63
     b42:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     b46:	88 23       	and	r24, r24
     b48:	44 f4       	brge	.+16     	; 0xb5a <lcd_init_4d+0x424>
		__ticks = 1;
     b4a:	fe 01       	movw	r30, r28
     b4c:	ec 55       	subi	r30, 0x5C	; 92
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	91 83       	std	Z+1, r25	; 0x01
     b56:	80 83       	st	Z, r24
     b58:	64 c0       	rjmp	.+200    	; 0xc22 <lcd_init_4d+0x4ec>
	else if (__tmp > 65535)
     b5a:	fe 01       	movw	r30, r28
     b5c:	ea 55       	subi	r30, 0x5A	; 90
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	60 81       	ld	r22, Z
     b62:	71 81       	ldd	r23, Z+1	; 0x01
     b64:	82 81       	ldd	r24, Z+2	; 0x02
     b66:	93 81       	ldd	r25, Z+3	; 0x03
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	3f ef       	ldi	r19, 0xFF	; 255
     b6c:	4f e7       	ldi	r20, 0x7F	; 127
     b6e:	57 e4       	ldi	r21, 0x47	; 71
     b70:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
     b74:	18 16       	cp	r1, r24
     b76:	0c f0       	brlt	.+2      	; 0xb7a <lcd_init_4d+0x444>
     b78:	43 c0       	rjmp	.+134    	; 0xc00 <lcd_init_4d+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b7a:	fe 01       	movw	r30, r28
     b7c:	e6 55       	subi	r30, 0x56	; 86
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	60 81       	ld	r22, Z
     b82:	71 81       	ldd	r23, Z+1	; 0x01
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e2       	ldi	r20, 0x20	; 32
     b8e:	51 e4       	ldi	r21, 0x41	; 65
     b90:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	8e 01       	movw	r16, r28
     b9a:	0c 55       	subi	r16, 0x5C	; 92
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	bc 01       	movw	r22, r24
     ba0:	cd 01       	movw	r24, r26
     ba2:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	f8 01       	movw	r30, r16
     bac:	91 83       	std	Z+1, r25	; 0x01
     bae:	80 83       	st	Z, r24
     bb0:	1f c0       	rjmp	.+62     	; 0xbf0 <lcd_init_4d+0x4ba>
     bb2:	fe 01       	movw	r30, r28
     bb4:	ee 55       	subi	r30, 0x5E	; 94
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	80 e9       	ldi	r24, 0x90	; 144
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
     bc0:	fe 01       	movw	r30, r28
     bc2:	ee 55       	subi	r30, 0x5E	; 94
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <lcd_init_4d+0x494>
     bce:	fe 01       	movw	r30, r28
     bd0:	ee 55       	subi	r30, 0x5E	; 94
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	91 83       	std	Z+1, r25	; 0x01
     bd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd8:	de 01       	movw	r26, r28
     bda:	ac 55       	subi	r26, 0x5C	; 92
     bdc:	bf 4f       	sbci	r27, 0xFF	; 255
     bde:	fe 01       	movw	r30, r28
     be0:	ec 55       	subi	r30, 0x5C	; 92
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	11 96       	adiw	r26, 0x01	; 1
     bec:	9c 93       	st	X, r25
     bee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf0:	fe 01       	movw	r30, r28
     bf2:	ec 55       	subi	r30, 0x5C	; 92
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	80 81       	ld	r24, Z
     bf8:	91 81       	ldd	r25, Z+1	; 0x01
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	d1 f6       	brne	.-76     	; 0xbb2 <lcd_init_4d+0x47c>
     bfe:	4b c0       	rjmp	.+150    	; 0xc96 <lcd_init_4d+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c00:	8e 01       	movw	r16, r28
     c02:	0c 55       	subi	r16, 0x5C	; 92
     c04:	1f 4f       	sbci	r17, 0xFF	; 255
     c06:	fe 01       	movw	r30, r28
     c08:	ea 55       	subi	r30, 0x5A	; 90
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	f8 01       	movw	r30, r16
     c1e:	91 83       	std	Z+1, r25	; 0x01
     c20:	80 83       	st	Z, r24
     c22:	de 01       	movw	r26, r28
     c24:	a0 56       	subi	r26, 0x60	; 96
     c26:	bf 4f       	sbci	r27, 0xFF	; 255
     c28:	fe 01       	movw	r30, r28
     c2a:	ec 55       	subi	r30, 0x5C	; 92
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	9c 93       	st	X, r25
     c36:	8e 93       	st	-X, r24
     c38:	fe 01       	movw	r30, r28
     c3a:	e0 56       	subi	r30, 0x60	; 96
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <lcd_init_4d+0x50c>
     c46:	fe 01       	movw	r30, r28
     c48:	e0 56       	subi	r30, 0x60	; 96
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
     c50:	22 c0       	rjmp	.+68     	; 0xc96 <lcd_init_4d+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c52:	8e 01       	movw	r16, r28
     c54:	02 55       	subi	r16, 0x52	; 82
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	fe 01       	movw	r30, r28
     c5a:	e1 55       	subi	r30, 0x51	; 81
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	f8 01       	movw	r30, r16
     c70:	80 83       	st	Z, r24
     c72:	de 01       	movw	r26, r28
     c74:	a1 56       	subi	r26, 0x61	; 97
     c76:	bf 4f       	sbci	r27, 0xFF	; 255
     c78:	fe 01       	movw	r30, r28
     c7a:	e2 55       	subi	r30, 0x52	; 82
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	80 81       	ld	r24, Z
     c80:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c82:	fe 01       	movw	r30, r28
     c84:	e1 56       	subi	r30, 0x61	; 97
     c86:	ff 4f       	sbci	r31, 0xFF	; 255
     c88:	80 81       	ld	r24, Z
     c8a:	8a 95       	dec	r24
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <lcd_init_4d+0x554>
     c8e:	fe 01       	movw	r30, r28
     c90:	e1 56       	subi	r30, 0x61	; 97
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	80 83       	st	Z, r24
    _delay_us(200);                                 // 100uS delay (min)

    lcd_write_4(lcd_FunctionReset);                 // third part of reset sequence
     c96:	80 e3       	ldi	r24, 0x30	; 48
     c98:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
     c9c:	fe 01       	movw	r30, r28
     c9e:	e5 56       	subi	r30, 0x65	; 101
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	a8 e4       	ldi	r26, 0x48	; 72
     ca8:	b3 e4       	ldi	r27, 0x43	; 67
     caa:	80 83       	st	Z, r24
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	a2 83       	std	Z+2, r26	; 0x02
     cb0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cb2:	8e 01       	movw	r16, r28
     cb4:	09 56       	subi	r16, 0x69	; 105
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	fe 01       	movw	r30, r28
     cba:	e5 56       	subi	r30, 0x65	; 101
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	60 81       	ld	r22, Z
     cc0:	71 81       	ldd	r23, Z+1	; 0x01
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	93 81       	ldd	r25, Z+3	; 0x03
     cc6:	2b ea       	ldi	r18, 0xAB	; 171
     cc8:	3a ea       	ldi	r19, 0xAA	; 170
     cca:	4a ea       	ldi	r20, 0xAA	; 170
     ccc:	50 e4       	ldi	r21, 0x40	; 64
     cce:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 83       	st	Z, r24
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	a2 83       	std	Z+2, r26	; 0x02
     cde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ce0:	fe 01       	movw	r30, r28
     ce2:	e9 56       	subi	r30, 0x69	; 105
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e8       	ldi	r20, 0x80	; 128
     cf4:	5f e3       	ldi	r21, 0x3F	; 63
     cf6:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     cfa:	88 23       	and	r24, r24
     cfc:	34 f4       	brge	.+12     	; 0xd0a <lcd_init_4d+0x5d4>
		__ticks = 1;
     cfe:	fe 01       	movw	r30, r28
     d00:	ea 56       	subi	r30, 0x6A	; 106
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 83       	st	Z, r24
     d08:	e0 c0       	rjmp	.+448    	; 0xeca <lcd_init_4d+0x794>
	else if (__tmp > 255)
     d0a:	fe 01       	movw	r30, r28
     d0c:	e9 56       	subi	r30, 0x69	; 105
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	60 81       	ld	r22, Z
     d12:	71 81       	ldd	r23, Z+1	; 0x01
     d14:	82 81       	ldd	r24, Z+2	; 0x02
     d16:	93 81       	ldd	r25, Z+3	; 0x03
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	53 e4       	ldi	r21, 0x43	; 67
     d20:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	0c f0       	brlt	.+2      	; 0xd2a <lcd_init_4d+0x5f4>
     d28:	c0 c0       	rjmp	.+384    	; 0xeaa <lcd_init_4d+0x774>
	{
		_delay_ms(__us / 1000.0);
     d2a:	fe 01       	movw	r30, r28
     d2c:	e5 56       	subi	r30, 0x65	; 101
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	4a e7       	ldi	r20, 0x7A	; 122
     d3e:	54 e4       	ldi	r21, 0x44	; 68
     d40:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	fe 01       	movw	r30, r28
     d4a:	ee 56       	subi	r30, 0x6E	; 110
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 83       	st	Z, r24
     d50:	91 83       	std	Z+1, r25	; 0x01
     d52:	a2 83       	std	Z+2, r26	; 0x02
     d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d56:	8e 01       	movw	r16, r28
     d58:	02 57       	subi	r16, 0x72	; 114
     d5a:	1f 4f       	sbci	r17, 0xFF	; 255
     d5c:	fe 01       	movw	r30, r28
     d5e:	ee 56       	subi	r30, 0x6E	; 110
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	60 81       	ld	r22, Z
     d64:	71 81       	ldd	r23, Z+1	; 0x01
     d66:	82 81       	ldd	r24, Z+2	; 0x02
     d68:	93 81       	ldd	r25, Z+3	; 0x03
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	4a e7       	ldi	r20, 0x7A	; 122
     d70:	55 e4       	ldi	r21, 0x45	; 69
     d72:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	f8 01       	movw	r30, r16
     d7c:	80 83       	st	Z, r24
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	a2 83       	std	Z+2, r26	; 0x02
     d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d84:	fe 01       	movw	r30, r28
     d86:	e2 57       	subi	r30, 0x72	; 114
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e8       	ldi	r20, 0x80	; 128
     d98:	5f e3       	ldi	r21, 0x3F	; 63
     d9a:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     d9e:	88 23       	and	r24, r24
     da0:	44 f4       	brge	.+16     	; 0xdb2 <lcd_init_4d+0x67c>
		__ticks = 1;
     da2:	fe 01       	movw	r30, r28
     da4:	e4 57       	subi	r30, 0x74	; 116
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	80 83       	st	Z, r24
     db0:	64 c0       	rjmp	.+200    	; 0xe7a <lcd_init_4d+0x744>
	else if (__tmp > 65535)
     db2:	fe 01       	movw	r30, r28
     db4:	e2 57       	subi	r30, 0x72	; 114
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	82 81       	ldd	r24, Z+2	; 0x02
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	3f ef       	ldi	r19, 0xFF	; 255
     dc4:	4f e7       	ldi	r20, 0x7F	; 127
     dc6:	57 e4       	ldi	r21, 0x47	; 71
     dc8:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
     dcc:	18 16       	cp	r1, r24
     dce:	0c f0       	brlt	.+2      	; 0xdd2 <lcd_init_4d+0x69c>
     dd0:	43 c0       	rjmp	.+134    	; 0xe58 <lcd_init_4d+0x722>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	fe 01       	movw	r30, r28
     dd4:	ee 56       	subi	r30, 0x6E	; 110
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	60 81       	ld	r22, Z
     dda:	71 81       	ldd	r23, Z+1	; 0x01
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8e 01       	movw	r16, r28
     df2:	04 57       	subi	r16, 0x74	; 116
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	f8 01       	movw	r30, r16
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	1f c0       	rjmp	.+62     	; 0xe48 <lcd_init_4d+0x712>
     e0a:	fe 01       	movw	r30, r28
     e0c:	e6 57       	subi	r30, 0x76	; 118
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	80 e9       	ldi	r24, 0x90	; 144
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e18:	fe 01       	movw	r30, r28
     e1a:	e6 57       	subi	r30, 0x76	; 118
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	f1 f7       	brne	.-4      	; 0xe22 <lcd_init_4d+0x6ec>
     e26:	fe 01       	movw	r30, r28
     e28:	e6 57       	subi	r30, 0x76	; 118
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e30:	de 01       	movw	r26, r28
     e32:	a4 57       	subi	r26, 0x74	; 116
     e34:	bf 4f       	sbci	r27, 0xFF	; 255
     e36:	fe 01       	movw	r30, r28
     e38:	e4 57       	subi	r30, 0x74	; 116
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	11 96       	adiw	r26, 0x01	; 1
     e44:	9c 93       	st	X, r25
     e46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e48:	fe 01       	movw	r30, r28
     e4a:	e4 57       	subi	r30, 0x74	; 116
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 81       	ld	r24, Z
     e50:	91 81       	ldd	r25, Z+1	; 0x01
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	d1 f6       	brne	.-76     	; 0xe0a <lcd_init_4d+0x6d4>
     e56:	4b c0       	rjmp	.+150    	; 0xeee <lcd_init_4d+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e58:	8e 01       	movw	r16, r28
     e5a:	04 57       	subi	r16, 0x74	; 116
     e5c:	1f 4f       	sbci	r17, 0xFF	; 255
     e5e:	fe 01       	movw	r30, r28
     e60:	e2 57       	subi	r30, 0x72	; 114
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	f8 01       	movw	r30, r16
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
     e7a:	de 01       	movw	r26, r28
     e7c:	a8 57       	subi	r26, 0x78	; 120
     e7e:	bf 4f       	sbci	r27, 0xFF	; 255
     e80:	fe 01       	movw	r30, r28
     e82:	e4 57       	subi	r30, 0x74	; 116
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	11 96       	adiw	r26, 0x01	; 1
     e8c:	9c 93       	st	X, r25
     e8e:	8e 93       	st	-X, r24
     e90:	fe 01       	movw	r30, r28
     e92:	e8 57       	subi	r30, 0x78	; 120
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	80 81       	ld	r24, Z
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <lcd_init_4d+0x764>
     e9e:	fe 01       	movw	r30, r28
     ea0:	e8 57       	subi	r30, 0x78	; 120
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	91 83       	std	Z+1, r25	; 0x01
     ea6:	80 83       	st	Z, r24
     ea8:	22 c0       	rjmp	.+68     	; 0xeee <lcd_init_4d+0x7b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     eaa:	8e 01       	movw	r16, r28
     eac:	0a 56       	subi	r16, 0x6A	; 106
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	fe 01       	movw	r30, r28
     eb2:	e9 56       	subi	r30, 0x69	; 105
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	f8 01       	movw	r30, r16
     ec8:	80 83       	st	Z, r24
     eca:	de 01       	movw	r26, r28
     ecc:	a9 57       	subi	r26, 0x79	; 121
     ece:	bf 4f       	sbci	r27, 0xFF	; 255
     ed0:	fe 01       	movw	r30, r28
     ed2:	ea 56       	subi	r30, 0x6A	; 106
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 81       	ld	r24, Z
     ed8:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     eda:	fe 01       	movw	r30, r28
     edc:	e9 57       	subi	r30, 0x79	; 121
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	80 81       	ld	r24, Z
     ee2:	8a 95       	dec	r24
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <lcd_init_4d+0x7ac>
     ee6:	fe 01       	movw	r30, r28
     ee8:	e9 57       	subi	r30, 0x79	; 121
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 83       	st	Z, r24
// Preliminary Function Set instruction - used only to set the 4-bit mode.
// The number of lines or the font cannot be set at this time since the controller is still in the
//  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
//  of the upper four bits of the instruction.

    lcd_write_4(lcd_FunctionSet4bit);               // set 4-bit mode
     eee:	88 e2       	ldi	r24, 0x28	; 40
     ef0:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
     ef4:	fe 01       	movw	r30, r28
     ef6:	ed 57       	subi	r30, 0x7D	; 125
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	a0 ea       	ldi	r26, 0xA0	; 160
     f00:	b2 e4       	ldi	r27, 0x42	; 66
     f02:	80 83       	st	Z, r24
     f04:	91 83       	std	Z+1, r25	; 0x01
     f06:	a2 83       	std	Z+2, r26	; 0x02
     f08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f0a:	8e 01       	movw	r16, r28
     f0c:	01 58       	subi	r16, 0x81	; 129
     f0e:	1f 4f       	sbci	r17, 0xFF	; 255
     f10:	fe 01       	movw	r30, r28
     f12:	ed 57       	subi	r30, 0x7D	; 125
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	2b ea       	ldi	r18, 0xAB	; 171
     f20:	3a ea       	ldi	r19, 0xAA	; 170
     f22:	4a ea       	ldi	r20, 0xAA	; 170
     f24:	50 e4       	ldi	r21, 0x40	; 64
     f26:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	f8 01       	movw	r30, r16
     f30:	80 83       	st	Z, r24
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	a2 83       	std	Z+2, r26	; 0x02
     f36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f38:	fe 01       	movw	r30, r28
     f3a:	e1 58       	subi	r30, 0x81	; 129
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	5f e3       	ldi	r21, 0x3F	; 63
     f4e:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     f52:	88 23       	and	r24, r24
     f54:	34 f4       	brge	.+12     	; 0xf62 <lcd_init_4d+0x82c>
		__ticks = 1;
     f56:	fe 01       	movw	r30, r28
     f58:	e2 58       	subi	r30, 0x82	; 130
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 83       	st	Z, r24
     f60:	e0 c0       	rjmp	.+448    	; 0x1122 <lcd_init_4d+0x9ec>
	else if (__tmp > 255)
     f62:	fe 01       	movw	r30, r28
     f64:	e1 58       	subi	r30, 0x81	; 129
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	60 81       	ld	r22, Z
     f6a:	71 81       	ldd	r23, Z+1	; 0x01
     f6c:	82 81       	ldd	r24, Z+2	; 0x02
     f6e:	93 81       	ldd	r25, Z+3	; 0x03
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	53 e4       	ldi	r21, 0x43	; 67
     f78:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	0c f0       	brlt	.+2      	; 0xf82 <lcd_init_4d+0x84c>
     f80:	c0 c0       	rjmp	.+384    	; 0x1102 <lcd_init_4d+0x9cc>
	{
		_delay_ms(__us / 1000.0);
     f82:	fe 01       	movw	r30, r28
     f84:	ed 57       	subi	r30, 0x7D	; 125
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a e7       	ldi	r20, 0x7A	; 122
     f96:	54 e4       	ldi	r21, 0x44	; 68
     f98:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	fe 01       	movw	r30, r28
     fa2:	e6 58       	subi	r30, 0x86	; 134
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 83       	st	Z, r24
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	a2 83       	std	Z+2, r26	; 0x02
     fac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	8e 01       	movw	r16, r28
     fb0:	0a 58       	subi	r16, 0x8A	; 138
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	fe 01       	movw	r30, r28
     fb6:	e6 58       	subi	r30, 0x86	; 134
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	60 81       	ld	r22, Z
     fbc:	71 81       	ldd	r23, Z+1	; 0x01
     fbe:	82 81       	ldd	r24, Z+2	; 0x02
     fc0:	93 81       	ldd	r25, Z+3	; 0x03
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4a e7       	ldi	r20, 0x7A	; 122
     fc8:	55 e4       	ldi	r21, 0x45	; 69
     fca:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	f8 01       	movw	r30, r16
     fd4:	80 83       	st	Z, r24
     fd6:	91 83       	std	Z+1, r25	; 0x01
     fd8:	a2 83       	std	Z+2, r26	; 0x02
     fda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fdc:	fe 01       	movw	r30, r28
     fde:	ea 58       	subi	r30, 0x8A	; 138
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	82 81       	ldd	r24, Z+2	; 0x02
     fe8:	93 81       	ldd	r25, Z+3	; 0x03
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	44 f4       	brge	.+16     	; 0x100a <lcd_init_4d+0x8d4>
		__ticks = 1;
     ffa:	fe 01       	movw	r30, r28
     ffc:	ec 58       	subi	r30, 0x8C	; 140
     ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
    1008:	64 c0       	rjmp	.+200    	; 0x10d2 <lcd_init_4d+0x99c>
	else if (__tmp > 65535)
    100a:	fe 01       	movw	r30, r28
    100c:	ea 58       	subi	r30, 0x8A	; 138
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	3f ef       	ldi	r19, 0xFF	; 255
    101c:	4f e7       	ldi	r20, 0x7F	; 127
    101e:	57 e4       	ldi	r21, 0x47	; 71
    1020:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1024:	18 16       	cp	r1, r24
    1026:	0c f0       	brlt	.+2      	; 0x102a <lcd_init_4d+0x8f4>
    1028:	43 c0       	rjmp	.+134    	; 0x10b0 <lcd_init_4d+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	fe 01       	movw	r30, r28
    102c:	e6 58       	subi	r30, 0x86	; 134
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	60 81       	ld	r22, Z
    1032:	71 81       	ldd	r23, Z+1	; 0x01
    1034:	82 81       	ldd	r24, Z+2	; 0x02
    1036:	93 81       	ldd	r25, Z+3	; 0x03
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e2       	ldi	r20, 0x20	; 32
    103e:	51 e4       	ldi	r21, 0x41	; 65
    1040:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	8e 01       	movw	r16, r28
    104a:	0c 58       	subi	r16, 0x8C	; 140
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	f8 01       	movw	r30, r16
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
    1060:	1f c0       	rjmp	.+62     	; 0x10a0 <lcd_init_4d+0x96a>
    1062:	fe 01       	movw	r30, r28
    1064:	ee 58       	subi	r30, 0x8E	; 142
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 e9       	ldi	r24, 0x90	; 144
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1070:	fe 01       	movw	r30, r28
    1072:	ee 58       	subi	r30, 0x8E	; 142
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	80 81       	ld	r24, Z
    1078:	91 81       	ldd	r25, Z+1	; 0x01
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <lcd_init_4d+0x944>
    107e:	fe 01       	movw	r30, r28
    1080:	ee 58       	subi	r30, 0x8E	; 142
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	91 83       	std	Z+1, r25	; 0x01
    1086:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	de 01       	movw	r26, r28
    108a:	ac 58       	subi	r26, 0x8C	; 140
    108c:	bf 4f       	sbci	r27, 0xFF	; 255
    108e:	fe 01       	movw	r30, r28
    1090:	ec 58       	subi	r30, 0x8C	; 140
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	80 81       	ld	r24, Z
    1096:	91 81       	ldd	r25, Z+1	; 0x01
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	11 96       	adiw	r26, 0x01	; 1
    109c:	9c 93       	st	X, r25
    109e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	fe 01       	movw	r30, r28
    10a2:	ec 58       	subi	r30, 0x8C	; 140
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	d1 f6       	brne	.-76     	; 0x1062 <lcd_init_4d+0x92c>
    10ae:	4b c0       	rjmp	.+150    	; 0x1146 <lcd_init_4d+0xa10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b0:	8e 01       	movw	r16, r28
    10b2:	0c 58       	subi	r16, 0x8C	; 140
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	fe 01       	movw	r30, r28
    10b8:	ea 58       	subi	r30, 0x8A	; 138
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	f8 01       	movw	r30, r16
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
    10d2:	de 01       	movw	r26, r28
    10d4:	a0 59       	subi	r26, 0x90	; 144
    10d6:	bf 4f       	sbci	r27, 0xFF	; 255
    10d8:	fe 01       	movw	r30, r28
    10da:	ec 58       	subi	r30, 0x8C	; 140
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	9c 93       	st	X, r25
    10e6:	8e 93       	st	-X, r24
    10e8:	fe 01       	movw	r30, r28
    10ea:	e0 59       	subi	r30, 0x90	; 144
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <lcd_init_4d+0x9bc>
    10f6:	fe 01       	movw	r30, r28
    10f8:	e0 59       	subi	r30, 0x90	; 144
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
    1100:	22 c0       	rjmp	.+68     	; 0x1146 <lcd_init_4d+0xa10>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1102:	8e 01       	movw	r16, r28
    1104:	02 58       	subi	r16, 0x82	; 130
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	fe 01       	movw	r30, r28
    110a:	e1 58       	subi	r30, 0x81	; 129
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	f8 01       	movw	r30, r16
    1120:	80 83       	st	Z, r24
    1122:	de 01       	movw	r26, r28
    1124:	a1 59       	subi	r26, 0x91	; 145
    1126:	bf 4f       	sbci	r27, 0xFF	; 255
    1128:	fe 01       	movw	r30, r28
    112a:	e2 58       	subi	r30, 0x82	; 130
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	80 81       	ld	r24, Z
    1130:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1132:	fe 01       	movw	r30, r28
    1134:	e1 59       	subi	r30, 0x91	; 145
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	80 81       	ld	r24, Z
    113a:	8a 95       	dec	r24
    113c:	f1 f7       	brne	.-4      	; 0x113a <lcd_init_4d+0xa04>
    113e:	fe 01       	movw	r30, r28
    1140:	e1 59       	subi	r30, 0x91	; 145
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	80 83       	st	Z, r24
    _delay_us(80);                                  // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction_4d(lcd_FunctionSet4bit);   // set mode, lines, and font
    1146:	88 e2       	ldi	r24, 0x28	; 40
    1148:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
    114c:	fe 01       	movw	r30, r28
    114e:	e5 59       	subi	r30, 0x95	; 149
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 ea       	ldi	r26, 0xA0	; 160
    1158:	b2 e4       	ldi	r27, 0x42	; 66
    115a:	80 83       	st	Z, r24
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	a2 83       	std	Z+2, r26	; 0x02
    1160:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1162:	8e 01       	movw	r16, r28
    1164:	09 59       	subi	r16, 0x99	; 153
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	fe 01       	movw	r30, r28
    116a:	e5 59       	subi	r30, 0x95	; 149
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	60 81       	ld	r22, Z
    1170:	71 81       	ldd	r23, Z+1	; 0x01
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	2b ea       	ldi	r18, 0xAB	; 171
    1178:	3a ea       	ldi	r19, 0xAA	; 170
    117a:	4a ea       	ldi	r20, 0xAA	; 170
    117c:	50 e4       	ldi	r21, 0x40	; 64
    117e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	f8 01       	movw	r30, r16
    1188:	80 83       	st	Z, r24
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	a2 83       	std	Z+2, r26	; 0x02
    118e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1190:	fe 01       	movw	r30, r28
    1192:	e9 59       	subi	r30, 0x99	; 153
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	60 81       	ld	r22, Z
    1198:	71 81       	ldd	r23, Z+1	; 0x01
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e8       	ldi	r20, 0x80	; 128
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    11aa:	88 23       	and	r24, r24
    11ac:	34 f4       	brge	.+12     	; 0x11ba <lcd_init_4d+0xa84>
		__ticks = 1;
    11ae:	fe 01       	movw	r30, r28
    11b0:	ea 59       	subi	r30, 0x9A	; 154
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 83       	st	Z, r24
    11b8:	e0 c0       	rjmp	.+448    	; 0x137a <lcd_init_4d+0xc44>
	else if (__tmp > 255)
    11ba:	fe 01       	movw	r30, r28
    11bc:	e9 59       	subi	r30, 0x99	; 153
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	60 81       	ld	r22, Z
    11c2:	71 81       	ldd	r23, Z+1	; 0x01
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	4f e7       	ldi	r20, 0x7F	; 127
    11ce:	53 e4       	ldi	r21, 0x43	; 67
    11d0:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    11d4:	18 16       	cp	r1, r24
    11d6:	0c f0       	brlt	.+2      	; 0x11da <lcd_init_4d+0xaa4>
    11d8:	c0 c0       	rjmp	.+384    	; 0x135a <lcd_init_4d+0xc24>
	{
		_delay_ms(__us / 1000.0);
    11da:	fe 01       	movw	r30, r28
    11dc:	e5 59       	subi	r30, 0x95	; 149
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	4a e7       	ldi	r20, 0x7A	; 122
    11ee:	54 e4       	ldi	r21, 0x44	; 68
    11f0:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	fe 01       	movw	r30, r28
    11fa:	ee 59       	subi	r30, 0x9E	; 158
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 83       	st	Z, r24
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	a2 83       	std	Z+2, r26	; 0x02
    1204:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	8e 01       	movw	r16, r28
    1208:	02 5a       	subi	r16, 0xA2	; 162
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	fe 01       	movw	r30, r28
    120e:	ee 59       	subi	r30, 0x9E	; 158
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	60 81       	ld	r22, Z
    1214:	71 81       	ldd	r23, Z+1	; 0x01
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a e7       	ldi	r20, 0x7A	; 122
    1220:	55 e4       	ldi	r21, 0x45	; 69
    1222:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	f8 01       	movw	r30, r16
    122c:	80 83       	st	Z, r24
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	a2 83       	std	Z+2, r26	; 0x02
    1232:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1234:	fe 01       	movw	r30, r28
    1236:	e2 5a       	subi	r30, 0xA2	; 162
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e8       	ldi	r20, 0x80	; 128
    1248:	5f e3       	ldi	r21, 0x3F	; 63
    124a:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    124e:	88 23       	and	r24, r24
    1250:	44 f4       	brge	.+16     	; 0x1262 <lcd_init_4d+0xb2c>
		__ticks = 1;
    1252:	fe 01       	movw	r30, r28
    1254:	e4 5a       	subi	r30, 0xA4	; 164
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	80 83       	st	Z, r24
    1260:	64 c0       	rjmp	.+200    	; 0x132a <lcd_init_4d+0xbf4>
	else if (__tmp > 65535)
    1262:	fe 01       	movw	r30, r28
    1264:	e2 5a       	subi	r30, 0xA2	; 162
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	3f ef       	ldi	r19, 0xFF	; 255
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	57 e4       	ldi	r21, 0x47	; 71
    1278:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    127c:	18 16       	cp	r1, r24
    127e:	0c f0       	brlt	.+2      	; 0x1282 <lcd_init_4d+0xb4c>
    1280:	43 c0       	rjmp	.+134    	; 0x1308 <lcd_init_4d+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1282:	fe 01       	movw	r30, r28
    1284:	ee 59       	subi	r30, 0x9E	; 158
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	60 81       	ld	r22, Z
    128a:	71 81       	ldd	r23, Z+1	; 0x01
    128c:	82 81       	ldd	r24, Z+2	; 0x02
    128e:	93 81       	ldd	r25, Z+3	; 0x03
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	8e 01       	movw	r16, r28
    12a2:	04 5a       	subi	r16, 0xA4	; 164
    12a4:	1f 4f       	sbci	r17, 0xFF	; 255
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	f8 01       	movw	r30, r16
    12b4:	91 83       	std	Z+1, r25	; 0x01
    12b6:	80 83       	st	Z, r24
    12b8:	1f c0       	rjmp	.+62     	; 0x12f8 <lcd_init_4d+0xbc2>
    12ba:	fe 01       	movw	r30, r28
    12bc:	e6 5a       	subi	r30, 0xA6	; 166
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 e9       	ldi	r24, 0x90	; 144
    12c2:	91 e0       	ldi	r25, 0x01	; 1
    12c4:	91 83       	std	Z+1, r25	; 0x01
    12c6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12c8:	fe 01       	movw	r30, r28
    12ca:	e6 5a       	subi	r30, 0xA6	; 166
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <lcd_init_4d+0xb9c>
    12d6:	fe 01       	movw	r30, r28
    12d8:	e6 5a       	subi	r30, 0xA6	; 166
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e0:	de 01       	movw	r26, r28
    12e2:	a4 5a       	subi	r26, 0xA4	; 164
    12e4:	bf 4f       	sbci	r27, 0xFF	; 255
    12e6:	fe 01       	movw	r30, r28
    12e8:	e4 5a       	subi	r30, 0xA4	; 164
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	9c 93       	st	X, r25
    12f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f8:	fe 01       	movw	r30, r28
    12fa:	e4 5a       	subi	r30, 0xA4	; 164
    12fc:	ff 4f       	sbci	r31, 0xFF	; 255
    12fe:	80 81       	ld	r24, Z
    1300:	91 81       	ldd	r25, Z+1	; 0x01
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	d1 f6       	brne	.-76     	; 0x12ba <lcd_init_4d+0xb84>
    1306:	4b c0       	rjmp	.+150    	; 0x139e <lcd_init_4d+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1308:	8e 01       	movw	r16, r28
    130a:	04 5a       	subi	r16, 0xA4	; 164
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	fe 01       	movw	r30, r28
    1310:	e2 5a       	subi	r30, 0xA2	; 162
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	f8 01       	movw	r30, r16
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
    132a:	de 01       	movw	r26, r28
    132c:	a8 5a       	subi	r26, 0xA8	; 168
    132e:	bf 4f       	sbci	r27, 0xFF	; 255
    1330:	fe 01       	movw	r30, r28
    1332:	e4 5a       	subi	r30, 0xA4	; 164
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	9c 93       	st	X, r25
    133e:	8e 93       	st	-X, r24
    1340:	fe 01       	movw	r30, r28
    1342:	e8 5a       	subi	r30, 0xA8	; 168
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	80 81       	ld	r24, Z
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <lcd_init_4d+0xc14>
    134e:	fe 01       	movw	r30, r28
    1350:	e8 5a       	subi	r30, 0xA8	; 168
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
    1358:	22 c0       	rjmp	.+68     	; 0x139e <lcd_init_4d+0xc68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    135a:	8e 01       	movw	r16, r28
    135c:	0a 59       	subi	r16, 0x9A	; 154
    135e:	1f 4f       	sbci	r17, 0xFF	; 255
    1360:	fe 01       	movw	r30, r28
    1362:	e9 59       	subi	r30, 0x99	; 153
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	60 81       	ld	r22, Z
    1368:	71 81       	ldd	r23, Z+1	; 0x01
    136a:	82 81       	ldd	r24, Z+2	; 0x02
    136c:	93 81       	ldd	r25, Z+3	; 0x03
    136e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	f8 01       	movw	r30, r16
    1378:	80 83       	st	Z, r24
    137a:	de 01       	movw	r26, r28
    137c:	a9 5a       	subi	r26, 0xA9	; 169
    137e:	bf 4f       	sbci	r27, 0xFF	; 255
    1380:	fe 01       	movw	r30, r28
    1382:	ea 59       	subi	r30, 0x9A	; 154
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	80 81       	ld	r24, Z
    1388:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    138a:	fe 01       	movw	r30, r28
    138c:	e9 5a       	subi	r30, 0xA9	; 169
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	8a 95       	dec	r24
    1394:	f1 f7       	brne	.-4      	; 0x1392 <lcd_init_4d+0xc5c>
    1396:	fe 01       	movw	r30, r28
    1398:	e9 5a       	subi	r30, 0xA9	; 169
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	80 83       	st	Z, r24
// The next three instructions are specified in the data sheet as part of the initialization routine,
//  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
//  later if the application requires a different configuration.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOff);        // turn display OFF
    139e:	88 e0       	ldi	r24, 0x08	; 8
    13a0:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
    13a4:	fe 01       	movw	r30, r28
    13a6:	ed 5a       	subi	r30, 0xAD	; 173
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 ea       	ldi	r26, 0xA0	; 160
    13b0:	b2 e4       	ldi	r27, 0x42	; 66
    13b2:	80 83       	st	Z, r24
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	a2 83       	std	Z+2, r26	; 0x02
    13b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13ba:	8e 01       	movw	r16, r28
    13bc:	01 5b       	subi	r16, 0xB1	; 177
    13be:	1f 4f       	sbci	r17, 0xFF	; 255
    13c0:	fe 01       	movw	r30, r28
    13c2:	ed 5a       	subi	r30, 0xAD	; 173
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	2b ea       	ldi	r18, 0xAB	; 171
    13d0:	3a ea       	ldi	r19, 0xAA	; 170
    13d2:	4a ea       	ldi	r20, 0xAA	; 170
    13d4:	50 e4       	ldi	r21, 0x40	; 64
    13d6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	f8 01       	movw	r30, r16
    13e0:	80 83       	st	Z, r24
    13e2:	91 83       	std	Z+1, r25	; 0x01
    13e4:	a2 83       	std	Z+2, r26	; 0x02
    13e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13e8:	fe 01       	movw	r30, r28
    13ea:	e1 5b       	subi	r30, 0xB1	; 177
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	60 81       	ld	r22, Z
    13f0:	71 81       	ldd	r23, Z+1	; 0x01
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	40 e8       	ldi	r20, 0x80	; 128
    13fc:	5f e3       	ldi	r21, 0x3F	; 63
    13fe:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1402:	88 23       	and	r24, r24
    1404:	34 f4       	brge	.+12     	; 0x1412 <lcd_init_4d+0xcdc>
		__ticks = 1;
    1406:	fe 01       	movw	r30, r28
    1408:	e2 5b       	subi	r30, 0xB2	; 178
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	80 83       	st	Z, r24
    1410:	e0 c0       	rjmp	.+448    	; 0x15d2 <lcd_init_4d+0xe9c>
	else if (__tmp > 255)
    1412:	fe 01       	movw	r30, r28
    1414:	e1 5b       	subi	r30, 0xB1	; 177
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	4f e7       	ldi	r20, 0x7F	; 127
    1426:	53 e4       	ldi	r21, 0x43	; 67
    1428:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    142c:	18 16       	cp	r1, r24
    142e:	0c f0       	brlt	.+2      	; 0x1432 <lcd_init_4d+0xcfc>
    1430:	c0 c0       	rjmp	.+384    	; 0x15b2 <lcd_init_4d+0xe7c>
	{
		_delay_ms(__us / 1000.0);
    1432:	fe 01       	movw	r30, r28
    1434:	ed 5a       	subi	r30, 0xAD	; 173
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	60 81       	ld	r22, Z
    143a:	71 81       	ldd	r23, Z+1	; 0x01
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	4a e7       	ldi	r20, 0x7A	; 122
    1446:	54 e4       	ldi	r21, 0x44	; 68
    1448:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	fe 01       	movw	r30, r28
    1452:	e6 5b       	subi	r30, 0xB6	; 182
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 83       	st	Z, r24
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	a2 83       	std	Z+2, r26	; 0x02
    145c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145e:	8e 01       	movw	r16, r28
    1460:	0a 5b       	subi	r16, 0xBA	; 186
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
    1464:	fe 01       	movw	r30, r28
    1466:	e6 5b       	subi	r30, 0xB6	; 182
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a e7       	ldi	r20, 0x7A	; 122
    1478:	55 e4       	ldi	r21, 0x45	; 69
    147a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	f8 01       	movw	r30, r16
    1484:	80 83       	st	Z, r24
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	a2 83       	std	Z+2, r26	; 0x02
    148a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    148c:	fe 01       	movw	r30, r28
    148e:	ea 5b       	subi	r30, 0xBA	; 186
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	44 f4       	brge	.+16     	; 0x14ba <lcd_init_4d+0xd84>
		__ticks = 1;
    14aa:	fe 01       	movw	r30, r28
    14ac:	ec 5b       	subi	r30, 0xBC	; 188
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	91 83       	std	Z+1, r25	; 0x01
    14b6:	80 83       	st	Z, r24
    14b8:	64 c0       	rjmp	.+200    	; 0x1582 <lcd_init_4d+0xe4c>
	else if (__tmp > 65535)
    14ba:	fe 01       	movw	r30, r28
    14bc:	ea 5b       	subi	r30, 0xBA	; 186
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	60 81       	ld	r22, Z
    14c2:	71 81       	ldd	r23, Z+1	; 0x01
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	4f e7       	ldi	r20, 0x7F	; 127
    14ce:	57 e4       	ldi	r21, 0x47	; 71
    14d0:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	0c f0       	brlt	.+2      	; 0x14da <lcd_init_4d+0xda4>
    14d8:	43 c0       	rjmp	.+134    	; 0x1560 <lcd_init_4d+0xe2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	fe 01       	movw	r30, r28
    14dc:	e6 5b       	subi	r30, 0xB6	; 182
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	51 e4       	ldi	r21, 0x41	; 65
    14f0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8e 01       	movw	r16, r28
    14fa:	0c 5b       	subi	r16, 0xBC	; 188
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	f8 01       	movw	r30, r16
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	80 83       	st	Z, r24
    1510:	1f c0       	rjmp	.+62     	; 0x1550 <lcd_init_4d+0xe1a>
    1512:	fe 01       	movw	r30, r28
    1514:	ee 5b       	subi	r30, 0xBE	; 190
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	80 e9       	ldi	r24, 0x90	; 144
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	91 83       	std	Z+1, r25	; 0x01
    151e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1520:	fe 01       	movw	r30, r28
    1522:	ee 5b       	subi	r30, 0xBE	; 190
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <lcd_init_4d+0xdf4>
    152e:	fe 01       	movw	r30, r28
    1530:	ee 5b       	subi	r30, 0xBE	; 190
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	de 01       	movw	r26, r28
    153a:	ac 5b       	subi	r26, 0xBC	; 188
    153c:	bf 4f       	sbci	r27, 0xFF	; 255
    153e:	fe 01       	movw	r30, r28
    1540:	ec 5b       	subi	r30, 0xBC	; 188
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	11 96       	adiw	r26, 0x01	; 1
    154c:	9c 93       	st	X, r25
    154e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1550:	fe 01       	movw	r30, r28
    1552:	ec 5b       	subi	r30, 0xBC	; 188
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	d1 f6       	brne	.-76     	; 0x1512 <lcd_init_4d+0xddc>
    155e:	42 c0       	rjmp	.+132    	; 0x15e4 <lcd_init_4d+0xeae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	8e 01       	movw	r16, r28
    1562:	0c 5b       	subi	r16, 0xBC	; 188
    1564:	1f 4f       	sbci	r17, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	ea 5b       	subi	r30, 0xBA	; 186
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	60 81       	ld	r22, Z
    156e:	71 81       	ldd	r23, Z+1	; 0x01
    1570:	82 81       	ldd	r24, Z+2	; 0x02
    1572:	93 81       	ldd	r25, Z+3	; 0x03
    1574:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	f8 01       	movw	r30, r16
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	80 83       	st	Z, r24
    1582:	de 01       	movw	r26, r28
    1584:	a0 5c       	subi	r26, 0xC0	; 192
    1586:	bf 4f       	sbci	r27, 0xFF	; 255
    1588:	fe 01       	movw	r30, r28
    158a:	ec 5b       	subi	r30, 0xBC	; 188
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	11 96       	adiw	r26, 0x01	; 1
    1594:	9c 93       	st	X, r25
    1596:	8e 93       	st	-X, r24
    1598:	fe 01       	movw	r30, r28
    159a:	e0 5c       	subi	r30, 0xC0	; 192
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 81       	ld	r24, Z
    15a0:	91 81       	ldd	r25, Z+1	; 0x01
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <lcd_init_4d+0xe6c>
    15a6:	fe 01       	movw	r30, r28
    15a8:	e0 5c       	subi	r30, 0xC0	; 192
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	80 83       	st	Z, r24
    15b0:	19 c0       	rjmp	.+50     	; 0x15e4 <lcd_init_4d+0xeae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15b2:	8e 01       	movw	r16, r28
    15b4:	02 5b       	subi	r16, 0xB2	; 178
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	fe 01       	movw	r30, r28
    15ba:	e1 5b       	subi	r30, 0xB1	; 177
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	f8 01       	movw	r30, r16
    15d0:	80 83       	st	Z, r24
    15d2:	fe 01       	movw	r30, r28
    15d4:	e2 5b       	subi	r30, 0xB2	; 178
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 81       	ld	r24, Z
    15da:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    15de:	8a 95       	dec	r24
    15e0:	f1 f7       	brne	.-4      	; 0x15de <lcd_init_4d+0xea8>
    15e2:	8f af       	std	Y+63, r24	; 0x3f
    _delay_us(80);                                  // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction_4d(lcd_Clear);             // clear display RAM
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e8       	ldi	r26, 0x80	; 128
    15f0:	b0 e4       	ldi	r27, 0x40	; 64
    15f2:	8b af       	std	Y+59, r24	; 0x3b
    15f4:	9c af       	std	Y+60, r25	; 0x3c
    15f6:	ad af       	std	Y+61, r26	; 0x3d
    15f8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	6b ad       	ldd	r22, Y+59	; 0x3b
    15fc:	7c ad       	ldd	r23, Y+60	; 0x3c
    15fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1600:	9e ad       	ldd	r25, Y+62	; 0x3e
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	4a e7       	ldi	r20, 0x7A	; 122
    1608:	55 e4       	ldi	r21, 0x45	; 69
    160a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8f ab       	std	Y+55, r24	; 0x37
    1614:	98 af       	std	Y+56, r25	; 0x38
    1616:	a9 af       	std	Y+57, r26	; 0x39
    1618:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    161a:	6f a9       	ldd	r22, Y+55	; 0x37
    161c:	78 ad       	ldd	r23, Y+56	; 0x38
    161e:	89 ad       	ldd	r24, Y+57	; 0x39
    1620:	9a ad       	ldd	r25, Y+58	; 0x3a
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	5f e3       	ldi	r21, 0x3F	; 63
    162a:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    162e:	88 23       	and	r24, r24
    1630:	2c f4       	brge	.+10     	; 0x163c <lcd_init_4d+0xf06>
		__ticks = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9e ab       	std	Y+54, r25	; 0x36
    1638:	8d ab       	std	Y+53, r24	; 0x35
    163a:	3f c0       	rjmp	.+126    	; 0x16ba <lcd_init_4d+0xf84>
	else if (__tmp > 65535)
    163c:	6f a9       	ldd	r22, Y+55	; 0x37
    163e:	78 ad       	ldd	r23, Y+56	; 0x38
    1640:	89 ad       	ldd	r24, Y+57	; 0x39
    1642:	9a ad       	ldd	r25, Y+58	; 0x3a
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	3f ef       	ldi	r19, 0xFF	; 255
    1648:	4f e7       	ldi	r20, 0x7F	; 127
    164a:	57 e4       	ldi	r21, 0x47	; 71
    164c:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1650:	18 16       	cp	r1, r24
    1652:	4c f5       	brge	.+82     	; 0x16a6 <lcd_init_4d+0xf70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1654:	6b ad       	ldd	r22, Y+59	; 0x3b
    1656:	7c ad       	ldd	r23, Y+60	; 0x3c
    1658:	8d ad       	ldd	r24, Y+61	; 0x3d
    165a:	9e ad       	ldd	r25, Y+62	; 0x3e
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e2       	ldi	r20, 0x20	; 32
    1662:	51 e4       	ldi	r21, 0x41	; 65
    1664:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9e ab       	std	Y+54, r25	; 0x36
    167a:	8d ab       	std	Y+53, r24	; 0x35
    167c:	0f c0       	rjmp	.+30     	; 0x169c <lcd_init_4d+0xf66>
    167e:	80 e9       	ldi	r24, 0x90	; 144
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	9c ab       	std	Y+52, r25	; 0x34
    1684:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1686:	8b a9       	ldd	r24, Y+51	; 0x33
    1688:	9c a9       	ldd	r25, Y+52	; 0x34
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <lcd_init_4d+0xf54>
    168e:	9c ab       	std	Y+52, r25	; 0x34
    1690:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1692:	8d a9       	ldd	r24, Y+53	; 0x35
    1694:	9e a9       	ldd	r25, Y+54	; 0x36
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	9e ab       	std	Y+54, r25	; 0x36
    169a:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169c:	8d a9       	ldd	r24, Y+53	; 0x35
    169e:	9e a9       	ldd	r25, Y+54	; 0x36
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	69 f7       	brne	.-38     	; 0x167e <lcd_init_4d+0xf48>
    16a4:	14 c0       	rjmp	.+40     	; 0x16ce <lcd_init_4d+0xf98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a6:	6f a9       	ldd	r22, Y+55	; 0x37
    16a8:	78 ad       	ldd	r23, Y+56	; 0x38
    16aa:	89 ad       	ldd	r24, Y+57	; 0x39
    16ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    16ae:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9e ab       	std	Y+54, r25	; 0x36
    16b8:	8d ab       	std	Y+53, r24	; 0x35
    16ba:	8d a9       	ldd	r24, Y+53	; 0x35
    16bc:	9e a9       	ldd	r25, Y+54	; 0x36
    16be:	9a ab       	std	Y+50, r25	; 0x32
    16c0:	89 ab       	std	Y+49, r24	; 0x31
    16c2:	89 a9       	ldd	r24, Y+49	; 0x31
    16c4:	9a a9       	ldd	r25, Y+50	; 0x32
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <lcd_init_4d+0xf90>
    16ca:	9a ab       	std	Y+50, r25	; 0x32
    16cc:	89 ab       	std	Y+49, r24	; 0x31
    _delay_ms(4);                                   // 1.64 mS delay (min)

// ; Entry Mode Set instruction
    lcd_write_instruction_4d(lcd_EntryMode);         // set desired shift characteristics
    16ce:	86 e0       	ldi	r24, 0x06	; 6
    16d0:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 ea       	ldi	r26, 0xA0	; 160
    16da:	b2 e4       	ldi	r27, 0x42	; 66
    16dc:	8d a7       	std	Y+45, r24	; 0x2d
    16de:	9e a7       	std	Y+46, r25	; 0x2e
    16e0:	af a7       	std	Y+47, r26	; 0x2f
    16e2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    16e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    16e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ea:	98 a9       	ldd	r25, Y+48	; 0x30
    16ec:	2b ea       	ldi	r18, 0xAB	; 171
    16ee:	3a ea       	ldi	r19, 0xAA	; 170
    16f0:	4a ea       	ldi	r20, 0xAA	; 170
    16f2:	50 e4       	ldi	r21, 0x40	; 64
    16f4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	89 a7       	std	Y+41, r24	; 0x29
    16fe:	9a a7       	std	Y+42, r25	; 0x2a
    1700:	ab a7       	std	Y+43, r26	; 0x2b
    1702:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1704:	69 a5       	ldd	r22, Y+41	; 0x29
    1706:	7a a5       	ldd	r23, Y+42	; 0x2a
    1708:	8b a5       	ldd	r24, Y+43	; 0x2b
    170a:	9c a5       	ldd	r25, Y+44	; 0x2c
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	1c f4       	brge	.+6      	; 0x1722 <lcd_init_4d+0xfec>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	88 a7       	std	Y+40, r24	; 0x28
    1720:	91 c0       	rjmp	.+290    	; 0x1844 <lcd_init_4d+0x110e>
	else if (__tmp > 255)
    1722:	69 a5       	ldd	r22, Y+41	; 0x29
    1724:	7a a5       	ldd	r23, Y+42	; 0x2a
    1726:	8b a5       	ldd	r24, Y+43	; 0x2b
    1728:	9c a5       	ldd	r25, Y+44	; 0x2c
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	53 e4       	ldi	r21, 0x43	; 67
    1732:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	0c f0       	brlt	.+2      	; 0x173c <lcd_init_4d+0x1006>
    173a:	7b c0       	rjmp	.+246    	; 0x1832 <lcd_init_4d+0x10fc>
	{
		_delay_ms(__us / 1000.0);
    173c:	6d a5       	ldd	r22, Y+45	; 0x2d
    173e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1740:	8f a5       	ldd	r24, Y+47	; 0x2f
    1742:	98 a9       	ldd	r25, Y+48	; 0x30
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	4a e7       	ldi	r20, 0x7A	; 122
    174a:	54 e4       	ldi	r21, 0x44	; 68
    174c:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8c a3       	std	Y+36, r24	; 0x24
    1756:	9d a3       	std	Y+37, r25	; 0x25
    1758:	ae a3       	std	Y+38, r26	; 0x26
    175a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175c:	6c a1       	ldd	r22, Y+36	; 0x24
    175e:	7d a1       	ldd	r23, Y+37	; 0x25
    1760:	8e a1       	ldd	r24, Y+38	; 0x26
    1762:	9f a1       	ldd	r25, Y+39	; 0x27
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4a e7       	ldi	r20, 0x7A	; 122
    176a:	55 e4       	ldi	r21, 0x45	; 69
    176c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	88 a3       	std	Y+32, r24	; 0x20
    1776:	99 a3       	std	Y+33, r25	; 0x21
    1778:	aa a3       	std	Y+34, r26	; 0x22
    177a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    177c:	68 a1       	ldd	r22, Y+32	; 0x20
    177e:	79 a1       	ldd	r23, Y+33	; 0x21
    1780:	8a a1       	ldd	r24, Y+34	; 0x22
    1782:	9b a1       	ldd	r25, Y+35	; 0x23
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e8       	ldi	r20, 0x80	; 128
    178a:	5f e3       	ldi	r21, 0x3F	; 63
    178c:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1790:	88 23       	and	r24, r24
    1792:	2c f4       	brge	.+10     	; 0x179e <lcd_init_4d+0x1068>
		__ticks = 1;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9f 8f       	std	Y+31, r25	; 0x1f
    179a:	8e 8f       	std	Y+30, r24	; 0x1e
    179c:	3f c0       	rjmp	.+126    	; 0x181c <lcd_init_4d+0x10e6>
	else if (__tmp > 65535)
    179e:	68 a1       	ldd	r22, Y+32	; 0x20
    17a0:	79 a1       	ldd	r23, Y+33	; 0x21
    17a2:	8a a1       	ldd	r24, Y+34	; 0x22
    17a4:	9b a1       	ldd	r25, Y+35	; 0x23
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	3f ef       	ldi	r19, 0xFF	; 255
    17aa:	4f e7       	ldi	r20, 0x7F	; 127
    17ac:	57 e4       	ldi	r21, 0x47	; 71
    17ae:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    17b2:	18 16       	cp	r1, r24
    17b4:	4c f5       	brge	.+82     	; 0x1808 <lcd_init_4d+0x10d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b6:	6c a1       	ldd	r22, Y+36	; 0x24
    17b8:	7d a1       	ldd	r23, Y+37	; 0x25
    17ba:	8e a1       	ldd	r24, Y+38	; 0x26
    17bc:	9f a1       	ldd	r25, Y+39	; 0x27
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e2       	ldi	r20, 0x20	; 32
    17c4:	51 e4       	ldi	r21, 0x41	; 65
    17c6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9f 8f       	std	Y+31, r25	; 0x1f
    17dc:	8e 8f       	std	Y+30, r24	; 0x1e
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <lcd_init_4d+0x10c8>
    17e0:	80 e9       	ldi	r24, 0x90	; 144
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	9d 8f       	std	Y+29, r25	; 0x1d
    17e6:	8c 8f       	std	Y+28, r24	; 0x1c
    17e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <lcd_init_4d+0x10b6>
    17f0:	9d 8f       	std	Y+29, r25	; 0x1d
    17f2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	9f 8f       	std	Y+31, r25	; 0x1f
    17fc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1800:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	69 f7       	brne	.-38     	; 0x17e0 <lcd_init_4d+0x10aa>
    1806:	24 c0       	rjmp	.+72     	; 0x1850 <lcd_init_4d+0x111a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1808:	68 a1       	ldd	r22, Y+32	; 0x20
    180a:	79 a1       	ldd	r23, Y+33	; 0x21
    180c:	8a a1       	ldd	r24, Y+34	; 0x22
    180e:	9b a1       	ldd	r25, Y+35	; 0x23
    1810:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9f 8f       	std	Y+31, r25	; 0x1f
    181a:	8e 8f       	std	Y+30, r24	; 0x1e
    181c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    181e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1820:	9b 8f       	std	Y+27, r25	; 0x1b
    1822:	8a 8f       	std	Y+26, r24	; 0x1a
    1824:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1826:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <lcd_init_4d+0x10f2>
    182c:	9b 8f       	std	Y+27, r25	; 0x1b
    182e:	8a 8f       	std	Y+26, r24	; 0x1a
    1830:	0f c0       	rjmp	.+30     	; 0x1850 <lcd_init_4d+0x111a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1832:	69 a5       	ldd	r22, Y+41	; 0x29
    1834:	7a a5       	ldd	r23, Y+42	; 0x2a
    1836:	8b a5       	ldd	r24, Y+43	; 0x2b
    1838:	9c a5       	ldd	r25, Y+44	; 0x2c
    183a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	88 a7       	std	Y+40, r24	; 0x28
    1844:	88 a5       	ldd	r24, Y+40	; 0x28
    1846:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1848:	89 8d       	ldd	r24, Y+25	; 0x19
    184a:	8a 95       	dec	r24
    184c:	f1 f7       	brne	.-4      	; 0x184a <lcd_init_4d+0x1114>
    184e:	89 8f       	std	Y+25, r24	; 0x19

// This is the end of the LCD controller initialization as specified in the data sheet, but the display
//  has been left in the OFF condition.  This is a good time to turn the display back ON.

// Display On/Off Control instruction
    lcd_write_instruction_4d(lcd_DisplayOn);         // turn the display ON
    1850:	8c e0       	ldi	r24, 0x0C	; 12
    1852:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 ea       	ldi	r26, 0xA0	; 160
    185c:	b2 e4       	ldi	r27, 0x42	; 66
    185e:	8d 8b       	std	Y+21, r24	; 0x15
    1860:	9e 8b       	std	Y+22, r25	; 0x16
    1862:	af 8b       	std	Y+23, r26	; 0x17
    1864:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1866:	6d 89       	ldd	r22, Y+21	; 0x15
    1868:	7e 89       	ldd	r23, Y+22	; 0x16
    186a:	8f 89       	ldd	r24, Y+23	; 0x17
    186c:	98 8d       	ldd	r25, Y+24	; 0x18
    186e:	2b ea       	ldi	r18, 0xAB	; 171
    1870:	3a ea       	ldi	r19, 0xAA	; 170
    1872:	4a ea       	ldi	r20, 0xAA	; 170
    1874:	50 e4       	ldi	r21, 0x40	; 64
    1876:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	89 8b       	std	Y+17, r24	; 0x11
    1880:	9a 8b       	std	Y+18, r25	; 0x12
    1882:	ab 8b       	std	Y+19, r26	; 0x13
    1884:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1886:	69 89       	ldd	r22, Y+17	; 0x11
    1888:	7a 89       	ldd	r23, Y+18	; 0x12
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e8       	ldi	r20, 0x80	; 128
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    189a:	88 23       	and	r24, r24
    189c:	1c f4       	brge	.+6      	; 0x18a4 <lcd_init_4d+0x116e>
		__ticks = 1;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	88 8b       	std	Y+16, r24	; 0x10
    18a2:	91 c0       	rjmp	.+290    	; 0x19c6 <lcd_init_4d+0x1290>
	else if (__tmp > 255)
    18a4:	69 89       	ldd	r22, Y+17	; 0x11
    18a6:	7a 89       	ldd	r23, Y+18	; 0x12
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	53 e4       	ldi	r21, 0x43	; 67
    18b4:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	0c f0       	brlt	.+2      	; 0x18be <lcd_init_4d+0x1188>
    18bc:	7b c0       	rjmp	.+246    	; 0x19b4 <lcd_init_4d+0x127e>
	{
		_delay_ms(__us / 1000.0);
    18be:	6d 89       	ldd	r22, Y+21	; 0x15
    18c0:	7e 89       	ldd	r23, Y+22	; 0x16
    18c2:	8f 89       	ldd	r24, Y+23	; 0x17
    18c4:	98 8d       	ldd	r25, Y+24	; 0x18
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a e7       	ldi	r20, 0x7A	; 122
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8c 87       	std	Y+12, r24	; 0x0c
    18d8:	9d 87       	std	Y+13, r25	; 0x0d
    18da:	ae 87       	std	Y+14, r26	; 0x0e
    18dc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18de:	6c 85       	ldd	r22, Y+12	; 0x0c
    18e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    18e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    18e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a e7       	ldi	r20, 0x7A	; 122
    18ec:	55 e4       	ldi	r21, 0x45	; 69
    18ee:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	88 87       	std	Y+8, r24	; 0x08
    18f8:	99 87       	std	Y+9, r25	; 0x09
    18fa:	aa 87       	std	Y+10, r26	; 0x0a
    18fc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    18fe:	68 85       	ldd	r22, Y+8	; 0x08
    1900:	79 85       	ldd	r23, Y+9	; 0x09
    1902:	8a 85       	ldd	r24, Y+10	; 0x0a
    1904:	9b 85       	ldd	r25, Y+11	; 0x0b
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	2c f4       	brge	.+10     	; 0x1920 <lcd_init_4d+0x11ea>
		__ticks = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9f 83       	std	Y+7, r25	; 0x07
    191c:	8e 83       	std	Y+6, r24	; 0x06
    191e:	3f c0       	rjmp	.+126    	; 0x199e <lcd_init_4d+0x1268>
	else if (__tmp > 65535)
    1920:	68 85       	ldd	r22, Y+8	; 0x08
    1922:	79 85       	ldd	r23, Y+9	; 0x09
    1924:	8a 85       	ldd	r24, Y+10	; 0x0a
    1926:	9b 85       	ldd	r25, Y+11	; 0x0b
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	4f e7       	ldi	r20, 0x7F	; 127
    192e:	57 e4       	ldi	r21, 0x47	; 71
    1930:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1934:	18 16       	cp	r1, r24
    1936:	4c f5       	brge	.+82     	; 0x198a <lcd_init_4d+0x1254>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1938:	6c 85       	ldd	r22, Y+12	; 0x0c
    193a:	7d 85       	ldd	r23, Y+13	; 0x0d
    193c:	8e 85       	ldd	r24, Y+14	; 0x0e
    193e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	bc 01       	movw	r22, r24
    1952:	cd 01       	movw	r24, r26
    1954:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	9f 83       	std	Y+7, r25	; 0x07
    195e:	8e 83       	std	Y+6, r24	; 0x06
    1960:	0f c0       	rjmp	.+30     	; 0x1980 <lcd_init_4d+0x124a>
    1962:	80 e9       	ldi	r24, 0x90	; 144
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	9d 83       	std	Y+5, r25	; 0x05
    1968:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <lcd_init_4d+0x1238>
    1972:	9d 83       	std	Y+5, r25	; 0x05
    1974:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1976:	8e 81       	ldd	r24, Y+6	; 0x06
    1978:	9f 81       	ldd	r25, Y+7	; 0x07
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	9f 83       	std	Y+7, r25	; 0x07
    197e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f7       	brne	.-38     	; 0x1962 <lcd_init_4d+0x122c>
    1988:	24 c0       	rjmp	.+72     	; 0x19d2 <lcd_init_4d+0x129c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198a:	68 85       	ldd	r22, Y+8	; 0x08
    198c:	79 85       	ldd	r23, Y+9	; 0x09
    198e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1990:	9b 85       	ldd	r25, Y+11	; 0x0b
    1992:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9f 83       	std	Y+7, r25	; 0x07
    199c:	8e 83       	std	Y+6, r24	; 0x06
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	9f 81       	ldd	r25, Y+7	; 0x07
    19a2:	9b 83       	std	Y+3, r25	; 0x03
    19a4:	8a 83       	std	Y+2, r24	; 0x02
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	9b 81       	ldd	r25, Y+3	; 0x03
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <lcd_init_4d+0x1274>
    19ae:	9b 83       	std	Y+3, r25	; 0x03
    19b0:	8a 83       	std	Y+2, r24	; 0x02
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <lcd_init_4d+0x129c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19b4:	69 89       	ldd	r22, Y+17	; 0x11
    19b6:	7a 89       	ldd	r23, Y+18	; 0x12
    19b8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ba:	9c 89       	ldd	r25, Y+20	; 0x14
    19bc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	88 8b       	std	Y+16, r24	; 0x10
    19c6:	88 89       	ldd	r24, Y+16	; 0x10
    19c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	8a 95       	dec	r24
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <lcd_init_4d+0x1296>
    19d0:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(80);                                  // 40uS delay (min)
}
    19d2:	ce 52       	subi	r28, 0x2E	; 46
    19d4:	df 4f       	sbci	r29, 0xFF	; 255
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <lcd_write_string_4d>:
  Entry:    (theString) is the string to be displayed
  Exit:     no parameters
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(const char *msg)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	6c 97       	sbiw	r28, 0x1c	; 28
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
    19fe:	9c 8f       	std	Y+28, r25	; 0x1c
    1a00:	8b 8f       	std	Y+27, r24	; 0x1b
    volatile int i = 0;                             // character counter*/
    1a02:	1a 8e       	std	Y+26, r1	; 0x1a
    1a04:	19 8e       	std	Y+25, r1	; 0x19
    1a06:	c8 c0       	rjmp	.+400    	; 0x1b98 <lcd_write_string_4d+0x1ae>
    while (*msg!='\0')
    {
        lcd_write_character_4d(*msg);
    1a08:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a0a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a0c:	80 81       	ld	r24, Z
    1a0e:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <lcd_write_character_4d>
        msg++;
    1a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	9c 8f       	std	Y+28, r25	; 0x1c
    1a1a:	8b 8f       	std	Y+27, r24	; 0x1b
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 ea       	ldi	r26, 0xA0	; 160
    1a22:	b2 e4       	ldi	r27, 0x42	; 66
    1a24:	8d 8b       	std	Y+21, r24	; 0x15
    1a26:	9e 8b       	std	Y+22, r25	; 0x16
    1a28:	af 8b       	std	Y+23, r26	; 0x17
    1a2a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a30:	8f 89       	ldd	r24, Y+23	; 0x17
    1a32:	98 8d       	ldd	r25, Y+24	; 0x18
    1a34:	2b ea       	ldi	r18, 0xAB	; 171
    1a36:	3a ea       	ldi	r19, 0xAA	; 170
    1a38:	4a ea       	ldi	r20, 0xAA	; 170
    1a3a:	50 e4       	ldi	r21, 0x40	; 64
    1a3c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	89 8b       	std	Y+17, r24	; 0x11
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	ab 8b       	std	Y+19, r26	; 0x13
    1a4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a4c:	69 89       	ldd	r22, Y+17	; 0x11
    1a4e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	1c f4       	brge	.+6      	; 0x1a6a <lcd_write_string_4d+0x80>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	88 8b       	std	Y+16, r24	; 0x10
    1a68:	91 c0       	rjmp	.+290    	; 0x1b8c <lcd_write_string_4d+0x1a2>
	else if (__tmp > 255)
    1a6a:	69 89       	ldd	r22, Y+17	; 0x11
    1a6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	53 e4       	ldi	r21, 0x43	; 67
    1a7a:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	0c f0       	brlt	.+2      	; 0x1a84 <lcd_write_string_4d+0x9a>
    1a82:	7b c0       	rjmp	.+246    	; 0x1b7a <lcd_write_string_4d+0x190>
	{
		_delay_ms(__us / 1000.0);
    1a84:	6d 89       	ldd	r22, Y+21	; 0x15
    1a86:	7e 89       	ldd	r23, Y+22	; 0x16
    1a88:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a e7       	ldi	r20, 0x7A	; 122
    1a92:	54 e4       	ldi	r21, 0x44	; 68
    1a94:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8c 87       	std	Y+12, r24	; 0x0c
    1a9e:	9d 87       	std	Y+13, r25	; 0x0d
    1aa0:	ae 87       	std	Y+14, r26	; 0x0e
    1aa2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1aa6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1aa8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aaa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a e7       	ldi	r20, 0x7A	; 122
    1ab2:	55 e4       	ldi	r21, 0x45	; 69
    1ab4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	88 87       	std	Y+8, r24	; 0x08
    1abe:	99 87       	std	Y+9, r25	; 0x09
    1ac0:	aa 87       	std	Y+10, r26	; 0x0a
    1ac2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ac4:	68 85       	ldd	r22, Y+8	; 0x08
    1ac6:	79 85       	ldd	r23, Y+9	; 0x09
    1ac8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <lcd_write_string_4d+0xfc>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9f 83       	std	Y+7, r25	; 0x07
    1ae2:	8e 83       	std	Y+6, r24	; 0x06
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <lcd_write_string_4d+0x17a>
	else if (__tmp > 65535)
    1ae6:	68 85       	ldd	r22, Y+8	; 0x08
    1ae8:	79 85       	ldd	r23, Y+9	; 0x09
    1aea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <lcd_write_string_4d+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b00:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9f 83       	std	Y+7, r25	; 0x07
    1b24:	8e 83       	std	Y+6, r24	; 0x06
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <lcd_write_string_4d+0x15c>
    1b28:	80 e9       	ldi	r24, 0x90	; 144
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	9d 83       	std	Y+5, r25	; 0x05
    1b2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	9d 81       	ldd	r25, Y+5	; 0x05
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <lcd_write_string_4d+0x14a>
    1b38:	9d 83       	std	Y+5, r25	; 0x05
    1b3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9f 83       	std	Y+7, r25	; 0x07
    1b44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8e 81       	ldd	r24, Y+6	; 0x06
    1b48:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <lcd_write_string_4d+0x13e>
    1b4e:	24 c0       	rjmp	.+72     	; 0x1b98 <lcd_write_string_4d+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	68 85       	ldd	r22, Y+8	; 0x08
    1b52:	79 85       	ldd	r23, Y+9	; 0x09
    1b54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b58:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9f 83       	std	Y+7, r25	; 0x07
    1b62:	8e 83       	std	Y+6, r24	; 0x06
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <lcd_write_string_4d+0x186>
    1b74:	9b 83       	std	Y+3, r25	; 0x03
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <lcd_write_string_4d+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b7a:	69 89       	ldd	r22, Y+17	; 0x11
    1b7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	88 8b       	std	Y+16, r24	; 0x10
    1b8c:	88 89       	ldd	r24, Y+16	; 0x10
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	8a 95       	dec	r24
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <lcd_write_string_4d+0x1a8>
    1b96:	89 83       	std	Y+1, r24	; 0x01
  Notes:    uses time delays rather than checking the busy flag
*/
void lcd_write_string_4d(const char *msg)
{
    volatile int i = 0;                             // character counter*/
    while (*msg!='\0')
    1b98:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1b9a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1b9c:	80 81       	ld	r24, Z
    1b9e:	88 23       	and	r24, r24
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <lcd_write_string_4d+0x1ba>
    1ba2:	32 cf       	rjmp	.-412    	; 0x1a08 <lcd_write_string_4d+0x1e>
    {
        lcd_write_character_4d(*msg);
        msg++;
        _delay_us(80);                              // 40 uS delay (min)
    }
}
    1ba4:	6c 96       	adiw	r28, 0x1c	; 28
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <LCDWriteInt>:


void LCDWriteInt(int val,unsigned int field_length)
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	ed 97       	sbiw	r28, 0x3d	; 61
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	9b af       	std	Y+59, r25	; 0x3b
    1bcc:	8a af       	std	Y+58, r24	; 0x3a
    1bce:	7d af       	std	Y+61, r23	; 0x3d
    1bd0:	6c af       	std	Y+60, r22	; 0x3c


	char str[5]={0,0,0,0,0};
    1bd2:	85 e0       	ldi	r24, 0x05	; 5
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	f5 96       	adiw	r30, 0x35	; 53
    1bd8:	df 01       	movw	r26, r30
    1bda:	28 2f       	mov	r18, r24
    1bdc:	1d 92       	st	X+, r1
    1bde:	2a 95       	dec	r18
    1be0:	e9 f7       	brne	.-6      	; 0x1bdc <LCDWriteInt+0x26>
	int i=4,j=0;
    1be2:	84 e0       	ldi	r24, 0x04	; 4
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c ab       	std	Y+52, r25	; 0x34
    1be8:	8b ab       	std	Y+51, r24	; 0x33
    1bea:	1a aa       	std	Y+50, r1	; 0x32
    1bec:	19 aa       	std	Y+49, r1	; 0x31
    1bee:	1e c0       	rjmp	.+60     	; 0x1c2c <LCDWriteInt+0x76>
	while(val)
	{
	str[i]=val%10;
    1bf0:	eb a9       	ldd	r30, Y+51	; 0x33
    1bf2:	fc a9       	ldd	r31, Y+52	; 0x34
    1bf4:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bf6:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bf8:	2a e0       	ldi	r18, 0x0A	; 10
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	b9 01       	movw	r22, r18
    1bfe:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__divmodhi4>
    1c02:	28 2f       	mov	r18, r24
    1c04:	ce 01       	movw	r24, r28
    1c06:	c5 96       	adiw	r24, 0x35	; 53
    1c08:	e8 0f       	add	r30, r24
    1c0a:	f9 1f       	adc	r31, r25
    1c0c:	20 83       	st	Z, r18
	val=val/10;
    1c0e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c10:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c12:	2a e0       	ldi	r18, 0x0A	; 10
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	b9 01       	movw	r22, r18
    1c18:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__divmodhi4>
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9b af       	std	Y+59, r25	; 0x3b
    1c20:	8a af       	std	Y+58, r24	; 0x3a
	i--;
    1c22:	8b a9       	ldd	r24, Y+51	; 0x33
    1c24:	9c a9       	ldd	r25, Y+52	; 0x34
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	9c ab       	std	Y+52, r25	; 0x34
    1c2a:	8b ab       	std	Y+51, r24	; 0x33
{


	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    1c2c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c2e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	f1 f6       	brne	.-68     	; 0x1bf0 <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    1c34:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c36:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c38:	af ef       	ldi	r26, 0xFF	; 255
    1c3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1c3c:	9a 07       	cpc	r25, r26
    1c3e:	89 f4       	brne	.+34     	; 0x1c62 <LCDWriteInt+0xac>
    1c40:	05 c0       	rjmp	.+10     	; 0x1c4c <LCDWriteInt+0x96>
		while(str[j]==0) j++;
    1c42:	89 a9       	ldd	r24, Y+49	; 0x31
    1c44:	9a a9       	ldd	r25, Y+50	; 0x32
    1c46:	01 96       	adiw	r24, 0x01	; 1
    1c48:	9a ab       	std	Y+50, r25	; 0x32
    1c4a:	89 ab       	std	Y+49, r24	; 0x31
    1c4c:	29 a9       	ldd	r18, Y+49	; 0x31
    1c4e:	3a a9       	ldd	r19, Y+50	; 0x32
    1c50:	ce 01       	movw	r24, r28
    1c52:	c5 96       	adiw	r24, 0x35	; 53
    1c54:	fc 01       	movw	r30, r24
    1c56:	e2 0f       	add	r30, r18
    1c58:	f3 1f       	adc	r31, r19
    1c5a:	80 81       	ld	r24, Z
    1c5c:	88 23       	and	r24, r24
    1c5e:	89 f3       	breq	.-30     	; 0x1c42 <LCDWriteInt+0x8c>
    1c60:	08 c0       	rjmp	.+16     	; 0x1c72 <LCDWriteInt+0xbc>
	else
		j=5-field_length;
    1c62:	85 e0       	ldi	r24, 0x05	; 5
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c68:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c6a:	82 1b       	sub	r24, r18
    1c6c:	93 0b       	sbc	r25, r19
    1c6e:	9a ab       	std	Y+50, r25	; 0x32
    1c70:	89 ab       	std	Y+49, r24	; 0x31

	if(val<0) lcd_write_character_4d('-');
    1c72:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c74:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c76:	99 23       	and	r25, r25
    1c78:	1c f4       	brge	.+6      	; 0x1c80 <LCDWriteInt+0xca>
    1c7a:	8d e2       	ldi	r24, 0x2D	; 45
    1c7c:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <lcd_write_character_4d>
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	a0 ea       	ldi	r26, 0xA0	; 160
    1c86:	b2 e4       	ldi	r27, 0x42	; 66
    1c88:	8d a7       	std	Y+45, r24	; 0x2d
    1c8a:	9e a7       	std	Y+46, r25	; 0x2e
    1c8c:	af a7       	std	Y+47, r26	; 0x2f
    1c8e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c90:	6d a5       	ldd	r22, Y+45	; 0x2d
    1c92:	7e a5       	ldd	r23, Y+46	; 0x2e
    1c94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c96:	98 a9       	ldd	r25, Y+48	; 0x30
    1c98:	2b ea       	ldi	r18, 0xAB	; 171
    1c9a:	3a ea       	ldi	r19, 0xAA	; 170
    1c9c:	4a ea       	ldi	r20, 0xAA	; 170
    1c9e:	50 e4       	ldi	r21, 0x40	; 64
    1ca0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	89 a7       	std	Y+41, r24	; 0x29
    1caa:	9a a7       	std	Y+42, r25	; 0x2a
    1cac:	ab a7       	std	Y+43, r26	; 0x2b
    1cae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1cb0:	69 a5       	ldd	r22, Y+41	; 0x29
    1cb2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	5f e3       	ldi	r21, 0x3F	; 63
    1cc0:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1cc4:	88 23       	and	r24, r24
    1cc6:	1c f4       	brge	.+6      	; 0x1cce <LCDWriteInt+0x118>
		__ticks = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	88 a7       	std	Y+40, r24	; 0x28
    1ccc:	91 c0       	rjmp	.+290    	; 0x1df0 <LCDWriteInt+0x23a>
	else if (__tmp > 255)
    1cce:	69 a5       	ldd	r22, Y+41	; 0x29
    1cd0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cd2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4f e7       	ldi	r20, 0x7F	; 127
    1cdc:	53 e4       	ldi	r21, 0x43	; 67
    1cde:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1ce2:	18 16       	cp	r1, r24
    1ce4:	0c f0       	brlt	.+2      	; 0x1ce8 <LCDWriteInt+0x132>
    1ce6:	7b c0       	rjmp	.+246    	; 0x1dde <LCDWriteInt+0x228>
	{
		_delay_ms(__us / 1000.0);
    1ce8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cea:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cee:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a e7       	ldi	r20, 0x7A	; 122
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8c a3       	std	Y+36, r24	; 0x24
    1d02:	9d a3       	std	Y+37, r25	; 0x25
    1d04:	ae a3       	std	Y+38, r26	; 0x26
    1d06:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d08:	6c a1       	ldd	r22, Y+36	; 0x24
    1d0a:	7d a1       	ldd	r23, Y+37	; 0x25
    1d0c:	8e a1       	ldd	r24, Y+38	; 0x26
    1d0e:	9f a1       	ldd	r25, Y+39	; 0x27
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e7       	ldi	r20, 0x7A	; 122
    1d16:	55 e4       	ldi	r21, 0x45	; 69
    1d18:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	88 a3       	std	Y+32, r24	; 0x20
    1d22:	99 a3       	std	Y+33, r25	; 0x21
    1d24:	aa a3       	std	Y+34, r26	; 0x22
    1d26:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d28:	68 a1       	ldd	r22, Y+32	; 0x20
    1d2a:	79 a1       	ldd	r23, Y+33	; 0x21
    1d2c:	8a a1       	ldd	r24, Y+34	; 0x22
    1d2e:	9b a1       	ldd	r25, Y+35	; 0x23
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	2c f4       	brge	.+10     	; 0x1d4a <LCDWriteInt+0x194>
		__ticks = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9f 8f       	std	Y+31, r25	; 0x1f
    1d46:	8e 8f       	std	Y+30, r24	; 0x1e
    1d48:	3f c0       	rjmp	.+126    	; 0x1dc8 <LCDWriteInt+0x212>
	else if (__tmp > 65535)
    1d4a:	68 a1       	ldd	r22, Y+32	; 0x20
    1d4c:	79 a1       	ldd	r23, Y+33	; 0x21
    1d4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1d50:	9b a1       	ldd	r25, Y+35	; 0x23
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	4c f5       	brge	.+82     	; 0x1db4 <LCDWriteInt+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	6c a1       	ldd	r22, Y+36	; 0x24
    1d64:	7d a1       	ldd	r23, Y+37	; 0x25
    1d66:	8e a1       	ldd	r24, Y+38	; 0x26
    1d68:	9f a1       	ldd	r25, Y+39	; 0x27
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9f 8f       	std	Y+31, r25	; 0x1f
    1d88:	8e 8f       	std	Y+30, r24	; 0x1e
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <LCDWriteInt+0x1f4>
    1d8c:	80 e9       	ldi	r24, 0x90	; 144
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	9d 8f       	std	Y+29, r25	; 0x1d
    1d92:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d96:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCDWriteInt+0x1e2>
    1d9c:	9d 8f       	std	Y+29, r25	; 0x1d
    1d9e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1da2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	9f 8f       	std	Y+31, r25	; 0x1f
    1da8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <LCDWriteInt+0x1d6>
    1db2:	24 c0       	rjmp	.+72     	; 0x1dfc <LCDWriteInt+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db4:	68 a1       	ldd	r22, Y+32	; 0x20
    1db6:	79 a1       	ldd	r23, Y+33	; 0x21
    1db8:	8a a1       	ldd	r24, Y+34	; 0x22
    1dba:	9b a1       	ldd	r25, Y+35	; 0x23
    1dbc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9f 8f       	std	Y+31, r25	; 0x1f
    1dc6:	8e 8f       	std	Y+30, r24	; 0x1e
    1dc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dcc:	9b 8f       	std	Y+27, r25	; 0x1b
    1dce:	8a 8f       	std	Y+26, r24	; 0x1a
    1dd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCDWriteInt+0x21e>
    1dd8:	9b 8f       	std	Y+27, r25	; 0x1b
    1dda:	8a 8f       	std	Y+26, r24	; 0x1a
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCDWriteInt+0x246>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dde:	69 a5       	ldd	r22, Y+41	; 0x29
    1de0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1de2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1de6:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	88 a7       	std	Y+40, r24	; 0x28
    1df0:	88 a5       	ldd	r24, Y+40	; 0x28
    1df2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1df4:	89 8d       	ldd	r24, Y+25	; 0x19
    1df6:	8a 95       	dec	r24
    1df8:	f1 f7       	brne	.-4      	; 0x1df6 <LCDWriteInt+0x240>
    1dfa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(80);
	for(i=j;i<5;i++)
    1dfc:	89 a9       	ldd	r24, Y+49	; 0x31
    1dfe:	9a a9       	ldd	r25, Y+50	; 0x32
    1e00:	9c ab       	std	Y+52, r25	; 0x34
    1e02:	8b ab       	std	Y+51, r24	; 0x33
    1e04:	ce c0       	rjmp	.+412    	; 0x1fa2 <LCDWriteInt+0x3ec>
	{
	lcd_write_character_4d(48+str[i]);
    1e06:	2b a9       	ldd	r18, Y+51	; 0x33
    1e08:	3c a9       	ldd	r19, Y+52	; 0x34
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	c5 96       	adiw	r24, 0x35	; 53
    1e0e:	fc 01       	movw	r30, r24
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	80 81       	ld	r24, Z
    1e16:	80 5d       	subi	r24, 0xD0	; 208
    1e18:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <lcd_write_character_4d>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 ea       	ldi	r26, 0xA0	; 160
    1e22:	b2 e4       	ldi	r27, 0x42	; 66
    1e24:	8d 8b       	std	Y+21, r24	; 0x15
    1e26:	9e 8b       	std	Y+22, r25	; 0x16
    1e28:	af 8b       	std	Y+23, r26	; 0x17
    1e2a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e30:	8f 89       	ldd	r24, Y+23	; 0x17
    1e32:	98 8d       	ldd	r25, Y+24	; 0x18
    1e34:	2b ea       	ldi	r18, 0xAB	; 171
    1e36:	3a ea       	ldi	r19, 0xAA	; 170
    1e38:	4a ea       	ldi	r20, 0xAA	; 170
    1e3a:	50 e4       	ldi	r21, 0x40	; 64
    1e3c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	89 8b       	std	Y+17, r24	; 0x11
    1e46:	9a 8b       	std	Y+18, r25	; 0x12
    1e48:	ab 8b       	std	Y+19, r26	; 0x13
    1e4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e4c:	69 89       	ldd	r22, Y+17	; 0x11
    1e4e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	1c f4       	brge	.+6      	; 0x1e6a <LCDWriteInt+0x2b4>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	88 8b       	std	Y+16, r24	; 0x10
    1e68:	91 c0       	rjmp	.+290    	; 0x1f8c <LCDWriteInt+0x3d6>
	else if (__tmp > 255)
    1e6a:	69 89       	ldd	r22, Y+17	; 0x11
    1e6c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e70:	9c 89       	ldd	r25, Y+20	; 0x14
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	53 e4       	ldi	r21, 0x43	; 67
    1e7a:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	0c f0       	brlt	.+2      	; 0x1e84 <LCDWriteInt+0x2ce>
    1e82:	7b c0       	rjmp	.+246    	; 0x1f7a <LCDWriteInt+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1e84:	6d 89       	ldd	r22, Y+21	; 0x15
    1e86:	7e 89       	ldd	r23, Y+22	; 0x16
    1e88:	8f 89       	ldd	r24, Y+23	; 0x17
    1e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	54 e4       	ldi	r21, 0x44	; 68
    1e94:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8c 87       	std	Y+12, r24	; 0x0c
    1e9e:	9d 87       	std	Y+13, r25	; 0x0d
    1ea0:	ae 87       	std	Y+14, r26	; 0x0e
    1ea2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ea6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ea8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eaa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	55 e4       	ldi	r21, 0x45	; 69
    1eb4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	88 87       	std	Y+8, r24	; 0x08
    1ebe:	99 87       	std	Y+9, r25	; 0x09
    1ec0:	aa 87       	std	Y+10, r26	; 0x0a
    1ec2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ec4:	68 85       	ldd	r22, Y+8	; 0x08
    1ec6:	79 85       	ldd	r23, Y+9	; 0x09
    1ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <LCDWriteInt+0x330>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9f 83       	std	Y+7, r25	; 0x07
    1ee2:	8e 83       	std	Y+6, r24	; 0x06
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <LCDWriteInt+0x3ae>
	else if (__tmp > 65535)
    1ee6:	68 85       	ldd	r22, Y+8	; 0x08
    1ee8:	79 85       	ldd	r23, Y+9	; 0x09
    1eea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <LCDWriteInt+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f00:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f04:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9f 83       	std	Y+7, r25	; 0x07
    1f24:	8e 83       	std	Y+6, r24	; 0x06
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <LCDWriteInt+0x390>
    1f28:	80 e9       	ldi	r24, 0x90	; 144
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	9d 83       	std	Y+5, r25	; 0x05
    1f2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	9d 81       	ldd	r25, Y+5	; 0x05
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCDWriteInt+0x37e>
    1f38:	9d 83       	std	Y+5, r25	; 0x05
    1f3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9f 83       	std	Y+7, r25	; 0x07
    1f44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8e 81       	ldd	r24, Y+6	; 0x06
    1f48:	9f 81       	ldd	r25, Y+7	; 0x07
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <LCDWriteInt+0x372>
    1f4e:	24 c0       	rjmp	.+72     	; 0x1f98 <LCDWriteInt+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	68 85       	ldd	r22, Y+8	; 0x08
    1f52:	79 85       	ldd	r23, Y+9	; 0x09
    1f54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f58:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9f 83       	std	Y+7, r25	; 0x07
    1f62:	8e 83       	std	Y+6, r24	; 0x06
    1f64:	8e 81       	ldd	r24, Y+6	; 0x06
    1f66:	9f 81       	ldd	r25, Y+7	; 0x07
    1f68:	9b 83       	std	Y+3, r25	; 0x03
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCDWriteInt+0x3ba>
    1f74:	9b 83       	std	Y+3, r25	; 0x03
    1f76:	8a 83       	std	Y+2, r24	; 0x02
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCDWriteInt+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7a:	69 89       	ldd	r22, Y+17	; 0x11
    1f7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f80:	9c 89       	ldd	r25, Y+20	; 0x14
    1f82:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	88 8b       	std	Y+16, r24	; 0x10
    1f8c:	88 89       	ldd	r24, Y+16	; 0x10
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	8a 95       	dec	r24
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCDWriteInt+0x3dc>
    1f96:	89 83       	std	Y+1, r24	; 0x01
	else
		j=5-field_length;

	if(val<0) lcd_write_character_4d('-');
	_delay_us(80);
	for(i=j;i<5;i++)
    1f98:	8b a9       	ldd	r24, Y+51	; 0x33
    1f9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	9c ab       	std	Y+52, r25	; 0x34
    1fa0:	8b ab       	std	Y+51, r24	; 0x33
    1fa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa6:	85 30       	cpi	r24, 0x05	; 5
    1fa8:	91 05       	cpc	r25, r1
    1faa:	0c f4       	brge	.+2      	; 0x1fae <LCDWriteInt+0x3f8>
    1fac:	2c cf       	rjmp	.-424    	; 0x1e06 <LCDWriteInt+0x250>
	{
	lcd_write_character_4d(48+str[i]);
	_delay_us(80);
	}
}
    1fae:	ed 96       	adiw	r28, 0x3d	; 61
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <lcd_write_character_4d>:
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character_4d(uint8_t theData)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	0f 92       	push	r0
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	89 83       	std	Y+1, r24	; 0x01
    lcd_RS_port |= (1<<lcd_RS_bit);                 // select the Data Register (RS high)
    1fcc:	ab e0       	ldi	r26, 0x0B	; 11
    1fce:	b1 e0       	ldi	r27, 0x01	; 1
    1fd0:	eb e0       	ldi	r30, 0x0B	; 11
    1fd2:	f1 e0       	ldi	r31, 0x01	; 1
    1fd4:	80 81       	ld	r24, Z
    1fd6:	88 60       	ori	r24, 0x08	; 8
    1fd8:	8c 93       	st	X, r24
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    1fda:	ab e0       	ldi	r26, 0x0B	; 11
    1fdc:	b1 e0       	ldi	r27, 0x01	; 1
    1fde:	eb e0       	ldi	r30, 0x0B	; 11
    1fe0:	f1 e0       	ldi	r31, 0x01	; 1
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8b 7f       	andi	r24, 0xFB	; 251
    1fe6:	8c 93       	st	X, r24
    lcd_write_4(theData);                           // write the upper 4-bits of the data
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
    lcd_write_4(theData << 4);                      // write the lower 4-bits of the data
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	82 95       	swap	r24
    1ff2:	80 7f       	andi	r24, 0xF0	; 240
    1ff4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
}
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <lcd_write_instruction_4d>:
  Entry:    (theInstruction) is the information to be sent to the instruction register
  Exit:     no parameters
  Notes:    does not deal with RW (busy flag is not implemented)
*/
void lcd_write_instruction_4d(uint8_t theInstruction)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	cd b7       	in	r28, 0x3d	; 61
    2006:	de b7       	in	r29, 0x3e	; 62
    2008:	69 97       	sbiw	r28, 0x19	; 25
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	89 8f       	std	Y+25, r24	; 0x19
    lcd_RS_port &= ~(1<<lcd_RS_bit);                // select the Instruction Register (RS low)
    2016:	ab e0       	ldi	r26, 0x0B	; 11
    2018:	b1 e0       	ldi	r27, 0x01	; 1
    201a:	eb e0       	ldi	r30, 0x0B	; 11
    201c:	f1 e0       	ldi	r31, 0x01	; 1
    201e:	80 81       	ld	r24, Z
    2020:	87 7f       	andi	r24, 0xF7	; 247
    2022:	8c 93       	st	X, r24
    lcd_E_port &= ~(1<<lcd_E_bit);                  // make sure E is initially low
    2024:	ab e0       	ldi	r26, 0x0B	; 11
    2026:	b1 e0       	ldi	r27, 0x01	; 1
    2028:	eb e0       	ldi	r30, 0x0B	; 11
    202a:	f1 e0       	ldi	r31, 0x01	; 1
    202c:	80 81       	ld	r24, Z
    202e:	8b 7f       	andi	r24, 0xFB	; 251
    2030:	8c 93       	st	X, r24
    lcd_write_4(theInstruction);                    // write the upper 4-bits of the data
    2032:	89 8d       	ldd	r24, Y+25	; 0x19
    2034:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
    lcd_write_4(theInstruction << 4);               // write the lower 4-bits of the data
    2038:	89 8d       	ldd	r24, Y+25	; 0x19
    203a:	82 95       	swap	r24
    203c:	80 7f       	andi	r24, 0xF0	; 240
    203e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <lcd_write_4>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 ea       	ldi	r26, 0xA0	; 160
    2048:	b2 e4       	ldi	r27, 0x42	; 66
    204a:	8d 8b       	std	Y+21, r24	; 0x15
    204c:	9e 8b       	std	Y+22, r25	; 0x16
    204e:	af 8b       	std	Y+23, r26	; 0x17
    2050:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2052:	6d 89       	ldd	r22, Y+21	; 0x15
    2054:	7e 89       	ldd	r23, Y+22	; 0x16
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	2b ea       	ldi	r18, 0xAB	; 171
    205c:	3a ea       	ldi	r19, 0xAA	; 170
    205e:	4a ea       	ldi	r20, 0xAA	; 170
    2060:	50 e4       	ldi	r21, 0x40	; 64
    2062:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	89 8b       	std	Y+17, r24	; 0x11
    206c:	9a 8b       	std	Y+18, r25	; 0x12
    206e:	ab 8b       	std	Y+19, r26	; 0x13
    2070:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2072:	69 89       	ldd	r22, Y+17	; 0x11
    2074:	7a 89       	ldd	r23, Y+18	; 0x12
    2076:	8b 89       	ldd	r24, Y+19	; 0x13
    2078:	9c 89       	ldd	r25, Y+20	; 0x14
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	1c f4       	brge	.+6      	; 0x2090 <lcd_write_instruction_4d+0x90>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	88 8b       	std	Y+16, r24	; 0x10
    208e:	91 c0       	rjmp	.+290    	; 0x21b2 <lcd_write_instruction_4d+0x1b2>
	else if (__tmp > 255)
    2090:	69 89       	ldd	r22, Y+17	; 0x11
    2092:	7a 89       	ldd	r23, Y+18	; 0x12
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	9c 89       	ldd	r25, Y+20	; 0x14
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	53 e4       	ldi	r21, 0x43	; 67
    20a0:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	0c f0       	brlt	.+2      	; 0x20aa <lcd_write_instruction_4d+0xaa>
    20a8:	7b c0       	rjmp	.+246    	; 0x21a0 <lcd_write_instruction_4d+0x1a0>
	{
		_delay_ms(__us / 1000.0);
    20aa:	6d 89       	ldd	r22, Y+21	; 0x15
    20ac:	7e 89       	ldd	r23, Y+22	; 0x16
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	98 8d       	ldd	r25, Y+24	; 0x18
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a e7       	ldi	r20, 0x7A	; 122
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	8c 87       	std	Y+12, r24	; 0x0c
    20c4:	9d 87       	std	Y+13, r25	; 0x0d
    20c6:	ae 87       	std	Y+14, r26	; 0x0e
    20c8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    20cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a e7       	ldi	r20, 0x7A	; 122
    20d8:	55 e4       	ldi	r21, 0x45	; 69
    20da:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	88 87       	std	Y+8, r24	; 0x08
    20e4:	99 87       	std	Y+9, r25	; 0x09
    20e6:	aa 87       	std	Y+10, r26	; 0x0a
    20e8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20ea:	68 85       	ldd	r22, Y+8	; 0x08
    20ec:	79 85       	ldd	r23, Y+9	; 0x09
    20ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <lcd_write_instruction_4d+0x10c>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9f 83       	std	Y+7, r25	; 0x07
    2108:	8e 83       	std	Y+6, r24	; 0x06
    210a:	3f c0       	rjmp	.+126    	; 0x218a <lcd_write_instruction_4d+0x18a>
	else if (__tmp > 65535)
    210c:	68 85       	ldd	r22, Y+8	; 0x08
    210e:	79 85       	ldd	r23, Y+9	; 0x09
    2110:	8a 85       	ldd	r24, Y+10	; 0x0a
    2112:	9b 85       	ldd	r25, Y+11	; 0x0b
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <lcd_write_instruction_4d+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	6c 85       	ldd	r22, Y+12	; 0x0c
    2126:	7d 85       	ldd	r23, Y+13	; 0x0d
    2128:	8e 85       	ldd	r24, Y+14	; 0x0e
    212a:	9f 85       	ldd	r25, Y+15	; 0x0f
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9f 83       	std	Y+7, r25	; 0x07
    214a:	8e 83       	std	Y+6, r24	; 0x06
    214c:	0f c0       	rjmp	.+30     	; 0x216c <lcd_write_instruction_4d+0x16c>
    214e:	80 e9       	ldi	r24, 0x90	; 144
    2150:	91 e0       	ldi	r25, 0x01	; 1
    2152:	9d 83       	std	Y+5, r25	; 0x05
    2154:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2156:	8c 81       	ldd	r24, Y+4	; 0x04
    2158:	9d 81       	ldd	r25, Y+5	; 0x05
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <lcd_write_instruction_4d+0x15a>
    215e:	9d 83       	std	Y+5, r25	; 0x05
    2160:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	8e 81       	ldd	r24, Y+6	; 0x06
    2164:	9f 81       	ldd	r25, Y+7	; 0x07
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9f 83       	std	Y+7, r25	; 0x07
    216a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	8e 81       	ldd	r24, Y+6	; 0x06
    216e:	9f 81       	ldd	r25, Y+7	; 0x07
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <lcd_write_instruction_4d+0x14e>
    2174:	24 c0       	rjmp	.+72     	; 0x21be <lcd_write_instruction_4d+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	68 85       	ldd	r22, Y+8	; 0x08
    2178:	79 85       	ldd	r23, Y+9	; 0x09
    217a:	8a 85       	ldd	r24, Y+10	; 0x0a
    217c:	9b 85       	ldd	r25, Y+11	; 0x0b
    217e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9f 83       	std	Y+7, r25	; 0x07
    2188:	8e 83       	std	Y+6, r24	; 0x06
    218a:	8e 81       	ldd	r24, Y+6	; 0x06
    218c:	9f 81       	ldd	r25, Y+7	; 0x07
    218e:	9b 83       	std	Y+3, r25	; 0x03
    2190:	8a 83       	std	Y+2, r24	; 0x02
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <lcd_write_instruction_4d+0x196>
    219a:	9b 83       	std	Y+3, r25	; 0x03
    219c:	8a 83       	std	Y+2, r24	; 0x02
    219e:	0f c0       	rjmp	.+30     	; 0x21be <lcd_write_instruction_4d+0x1be>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21a0:	69 89       	ldd	r22, Y+17	; 0x11
    21a2:	7a 89       	ldd	r23, Y+18	; 0x12
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	88 8b       	std	Y+16, r24	; 0x10
    21b2:	88 89       	ldd	r24, Y+16	; 0x10
    21b4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	8a 95       	dec	r24
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <lcd_write_instruction_4d+0x1b8>
    21bc:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(80);
}
    21be:	69 96       	adiw	r28, 0x19	; 25
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <lcd_write_4>:
            RW is low
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_4(uint8_t theByte)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	e1 97       	sbiw	r28, 0x31	; 49
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	f8 94       	cli
    21de:	de bf       	out	0x3e, r29	; 62
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	cd bf       	out	0x3d, r28	; 61
    21e4:	89 ab       	std	Y+49, r24	; 0x31
    lcd_D7_port &= ~(1<<lcd_D7_bit);                        // assume that data is '0'
    21e6:	a5 e2       	ldi	r26, 0x25	; 37
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e5 e2       	ldi	r30, 0x25	; 37
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	8d 7f       	andi	r24, 0xFD	; 253
    21f2:	8c 93       	st	X, r24
    if (theByte & 1<<7) lcd_D7_port |= (1<<lcd_D7_bit);     // make data = '1' if necessary
    21f4:	89 a9       	ldd	r24, Y+49	; 0x31
    21f6:	88 23       	and	r24, r24
    21f8:	3c f4       	brge	.+14     	; 0x2208 <__stack+0x9>
    21fa:	a5 e2       	ldi	r26, 0x25	; 37
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e5 e2       	ldi	r30, 0x25	; 37
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	82 60       	ori	r24, 0x02	; 2
    2206:	8c 93       	st	X, r24

    lcd_D6_port &= ~(1<<lcd_D6_bit);                        // repeat for each data bit
    2208:	a5 e2       	ldi	r26, 0x25	; 37
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e5 e2       	ldi	r30, 0x25	; 37
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	8e 7f       	andi	r24, 0xFE	; 254
    2214:	8c 93       	st	X, r24
    if (theByte & 1<<6) lcd_D6_port |= (1<<lcd_D6_bit);
    2216:	89 a9       	ldd	r24, Y+49	; 0x31
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	80 74       	andi	r24, 0x40	; 64
    221e:	90 70       	andi	r25, 0x00	; 0
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	39 f0       	breq	.+14     	; 0x2232 <__stack+0x33>
    2224:	a5 e2       	ldi	r26, 0x25	; 37
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e5 e2       	ldi	r30, 0x25	; 37
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	81 60       	ori	r24, 0x01	; 1
    2230:	8c 93       	st	X, r24

    lcd_D5_port &= ~(1<<lcd_D5_bit);
    2232:	a5 e2       	ldi	r26, 0x25	; 37
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e5 e2       	ldi	r30, 0x25	; 37
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	87 7f       	andi	r24, 0xF7	; 247
    223e:	8c 93       	st	X, r24
    if (theByte & 1<<5) lcd_D5_port |= (1<<lcd_D5_bit);
    2240:	89 a9       	ldd	r24, Y+49	; 0x31
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	80 72       	andi	r24, 0x20	; 32
    2248:	90 70       	andi	r25, 0x00	; 0
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	39 f0       	breq	.+14     	; 0x225c <__stack+0x5d>
    224e:	a5 e2       	ldi	r26, 0x25	; 37
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e5 e2       	ldi	r30, 0x25	; 37
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	88 60       	ori	r24, 0x08	; 8
    225a:	8c 93       	st	X, r24

    lcd_D4_port &= ~(1<<lcd_D4_bit);
    225c:	a5 e2       	ldi	r26, 0x25	; 37
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e5 e2       	ldi	r30, 0x25	; 37
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8b 7f       	andi	r24, 0xFB	; 251
    2268:	8c 93       	st	X, r24
    if (theByte & 1<<4) lcd_D4_port |= (1<<lcd_D4_bit);
    226a:	89 a9       	ldd	r24, Y+49	; 0x31
    226c:	88 2f       	mov	r24, r24
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	80 71       	andi	r24, 0x10	; 16
    2272:	90 70       	andi	r25, 0x00	; 0
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	39 f0       	breq	.+14     	; 0x2286 <__stack+0x87>
    2278:	a5 e2       	ldi	r26, 0x25	; 37
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e5 e2       	ldi	r30, 0x25	; 37
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	84 60       	ori	r24, 0x04	; 4
    2284:	8c 93       	st	X, r24

// write the data
                                                    // 'Address set-up time' (40 nS)
    lcd_E_port |= (1<<lcd_E_bit);                   // Enable pin high
    2286:	ab e0       	ldi	r26, 0x0B	; 11
    2288:	b1 e0       	ldi	r27, 0x01	; 1
    228a:	eb e0       	ldi	r30, 0x0B	; 11
    228c:	f1 e0       	ldi	r31, 0x01	; 1
    228e:	80 81       	ld	r24, Z
    2290:	84 60       	ori	r24, 0x04	; 4
    2292:	8c 93       	st	X, r24
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e8       	ldi	r26, 0x80	; 128
    229a:	bf e3       	ldi	r27, 0x3F	; 63
    229c:	8d a7       	std	Y+45, r24	; 0x2d
    229e:	9e a7       	std	Y+46, r25	; 0x2e
    22a0:	af a7       	std	Y+47, r26	; 0x2f
    22a2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22a4:	6d a5       	ldd	r22, Y+45	; 0x2d
    22a6:	7e a5       	ldd	r23, Y+46	; 0x2e
    22a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22aa:	98 a9       	ldd	r25, Y+48	; 0x30
    22ac:	2b ea       	ldi	r18, 0xAB	; 171
    22ae:	3a ea       	ldi	r19, 0xAA	; 170
    22b0:	4a ea       	ldi	r20, 0xAA	; 170
    22b2:	50 e4       	ldi	r21, 0x40	; 64
    22b4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	89 a7       	std	Y+41, r24	; 0x29
    22be:	9a a7       	std	Y+42, r25	; 0x2a
    22c0:	ab a7       	std	Y+43, r26	; 0x2b
    22c2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22c4:	69 a5       	ldd	r22, Y+41	; 0x29
    22c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    22c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e8       	ldi	r20, 0x80	; 128
    22d2:	5f e3       	ldi	r21, 0x3F	; 63
    22d4:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    22d8:	88 23       	and	r24, r24
    22da:	1c f4       	brge	.+6      	; 0x22e2 <__stack+0xe3>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	88 a7       	std	Y+40, r24	; 0x28
    22e0:	91 c0       	rjmp	.+290    	; 0x2404 <__stack+0x205>
	else if (__tmp > 255)
    22e2:	69 a5       	ldd	r22, Y+41	; 0x29
    22e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    22e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	53 e4       	ldi	r21, 0x43	; 67
    22f2:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	0c f0       	brlt	.+2      	; 0x22fc <__stack+0xfd>
    22fa:	7b c0       	rjmp	.+246    	; 0x23f2 <__stack+0x1f3>
	{
		_delay_ms(__us / 1000.0);
    22fc:	6d a5       	ldd	r22, Y+45	; 0x2d
    22fe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2300:	8f a5       	ldd	r24, Y+47	; 0x2f
    2302:	98 a9       	ldd	r25, Y+48	; 0x30
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	4a e7       	ldi	r20, 0x7A	; 122
    230a:	54 e4       	ldi	r21, 0x44	; 68
    230c:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	8c a3       	std	Y+36, r24	; 0x24
    2316:	9d a3       	std	Y+37, r25	; 0x25
    2318:	ae a3       	std	Y+38, r26	; 0x26
    231a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231c:	6c a1       	ldd	r22, Y+36	; 0x24
    231e:	7d a1       	ldd	r23, Y+37	; 0x25
    2320:	8e a1       	ldd	r24, Y+38	; 0x26
    2322:	9f a1       	ldd	r25, Y+39	; 0x27
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a e7       	ldi	r20, 0x7A	; 122
    232a:	55 e4       	ldi	r21, 0x45	; 69
    232c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	88 a3       	std	Y+32, r24	; 0x20
    2336:	99 a3       	std	Y+33, r25	; 0x21
    2338:	aa a3       	std	Y+34, r26	; 0x22
    233a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    233c:	68 a1       	ldd	r22, Y+32	; 0x20
    233e:	79 a1       	ldd	r23, Y+33	; 0x21
    2340:	8a a1       	ldd	r24, Y+34	; 0x22
    2342:	9b a1       	ldd	r25, Y+35	; 0x23
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	2c f4       	brge	.+10     	; 0x235e <__stack+0x15f>
		__ticks = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9f 8f       	std	Y+31, r25	; 0x1f
    235a:	8e 8f       	std	Y+30, r24	; 0x1e
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <__stack+0x1dd>
	else if (__tmp > 65535)
    235e:	68 a1       	ldd	r22, Y+32	; 0x20
    2360:	79 a1       	ldd	r23, Y+33	; 0x21
    2362:	8a a1       	ldd	r24, Y+34	; 0x22
    2364:	9b a1       	ldd	r25, Y+35	; 0x23
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	57 e4       	ldi	r21, 0x47	; 71
    236e:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	4c f5       	brge	.+82     	; 0x23c8 <__stack+0x1c9>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2376:	6c a1       	ldd	r22, Y+36	; 0x24
    2378:	7d a1       	ldd	r23, Y+37	; 0x25
    237a:	8e a1       	ldd	r24, Y+38	; 0x26
    237c:	9f a1       	ldd	r25, Y+39	; 0x27
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9f 8f       	std	Y+31, r25	; 0x1f
    239c:	8e 8f       	std	Y+30, r24	; 0x1e
    239e:	0f c0       	rjmp	.+30     	; 0x23be <__stack+0x1bf>
    23a0:	80 e9       	ldi	r24, 0x90	; 144
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	9d 8f       	std	Y+29, r25	; 0x1d
    23a6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <__stack+0x1ad>
    23b0:	9d 8f       	std	Y+29, r25	; 0x1d
    23b2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9f 8f       	std	Y+31, r25	; 0x1f
    23bc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <__stack+0x1a1>
    23c6:	24 c0       	rjmp	.+72     	; 0x2410 <__stack+0x211>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	68 a1       	ldd	r22, Y+32	; 0x20
    23ca:	79 a1       	ldd	r23, Y+33	; 0x21
    23cc:	8a a1       	ldd	r24, Y+34	; 0x22
    23ce:	9b a1       	ldd	r25, Y+35	; 0x23
    23d0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9f 8f       	std	Y+31, r25	; 0x1f
    23da:	8e 8f       	std	Y+30, r24	; 0x1e
    23dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23de:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23e0:	9b 8f       	std	Y+27, r25	; 0x1b
    23e2:	8a 8f       	std	Y+26, r24	; 0x1a
    23e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <__stack+0x1e9>
    23ec:	9b 8f       	std	Y+27, r25	; 0x1b
    23ee:	8a 8f       	std	Y+26, r24	; 0x1a
    23f0:	0f c0       	rjmp	.+30     	; 0x2410 <__stack+0x211>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23f2:	69 a5       	ldd	r22, Y+41	; 0x29
    23f4:	7a a5       	ldd	r23, Y+42	; 0x2a
    23f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23fa:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	88 a7       	std	Y+40, r24	; 0x28
    2404:	88 a5       	ldd	r24, Y+40	; 0x28
    2406:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2408:	89 8d       	ldd	r24, Y+25	; 0x19
    240a:	8a 95       	dec	r24
    240c:	f1 f7       	brne	.-4      	; 0x240a <__stack+0x20b>
    240e:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    lcd_E_port &= ~(1<<lcd_E_bit);                  // Enable pin low
    2410:	ab e0       	ldi	r26, 0x0B	; 11
    2412:	b1 e0       	ldi	r27, 0x01	; 1
    2414:	eb e0       	ldi	r30, 0x0B	; 11
    2416:	f1 e0       	ldi	r31, 0x01	; 1
    2418:	80 81       	ld	r24, Z
    241a:	8b 7f       	andi	r24, 0xFB	; 251
    241c:	8c 93       	st	X, r24
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a0 e8       	ldi	r26, 0x80	; 128
    2424:	bf e3       	ldi	r27, 0x3F	; 63
    2426:	8d 8b       	std	Y+21, r24	; 0x15
    2428:	9e 8b       	std	Y+22, r25	; 0x16
    242a:	af 8b       	std	Y+23, r26	; 0x17
    242c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    242e:	6d 89       	ldd	r22, Y+21	; 0x15
    2430:	7e 89       	ldd	r23, Y+22	; 0x16
    2432:	8f 89       	ldd	r24, Y+23	; 0x17
    2434:	98 8d       	ldd	r25, Y+24	; 0x18
    2436:	2b ea       	ldi	r18, 0xAB	; 171
    2438:	3a ea       	ldi	r19, 0xAA	; 170
    243a:	4a ea       	ldi	r20, 0xAA	; 170
    243c:	50 e4       	ldi	r21, 0x40	; 64
    243e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	89 8b       	std	Y+17, r24	; 0x11
    2448:	9a 8b       	std	Y+18, r25	; 0x12
    244a:	ab 8b       	std	Y+19, r26	; 0x13
    244c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    244e:	69 89       	ldd	r22, Y+17	; 0x11
    2450:	7a 89       	ldd	r23, Y+18	; 0x12
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e8       	ldi	r20, 0x80	; 128
    245c:	5f e3       	ldi	r21, 0x3F	; 63
    245e:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    2462:	88 23       	and	r24, r24
    2464:	1c f4       	brge	.+6      	; 0x246c <__stack+0x26d>
		__ticks = 1;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	88 8b       	std	Y+16, r24	; 0x10
    246a:	91 c0       	rjmp	.+290    	; 0x258e <__stack+0x38f>
	else if (__tmp > 255)
    246c:	69 89       	ldd	r22, Y+17	; 0x11
    246e:	7a 89       	ldd	r23, Y+18	; 0x12
    2470:	8b 89       	ldd	r24, Y+19	; 0x13
    2472:	9c 89       	ldd	r25, Y+20	; 0x14
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	53 e4       	ldi	r21, 0x43	; 67
    247c:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	0c f0       	brlt	.+2      	; 0x2486 <__stack+0x287>
    2484:	7b c0       	rjmp	.+246    	; 0x257c <__stack+0x37d>
	{
		_delay_ms(__us / 1000.0);
    2486:	6d 89       	ldd	r22, Y+21	; 0x15
    2488:	7e 89       	ldd	r23, Y+22	; 0x16
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	98 8d       	ldd	r25, Y+24	; 0x18
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	4a e7       	ldi	r20, 0x7A	; 122
    2494:	54 e4       	ldi	r21, 0x44	; 68
    2496:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8c 87       	std	Y+12, r24	; 0x0c
    24a0:	9d 87       	std	Y+13, r25	; 0x0d
    24a2:	ae 87       	std	Y+14, r26	; 0x0e
    24a4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    24aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    24ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a e7       	ldi	r20, 0x7A	; 122
    24b4:	55 e4       	ldi	r21, 0x45	; 69
    24b6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	88 87       	std	Y+8, r24	; 0x08
    24c0:	99 87       	std	Y+9, r25	; 0x09
    24c2:	aa 87       	std	Y+10, r26	; 0x0a
    24c4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24c6:	68 85       	ldd	r22, Y+8	; 0x08
    24c8:	79 85       	ldd	r23, Y+9	; 0x09
    24ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    24cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <__stack+0x2e9>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9f 83       	std	Y+7, r25	; 0x07
    24e4:	8e 83       	std	Y+6, r24	; 0x06
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <__stack+0x367>
	else if (__tmp > 65535)
    24e8:	68 85       	ldd	r22, Y+8	; 0x08
    24ea:	79 85       	ldd	r23, Y+9	; 0x09
    24ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <__stack+0x353>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6c 85       	ldd	r22, Y+12	; 0x0c
    2502:	7d 85       	ldd	r23, Y+13	; 0x0d
    2504:	8e 85       	ldd	r24, Y+14	; 0x0e
    2506:	9f 85       	ldd	r25, Y+15	; 0x0f
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9f 83       	std	Y+7, r25	; 0x07
    2526:	8e 83       	std	Y+6, r24	; 0x06
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <__stack+0x349>
    252a:	80 e9       	ldi	r24, 0x90	; 144
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	9d 83       	std	Y+5, r25	; 0x05
    2530:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2532:	8c 81       	ldd	r24, Y+4	; 0x04
    2534:	9d 81       	ldd	r25, Y+5	; 0x05
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <__stack+0x337>
    253a:	9d 83       	std	Y+5, r25	; 0x05
    253c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8e 81       	ldd	r24, Y+6	; 0x06
    2540:	9f 81       	ldd	r25, Y+7	; 0x07
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9f 83       	std	Y+7, r25	; 0x07
    2546:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8e 81       	ldd	r24, Y+6	; 0x06
    254a:	9f 81       	ldd	r25, Y+7	; 0x07
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <__stack+0x32b>
    2550:	24 c0       	rjmp	.+72     	; 0x259a <__stack+0x39b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	68 85       	ldd	r22, Y+8	; 0x08
    2554:	79 85       	ldd	r23, Y+9	; 0x09
    2556:	8a 85       	ldd	r24, Y+10	; 0x0a
    2558:	9b 85       	ldd	r25, Y+11	; 0x0b
    255a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9f 83       	std	Y+7, r25	; 0x07
    2564:	8e 83       	std	Y+6, r24	; 0x06
    2566:	8e 81       	ldd	r24, Y+6	; 0x06
    2568:	9f 81       	ldd	r25, Y+7	; 0x07
    256a:	9b 83       	std	Y+3, r25	; 0x03
    256c:	8a 83       	std	Y+2, r24	; 0x02
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	9b 81       	ldd	r25, Y+3	; 0x03
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <__stack+0x373>
    2576:	9b 83       	std	Y+3, r25	; 0x03
    2578:	8a 83       	std	Y+2, r24	; 0x02
    257a:	0f c0       	rjmp	.+30     	; 0x259a <__stack+0x39b>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    257c:	69 89       	ldd	r22, Y+17	; 0x11
    257e:	7a 89       	ldd	r23, Y+18	; 0x12
    2580:	8b 89       	ldd	r24, Y+19	; 0x13
    2582:	9c 89       	ldd	r25, Y+20	; 0x14
    2584:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	88 8b       	std	Y+16, r24	; 0x10
    258e:	88 89       	ldd	r24, Y+16	; 0x10
    2590:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	8a 95       	dec	r24
    2596:	f1 f7       	brne	.-4      	; 0x2594 <__stack+0x395>
    2598:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);                                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
    259a:	e1 96       	adiw	r28, 0x31	; 49
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	de bf       	out	0x3e, r29	; 62
    25a2:	0f be       	out	0x3f, r0	; 63
    25a4:	cd bf       	out	0x3d, r28	; 61
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <__vector_41>:
volatile int counts;
volatile int dist;
int us_per_count;

ISR (TIMER4_CAPT_vect)
{
    25ac:	1f 92       	push	r1
    25ae:	0f 92       	push	r0
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	0f 92       	push	r0
    25b4:	00 90 5b 00 	lds	r0, 0x005B
    25b8:	0f 92       	push	r0
    25ba:	11 24       	eor	r1, r1
    25bc:	2f 93       	push	r18
    25be:	3f 93       	push	r19
    25c0:	4f 93       	push	r20
    25c2:	5f 93       	push	r21
    25c4:	6f 93       	push	r22
    25c6:	7f 93       	push	r23
    25c8:	8f 93       	push	r24
    25ca:	9f 93       	push	r25
    25cc:	af 93       	push	r26
    25ce:	bf 93       	push	r27
    25d0:	ef 93       	push	r30
    25d2:	ff 93       	push	r31
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62


       if (TCCR4B & (1<<ICES4)) // On rising edge
    25dc:	e1 ea       	ldi	r30, 0xA1	; 161
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	80 74       	andi	r24, 0x40	; 64
    25e8:	90 70       	andi	r25, 0x00	; 0
    25ea:	00 97       	sbiw	r24, 0x00	; 0
    25ec:	81 f0       	breq	.+32     	; 0x260e <__vector_41+0x62>
      {
        TCCR4B &= ~(1<<ICES4); // Next time detect falling edge
    25ee:	a1 ea       	ldi	r26, 0xA1	; 161
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e1 ea       	ldi	r30, 0xA1	; 161
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8f 7b       	andi	r24, 0xBF	; 191
    25fa:	8c 93       	st	X, r24
        rising = ICR4; // Save current count
    25fc:	e6 ea       	ldi	r30, 0xA6	; 166
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	90 93 41 03 	sts	0x0341, r25
    2608:	80 93 40 03 	sts	0x0340, r24
    260c:	4d c0       	rjmp	.+154    	; 0x26a8 <__vector_41+0xfc>
      }
      else // On falling edge
      {
        TCCR4B |= (1<<ICES4); // Next time detect falling edge
    260e:	a1 ea       	ldi	r26, 0xA1	; 161
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	e1 ea       	ldi	r30, 0xA1	; 161
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	80 64       	ori	r24, 0x40	; 64
    261a:	8c 93       	st	X, r24
        falling = ICR4; // Save current count
    261c:	e6 ea       	ldi	r30, 0xA6	; 166
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	90 93 39 03 	sts	0x0339, r25
    2628:	80 93 38 03 	sts	0x0338, r24
        counts = falling - rising;
    262c:	20 91 38 03 	lds	r18, 0x0338
    2630:	30 91 39 03 	lds	r19, 0x0339
    2634:	80 91 40 03 	lds	r24, 0x0340
    2638:	90 91 41 03 	lds	r25, 0x0341
    263c:	a9 01       	movw	r20, r18
    263e:	48 1b       	sub	r20, r24
    2640:	59 0b       	sbc	r21, r25
    2642:	ca 01       	movw	r24, r20
    2644:	90 93 3f 03 	sts	0x033F, r25
    2648:	80 93 3e 03 	sts	0x033E, r24
        //dist = us_per_count * counts / 58; //tijd van licht = 0,034cm/us * tijd van echo / 2 = 1/58 * tijd
        dist = us_per_count * counts * 0.17165;
    264c:	20 91 3c 03 	lds	r18, 0x033C
    2650:	30 91 3d 03 	lds	r19, 0x033D
    2654:	80 91 3e 03 	lds	r24, 0x033E
    2658:	90 91 3f 03 	lds	r25, 0x033F
    265c:	ac 01       	movw	r20, r24
    265e:	24 9f       	mul	r18, r20
    2660:	c0 01       	movw	r24, r0
    2662:	25 9f       	mul	r18, r21
    2664:	90 0d       	add	r25, r0
    2666:	34 9f       	mul	r19, r20
    2668:	90 0d       	add	r25, r0
    266a:	11 24       	eor	r1, r1
    266c:	aa 27       	eor	r26, r26
    266e:	97 fd       	sbrc	r25, 7
    2670:	a0 95       	com	r26
    2672:	ba 2f       	mov	r27, r26
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__floatsisf>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	25 e0       	ldi	r18, 0x05	; 5
    2686:	35 ec       	ldi	r19, 0xC5	; 197
    2688:	4f e2       	ldi	r20, 0x2F	; 47
    268a:	5e e3       	ldi	r21, 0x3E	; 62
    268c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 b1 19 	call	0x3362	; 0x3362 <__fixsfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	90 93 3b 03 	sts	0x033B, r25
    26a4:	80 93 3a 03 	sts	0x033A, r24
      }

}
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	ff 91       	pop	r31
    26ae:	ef 91       	pop	r30
    26b0:	bf 91       	pop	r27
    26b2:	af 91       	pop	r26
    26b4:	9f 91       	pop	r25
    26b6:	8f 91       	pop	r24
    26b8:	7f 91       	pop	r23
    26ba:	6f 91       	pop	r22
    26bc:	5f 91       	pop	r21
    26be:	4f 91       	pop	r20
    26c0:	3f 91       	pop	r19
    26c2:	2f 91       	pop	r18
    26c4:	0f 90       	pop	r0
    26c6:	00 92 5b 00 	sts	0x005B, r0
    26ca:	0f 90       	pop	r0
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	0f 90       	pop	r0
    26d0:	1f 90       	pop	r1
    26d2:	18 95       	reti

000026d4 <__vector_42>:

ISR (TIMER4_COMPA_vect)
{
    26d4:	1f 92       	push	r1
    26d6:	0f 92       	push	r0
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	0f 92       	push	r0
    26dc:	00 90 5b 00 	lds	r0, 0x005B
    26e0:	0f 92       	push	r0
    26e2:	11 24       	eor	r1, r1
    26e4:	2f 93       	push	r18
    26e6:	3f 93       	push	r19
    26e8:	4f 93       	push	r20
    26ea:	5f 93       	push	r21
    26ec:	6f 93       	push	r22
    26ee:	7f 93       	push	r23
    26f0:	8f 93       	push	r24
    26f2:	9f 93       	push	r25
    26f4:	af 93       	push	r26
    26f6:	bf 93       	push	r27
    26f8:	ef 93       	push	r30
    26fa:	ff 93       	push	r31
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	68 97       	sbiw	r28, 0x18	; 24
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	cd bf       	out	0x3d, r28	; 61

        PORTC |= 1 << PINC4;
    270a:	a8 e2       	ldi	r26, 0x28	; 40
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e8 e2       	ldi	r30, 0x28	; 40
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	80 61       	ori	r24, 0x10	; 16
    2716:	8c 93       	st	X, r24
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e4       	ldi	r26, 0x40	; 64
    271e:	b1 e4       	ldi	r27, 0x41	; 65
    2720:	8d 8b       	std	Y+21, r24	; 0x15
    2722:	9e 8b       	std	Y+22, r25	; 0x16
    2724:	af 8b       	std	Y+23, r26	; 0x17
    2726:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	2b ea       	ldi	r18, 0xAB	; 171
    2732:	3a ea       	ldi	r19, 0xAA	; 170
    2734:	4a ea       	ldi	r20, 0xAA	; 170
    2736:	50 e4       	ldi	r21, 0x40	; 64
    2738:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	89 8b       	std	Y+17, r24	; 0x11
    2742:	9a 8b       	std	Y+18, r25	; 0x12
    2744:	ab 8b       	std	Y+19, r26	; 0x13
    2746:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2748:	69 89       	ldd	r22, Y+17	; 0x11
    274a:	7a 89       	ldd	r23, Y+18	; 0x12
    274c:	8b 89       	ldd	r24, Y+19	; 0x13
    274e:	9c 89       	ldd	r25, Y+20	; 0x14
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	1c f4       	brge	.+6      	; 0x2766 <__vector_42+0x92>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	88 8b       	std	Y+16, r24	; 0x10
    2764:	91 c0       	rjmp	.+290    	; 0x2888 <__vector_42+0x1b4>
	else if (__tmp > 255)
    2766:	69 89       	ldd	r22, Y+17	; 0x11
    2768:	7a 89       	ldd	r23, Y+18	; 0x12
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	53 e4       	ldi	r21, 0x43	; 67
    2776:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    277a:	18 16       	cp	r1, r24
    277c:	0c f0       	brlt	.+2      	; 0x2780 <__vector_42+0xac>
    277e:	7b c0       	rjmp	.+246    	; 0x2876 <__vector_42+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	4a e7       	ldi	r20, 0x7A	; 122
    278e:	54 e4       	ldi	r21, 0x44	; 68
    2790:	0e 94 17 18 	call	0x302e	; 0x302e <__divsf3>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	8c 87       	std	Y+12, r24	; 0x0c
    279a:	9d 87       	std	Y+13, r25	; 0x0d
    279c:	ae 87       	std	Y+14, r26	; 0x0e
    279e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    27a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    27a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    27a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	4a e7       	ldi	r20, 0x7A	; 122
    27ae:	55 e4       	ldi	r21, 0x45	; 69
    27b0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	88 87       	std	Y+8, r24	; 0x08
    27ba:	99 87       	std	Y+9, r25	; 0x09
    27bc:	aa 87       	std	Y+10, r26	; 0x0a
    27be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27c0:	68 85       	ldd	r22, Y+8	; 0x08
    27c2:	79 85       	ldd	r23, Y+9	; 0x09
    27c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e8       	ldi	r20, 0x80	; 128
    27ce:	5f e3       	ldi	r21, 0x3F	; 63
    27d0:	0e 94 23 19 	call	0x3246	; 0x3246 <__ltsf2>
    27d4:	88 23       	and	r24, r24
    27d6:	2c f4       	brge	.+10     	; 0x27e2 <__vector_42+0x10e>
		__ticks = 1;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9f 83       	std	Y+7, r25	; 0x07
    27de:	8e 83       	std	Y+6, r24	; 0x06
    27e0:	3f c0       	rjmp	.+126    	; 0x2860 <__vector_42+0x18c>
	else if (__tmp > 65535)
    27e2:	68 85       	ldd	r22, Y+8	; 0x08
    27e4:	79 85       	ldd	r23, Y+9	; 0x09
    27e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	3f ef       	ldi	r19, 0xFF	; 255
    27ee:	4f e7       	ldi	r20, 0x7F	; 127
    27f0:	57 e4       	ldi	r21, 0x47	; 71
    27f2:	0e 94 c3 18 	call	0x3186	; 0x3186 <__gtsf2>
    27f6:	18 16       	cp	r1, r24
    27f8:	4c f5       	brge	.+82     	; 0x284c <__vector_42+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    27fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    27fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2800:	9f 85       	ldd	r25, Y+15	; 0x0f
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e2       	ldi	r20, 0x20	; 32
    2808:	51 e4       	ldi	r21, 0x41	; 65
    280a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9f 83       	std	Y+7, r25	; 0x07
    2820:	8e 83       	std	Y+6, r24	; 0x06
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <__vector_42+0x16e>
    2824:	80 e9       	ldi	r24, 0x90	; 144
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	9d 83       	std	Y+5, r25	; 0x05
    282a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	9d 81       	ldd	r25, Y+5	; 0x05
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <__vector_42+0x15c>
    2834:	9d 83       	std	Y+5, r25	; 0x05
    2836:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2838:	8e 81       	ldd	r24, Y+6	; 0x06
    283a:	9f 81       	ldd	r25, Y+7	; 0x07
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	9f 83       	std	Y+7, r25	; 0x07
    2840:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2842:	8e 81       	ldd	r24, Y+6	; 0x06
    2844:	9f 81       	ldd	r25, Y+7	; 0x07
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	69 f7       	brne	.-38     	; 0x2824 <__vector_42+0x150>
    284a:	24 c0       	rjmp	.+72     	; 0x2894 <__vector_42+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284c:	68 85       	ldd	r22, Y+8	; 0x08
    284e:	79 85       	ldd	r23, Y+9	; 0x09
    2850:	8a 85       	ldd	r24, Y+10	; 0x0a
    2852:	9b 85       	ldd	r25, Y+11	; 0x0b
    2854:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	9f 83       	std	Y+7, r25	; 0x07
    285e:	8e 83       	std	Y+6, r24	; 0x06
    2860:	8e 81       	ldd	r24, Y+6	; 0x06
    2862:	9f 81       	ldd	r25, Y+7	; 0x07
    2864:	9b 83       	std	Y+3, r25	; 0x03
    2866:	8a 83       	std	Y+2, r24	; 0x02
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	9b 81       	ldd	r25, Y+3	; 0x03
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <__vector_42+0x198>
    2870:	9b 83       	std	Y+3, r25	; 0x03
    2872:	8a 83       	std	Y+2, r24	; 0x02
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <__vector_42+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2876:	69 89       	ldd	r22, Y+17	; 0x11
    2878:	7a 89       	ldd	r23, Y+18	; 0x12
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	9c 89       	ldd	r25, Y+20	; 0x14
    287e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	88 8b       	std	Y+16, r24	; 0x10
    2888:	88 89       	ldd	r24, Y+16	; 0x10
    288a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	8a 95       	dec	r24
    2890:	f1 f7       	brne	.-4      	; 0x288e <__vector_42+0x1ba>
    2892:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(12);
        PORTC &= ~(1 << PINC4);
    2894:	a8 e2       	ldi	r26, 0x28	; 40
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e8 e2       	ldi	r30, 0x28	; 40
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	8f 7e       	andi	r24, 0xEF	; 239
    28a0:	8c 93       	st	X, r24


}
    28a2:	68 96       	adiw	r28, 0x18	; 24
    28a4:	de bf       	out	0x3e, r29	; 62
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	ff 91       	pop	r31
    28ae:	ef 91       	pop	r30
    28b0:	bf 91       	pop	r27
    28b2:	af 91       	pop	r26
    28b4:	9f 91       	pop	r25
    28b6:	8f 91       	pop	r24
    28b8:	7f 91       	pop	r23
    28ba:	6f 91       	pop	r22
    28bc:	5f 91       	pop	r21
    28be:	4f 91       	pop	r20
    28c0:	3f 91       	pop	r19
    28c2:	2f 91       	pop	r18
    28c4:	0f 90       	pop	r0
    28c6:	00 92 5b 00 	sts	0x005B, r0
    28ca:	0f 90       	pop	r0
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	0f 90       	pop	r0
    28d0:	1f 90       	pop	r1
    28d2:	18 95       	reti

000028d4 <init_timer4>:


void init_timer4()
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62

  TCCR4A |= (1 << WGM41);
    28dc:	a0 ea       	ldi	r26, 0xA0	; 160
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	e0 ea       	ldi	r30, 0xA0	; 160
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	82 60       	ori	r24, 0x02	; 2
    28e8:	8c 93       	st	X, r24

  TCCR4B |= 1 << CS41 | 1 << CS40; // prescaler 64
    28ea:	a1 ea       	ldi	r26, 0xA1	; 161
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e1 ea       	ldi	r30, 0xA1	; 161
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	83 60       	ori	r24, 0x03	; 3
    28f6:	8c 93       	st	X, r24

  TIMSK4 |= 1 << OCIE4A | 1 << ICIE4;
    28f8:	a2 e7       	ldi	r26, 0x72	; 114
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e2 e7       	ldi	r30, 0x72	; 114
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	82 62       	ori	r24, 0x22	; 34
    2904:	8c 93       	st	X, r24

  TCCR4B |= (1 << ICES4); // Input capture on rising edge
    2906:	a1 ea       	ldi	r26, 0xA1	; 161
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e1 ea       	ldi	r30, 0xA1	; 161
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	80 64       	ori	r24, 0x40	; 64
    2912:	8c 93       	st	X, r24

  OCR4A = 17500;
    2914:	e8 ea       	ldi	r30, 0xA8	; 168
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	8c e5       	ldi	r24, 0x5C	; 92
    291a:	94 e4       	ldi	r25, 0x44	; 68
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	80 83       	st	Z, r24

  sei();
    2920:	78 94       	sei
  us_per_count = 4; // 16MHz / 64 = 25000 counts/second => 1000000/250000
    2922:	84 e0       	ldi	r24, 0x04	; 4
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	90 93 3d 03 	sts	0x033D, r25
    292a:	80 93 3c 03 	sts	0x033C, r24

}
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <init>:

void init(void)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    init_h_bridge();
    293c:	0e 94 75 02 	call	0x4ea	; 0x4ea <init_h_bridge>
}
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <main>:

int main(void)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    DDRE &= ~(1<<IRsensor);
    294e:	ad e2       	ldi	r26, 0x2D	; 45
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ed e2       	ldi	r30, 0x2D	; 45
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	8f 7e       	andi	r24, 0xEF	; 239
    295a:	8c 93       	st	X, r24

    lcd_D7_ddr |= (1<<lcd_D7_bit);                  // 4 data lines - output
    295c:	a4 e2       	ldi	r26, 0x24	; 36
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e4 e2       	ldi	r30, 0x24	; 36
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	82 60       	ori	r24, 0x02	; 2
    2968:	8c 93       	st	X, r24
    lcd_D6_ddr |= (1<<lcd_D6_bit);
    296a:	a4 e2       	ldi	r26, 0x24	; 36
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	e4 e2       	ldi	r30, 0x24	; 36
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	81 60       	ori	r24, 0x01	; 1
    2976:	8c 93       	st	X, r24
    lcd_D5_ddr |= (1<<lcd_D5_bit);
    2978:	a4 e2       	ldi	r26, 0x24	; 36
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e4 e2       	ldi	r30, 0x24	; 36
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	88 60       	ori	r24, 0x08	; 8
    2984:	8c 93       	st	X, r24
    lcd_D4_ddr |= (1<<lcd_D4_bit);
    2986:	a4 e2       	ldi	r26, 0x24	; 36
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e4 e2       	ldi	r30, 0x24	; 36
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	84 60       	ori	r24, 0x04	; 4
    2992:	8c 93       	st	X, r24

// configure the microprocessor pins for the control lines
    lcd_E_ddr |= (1<<lcd_E_bit);                    // E line - output
    2994:	aa e0       	ldi	r26, 0x0A	; 10
    2996:	b1 e0       	ldi	r27, 0x01	; 1
    2998:	ea e0       	ldi	r30, 0x0A	; 10
    299a:	f1 e0       	ldi	r31, 0x01	; 1
    299c:	80 81       	ld	r24, Z
    299e:	84 60       	ori	r24, 0x04	; 4
    29a0:	8c 93       	st	X, r24
    lcd_RS_ddr |= (1<<lcd_RS_bit);                  // RS line - output
    29a2:	aa e0       	ldi	r26, 0x0A	; 10
    29a4:	b1 e0       	ldi	r27, 0x01	; 1
    29a6:	ea e0       	ldi	r30, 0x0A	; 10
    29a8:	f1 e0       	ldi	r31, 0x01	; 1
    29aa:	80 81       	ld	r24, Z
    29ac:	88 60       	ori	r24, 0x08	; 8
    29ae:	8c 93       	st	X, r24

// initialize the LCD controller as determined by the defines (LCD instructions)
    lcd_init_4d();
    29b0:	0e 94 9b 03 	call	0x736	; 0x736 <lcd_init_4d>
    lcd_write_instruction_4d(xPosition(0) | lcd_LineOne);
    29b4:	80 e8       	ldi	r24, 0x80	; 128
    29b6:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
    lcd_write_string_4d("Distance: ");
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	92 e0       	ldi	r25, 0x02	; 2
    29be:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <lcd_write_string_4d>


    static int IR_value, IR_oldvalue;

    DDRC |= 1 << PINC4;
    29c2:	a7 e2       	ldi	r26, 0x27	; 39
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e7 e2       	ldi	r30, 0x27	; 39
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 61       	ori	r24, 0x10	; 16
    29ce:	8c 93       	st	X, r24
    PORTC &= ~(1 << PINC4);
    29d0:	a8 e2       	ldi	r26, 0x28	; 40
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e8 e2       	ldi	r30, 0x28	; 40
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	8f 7e       	andi	r24, 0xEF	; 239
    29dc:	8c 93       	st	X, r24

    init_timer4();
    29de:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <init_timer4>

    init();
    29e2:	0e 94 9a 14 	call	0x2934	; 0x2934 <init>

    while(1)
    {
        IR_oldvalue = IR_value;
    29e6:	80 91 36 03 	lds	r24, 0x0336
    29ea:	90 91 37 03 	lds	r25, 0x0337
    29ee:	90 93 35 03 	sts	0x0335, r25
    29f2:	80 93 34 03 	sts	0x0334, r24
        if (PINE & (1<<IRsensor))
    29f6:	ec e2       	ldi	r30, 0x2C	; 44
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	80 71       	andi	r24, 0x10	; 16
    2a02:	90 70       	andi	r25, 0x00	; 0
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	39 f0       	breq	.+14     	; 0x2a16 <main+0xd0>
        {
            IR_value = detected;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	90 93 37 03 	sts	0x0337, r25
    2a10:	80 93 36 03 	sts	0x0336, r24
    2a14:	04 c0       	rjmp	.+8      	; 0x2a1e <main+0xd8>
        }
        else
        {
            IR_value = notDetected;
    2a16:	10 92 37 03 	sts	0x0337, r1
    2a1a:	10 92 36 03 	sts	0x0336, r1
        }

        if(IR_value == IR_oldvalue)
    2a1e:	20 91 36 03 	lds	r18, 0x0336
    2a22:	30 91 37 03 	lds	r19, 0x0337
    2a26:	80 91 34 03 	lds	r24, 0x0334
    2a2a:	90 91 35 03 	lds	r25, 0x0335
    2a2e:	28 17       	cp	r18, r24
    2a30:	39 07       	cpc	r19, r25
    2a32:	d9 f4       	brne	.+54     	; 0x2a6a <main+0x124>
        {
            if(IR_value == detected)
    2a34:	80 91 36 03 	lds	r24, 0x0336
    2a38:	90 91 37 03 	lds	r25, 0x0337
    2a3c:	81 30       	cpi	r24, 0x01	; 1
    2a3e:	91 05       	cpc	r25, r1
    2a40:	39 f4       	brne	.+14     	; 0x2a50 <main+0x10a>
            {

                lcd_write_instruction_4d(xPosition(0) | lcd_LineTwo);
    2a42:	80 ec       	ldi	r24, 0xC0	; 192
    2a44:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
                lcd_write_string_4d("Object detected");
    2a48:	8b e0       	ldi	r24, 0x0B	; 11
    2a4a:	92 e0       	ldi	r25, 0x02	; 2
    2a4c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <lcd_write_string_4d>
            }

            if(IR_value == notDetected)
    2a50:	80 91 36 03 	lds	r24, 0x0336
    2a54:	90 91 37 03 	lds	r25, 0x0337
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	39 f4       	brne	.+14     	; 0x2a6a <main+0x124>
            {
                lcd_write_instruction_4d(xPosition(0) | lcd_LineTwo);
    2a5c:	80 ec       	ldi	r24, 0xC0	; 192
    2a5e:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
                lcd_write_string_4d("Nothing detected");
    2a62:	8b e1       	ldi	r24, 0x1B	; 27
    2a64:	92 e0       	ldi	r25, 0x02	; 2
    2a66:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <lcd_write_string_4d>
            }
        }

        lcd_write_instruction_4d(xPosition(10) | lcd_LineOne);
    2a6a:	8a e8       	ldi	r24, 0x8A	; 138
    2a6c:	0e 94 00 10 	call	0x2000	; 0x2000 <lcd_write_instruction_4d>
        LCDWriteInt(dist, 3);
    2a70:	80 91 3a 03 	lds	r24, 0x033A
    2a74:	90 91 3b 03 	lds	r25, 0x033B
    2a78:	63 e0       	ldi	r22, 0x03	; 3
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <LCDWriteInt>

        h_bridge_set_percentage_rechts(80);
    2a80:	80 e5       	ldi	r24, 0x50	; 80
    2a82:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <h_bridge_set_percentage_rechts>
        h_bridge_set_percentage_links(-80);
    2a86:	80 eb       	ldi	r24, 0xB0	; 176
    2a88:	0e 94 47 03 	call	0x68e	; 0x68e <h_bridge_set_percentage_links>
    2a8c:	ac cf       	rjmp	.-168    	; 0x29e6 <main+0xa0>

00002a8e <__fixunssfsi>:
    2a8e:	ef 92       	push	r14
    2a90:	ff 92       	push	r15
    2a92:	0f 93       	push	r16
    2a94:	1f 93       	push	r17
    2a96:	7b 01       	movw	r14, r22
    2a98:	8c 01       	movw	r16, r24
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	5f e4       	ldi	r21, 0x4F	; 79
    2aa2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__gesf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	8c f0       	brlt	.+34     	; 0x2acc <__fixunssfsi+0x3e>
    2aaa:	c8 01       	movw	r24, r16
    2aac:	b7 01       	movw	r22, r14
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	5f e4       	ldi	r21, 0x4F	; 79
    2ab6:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__subsf3>
    2aba:	0e 94 b1 19 	call	0x3362	; 0x3362 <__fixsfsi>
    2abe:	9b 01       	movw	r18, r22
    2ac0:	ac 01       	movw	r20, r24
    2ac2:	20 50       	subi	r18, 0x00	; 0
    2ac4:	30 40       	sbci	r19, 0x00	; 0
    2ac6:	40 40       	sbci	r20, 0x00	; 0
    2ac8:	50 48       	sbci	r21, 0x80	; 128
    2aca:	06 c0       	rjmp	.+12     	; 0x2ad8 <__fixunssfsi+0x4a>
    2acc:	c8 01       	movw	r24, r16
    2ace:	b7 01       	movw	r22, r14
    2ad0:	0e 94 b1 19 	call	0x3362	; 0x3362 <__fixsfsi>
    2ad4:	9b 01       	movw	r18, r22
    2ad6:	ac 01       	movw	r20, r24
    2ad8:	b9 01       	movw	r22, r18
    2ada:	ca 01       	movw	r24, r20
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	08 95       	ret

00002ae6 <_fpadd_parts>:
    2ae6:	a0 e0       	ldi	r26, 0x00	; 0
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e9 e7       	ldi	r30, 0x79	; 121
    2aec:	f5 e1       	ldi	r31, 0x15	; 21
    2aee:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__>
    2af2:	dc 01       	movw	r26, r24
    2af4:	2b 01       	movw	r4, r22
    2af6:	fa 01       	movw	r30, r20
    2af8:	9c 91       	ld	r25, X
    2afa:	92 30       	cpi	r25, 0x02	; 2
    2afc:	08 f4       	brcc	.+2      	; 0x2b00 <_fpadd_parts+0x1a>
    2afe:	39 c1       	rjmp	.+626    	; 0x2d72 <_fpadd_parts+0x28c>
    2b00:	eb 01       	movw	r28, r22
    2b02:	88 81       	ld	r24, Y
    2b04:	82 30       	cpi	r24, 0x02	; 2
    2b06:	08 f4       	brcc	.+2      	; 0x2b0a <_fpadd_parts+0x24>
    2b08:	33 c1       	rjmp	.+614    	; 0x2d70 <_fpadd_parts+0x28a>
    2b0a:	94 30       	cpi	r25, 0x04	; 4
    2b0c:	69 f4       	brne	.+26     	; 0x2b28 <_fpadd_parts+0x42>
    2b0e:	84 30       	cpi	r24, 0x04	; 4
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <_fpadd_parts+0x2e>
    2b12:	2f c1       	rjmp	.+606    	; 0x2d72 <_fpadd_parts+0x28c>
    2b14:	11 96       	adiw	r26, 0x01	; 1
    2b16:	9c 91       	ld	r25, X
    2b18:	11 97       	sbiw	r26, 0x01	; 1
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	98 17       	cp	r25, r24
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <_fpadd_parts+0x3c>
    2b20:	28 c1       	rjmp	.+592    	; 0x2d72 <_fpadd_parts+0x28c>
    2b22:	ac e2       	ldi	r26, 0x2C	; 44
    2b24:	b2 e0       	ldi	r27, 0x02	; 2
    2b26:	25 c1       	rjmp	.+586    	; 0x2d72 <_fpadd_parts+0x28c>
    2b28:	84 30       	cpi	r24, 0x04	; 4
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <_fpadd_parts+0x48>
    2b2c:	21 c1       	rjmp	.+578    	; 0x2d70 <_fpadd_parts+0x28a>
    2b2e:	82 30       	cpi	r24, 0x02	; 2
    2b30:	a9 f4       	brne	.+42     	; 0x2b5c <_fpadd_parts+0x76>
    2b32:	92 30       	cpi	r25, 0x02	; 2
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <_fpadd_parts+0x52>
    2b36:	1d c1       	rjmp	.+570    	; 0x2d72 <_fpadd_parts+0x28c>
    2b38:	9a 01       	movw	r18, r20
    2b3a:	ad 01       	movw	r20, r26
    2b3c:	88 e0       	ldi	r24, 0x08	; 8
    2b3e:	ea 01       	movw	r28, r20
    2b40:	09 90       	ld	r0, Y+
    2b42:	ae 01       	movw	r20, r28
    2b44:	e9 01       	movw	r28, r18
    2b46:	09 92       	st	Y+, r0
    2b48:	9e 01       	movw	r18, r28
    2b4a:	81 50       	subi	r24, 0x01	; 1
    2b4c:	c1 f7       	brne	.-16     	; 0x2b3e <_fpadd_parts+0x58>
    2b4e:	e2 01       	movw	r28, r4
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	11 96       	adiw	r26, 0x01	; 1
    2b54:	9c 91       	ld	r25, X
    2b56:	89 23       	and	r24, r25
    2b58:	81 83       	std	Z+1, r24	; 0x01
    2b5a:	08 c1       	rjmp	.+528    	; 0x2d6c <_fpadd_parts+0x286>
    2b5c:	92 30       	cpi	r25, 0x02	; 2
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <_fpadd_parts+0x7c>
    2b60:	07 c1       	rjmp	.+526    	; 0x2d70 <_fpadd_parts+0x28a>
    2b62:	12 96       	adiw	r26, 0x02	; 2
    2b64:	2d 90       	ld	r2, X+
    2b66:	3c 90       	ld	r3, X
    2b68:	13 97       	sbiw	r26, 0x03	; 3
    2b6a:	eb 01       	movw	r28, r22
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b70:	14 96       	adiw	r26, 0x04	; 4
    2b72:	ad 90       	ld	r10, X+
    2b74:	bd 90       	ld	r11, X+
    2b76:	cd 90       	ld	r12, X+
    2b78:	dc 90       	ld	r13, X
    2b7a:	17 97       	sbiw	r26, 0x07	; 7
    2b7c:	ec 80       	ldd	r14, Y+4	; 0x04
    2b7e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b80:	0e 81       	ldd	r16, Y+6	; 0x06
    2b82:	1f 81       	ldd	r17, Y+7	; 0x07
    2b84:	91 01       	movw	r18, r2
    2b86:	28 1b       	sub	r18, r24
    2b88:	39 0b       	sbc	r19, r25
    2b8a:	b9 01       	movw	r22, r18
    2b8c:	37 ff       	sbrs	r19, 7
    2b8e:	04 c0       	rjmp	.+8      	; 0x2b98 <_fpadd_parts+0xb2>
    2b90:	66 27       	eor	r22, r22
    2b92:	77 27       	eor	r23, r23
    2b94:	62 1b       	sub	r22, r18
    2b96:	73 0b       	sbc	r23, r19
    2b98:	60 32       	cpi	r22, 0x20	; 32
    2b9a:	71 05       	cpc	r23, r1
    2b9c:	0c f0       	brlt	.+2      	; 0x2ba0 <_fpadd_parts+0xba>
    2b9e:	61 c0       	rjmp	.+194    	; 0x2c62 <_fpadd_parts+0x17c>
    2ba0:	12 16       	cp	r1, r18
    2ba2:	13 06       	cpc	r1, r19
    2ba4:	6c f5       	brge	.+90     	; 0x2c00 <_fpadd_parts+0x11a>
    2ba6:	37 01       	movw	r6, r14
    2ba8:	48 01       	movw	r8, r16
    2baa:	06 2e       	mov	r0, r22
    2bac:	04 c0       	rjmp	.+8      	; 0x2bb6 <_fpadd_parts+0xd0>
    2bae:	96 94       	lsr	r9
    2bb0:	87 94       	ror	r8
    2bb2:	77 94       	ror	r7
    2bb4:	67 94       	ror	r6
    2bb6:	0a 94       	dec	r0
    2bb8:	d2 f7       	brpl	.-12     	; 0x2bae <_fpadd_parts+0xc8>
    2bba:	21 e0       	ldi	r18, 0x01	; 1
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	50 e0       	ldi	r21, 0x00	; 0
    2bc2:	04 c0       	rjmp	.+8      	; 0x2bcc <_fpadd_parts+0xe6>
    2bc4:	22 0f       	add	r18, r18
    2bc6:	33 1f       	adc	r19, r19
    2bc8:	44 1f       	adc	r20, r20
    2bca:	55 1f       	adc	r21, r21
    2bcc:	6a 95       	dec	r22
    2bce:	d2 f7       	brpl	.-12     	; 0x2bc4 <_fpadd_parts+0xde>
    2bd0:	21 50       	subi	r18, 0x01	; 1
    2bd2:	30 40       	sbci	r19, 0x00	; 0
    2bd4:	40 40       	sbci	r20, 0x00	; 0
    2bd6:	50 40       	sbci	r21, 0x00	; 0
    2bd8:	2e 21       	and	r18, r14
    2bda:	3f 21       	and	r19, r15
    2bdc:	40 23       	and	r20, r16
    2bde:	51 23       	and	r21, r17
    2be0:	21 15       	cp	r18, r1
    2be2:	31 05       	cpc	r19, r1
    2be4:	41 05       	cpc	r20, r1
    2be6:	51 05       	cpc	r21, r1
    2be8:	21 f0       	breq	.+8      	; 0x2bf2 <_fpadd_parts+0x10c>
    2bea:	21 e0       	ldi	r18, 0x01	; 1
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	79 01       	movw	r14, r18
    2bf4:	8a 01       	movw	r16, r20
    2bf6:	e6 28       	or	r14, r6
    2bf8:	f7 28       	or	r15, r7
    2bfa:	08 29       	or	r16, r8
    2bfc:	19 29       	or	r17, r9
    2bfe:	3c c0       	rjmp	.+120    	; 0x2c78 <_fpadd_parts+0x192>
    2c00:	23 2b       	or	r18, r19
    2c02:	d1 f1       	breq	.+116    	; 0x2c78 <_fpadd_parts+0x192>
    2c04:	26 0e       	add	r2, r22
    2c06:	37 1e       	adc	r3, r23
    2c08:	35 01       	movw	r6, r10
    2c0a:	46 01       	movw	r8, r12
    2c0c:	06 2e       	mov	r0, r22
    2c0e:	04 c0       	rjmp	.+8      	; 0x2c18 <_fpadd_parts+0x132>
    2c10:	96 94       	lsr	r9
    2c12:	87 94       	ror	r8
    2c14:	77 94       	ror	r7
    2c16:	67 94       	ror	r6
    2c18:	0a 94       	dec	r0
    2c1a:	d2 f7       	brpl	.-12     	; 0x2c10 <_fpadd_parts+0x12a>
    2c1c:	21 e0       	ldi	r18, 0x01	; 1
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	04 c0       	rjmp	.+8      	; 0x2c2e <_fpadd_parts+0x148>
    2c26:	22 0f       	add	r18, r18
    2c28:	33 1f       	adc	r19, r19
    2c2a:	44 1f       	adc	r20, r20
    2c2c:	55 1f       	adc	r21, r21
    2c2e:	6a 95       	dec	r22
    2c30:	d2 f7       	brpl	.-12     	; 0x2c26 <_fpadd_parts+0x140>
    2c32:	21 50       	subi	r18, 0x01	; 1
    2c34:	30 40       	sbci	r19, 0x00	; 0
    2c36:	40 40       	sbci	r20, 0x00	; 0
    2c38:	50 40       	sbci	r21, 0x00	; 0
    2c3a:	2a 21       	and	r18, r10
    2c3c:	3b 21       	and	r19, r11
    2c3e:	4c 21       	and	r20, r12
    2c40:	5d 21       	and	r21, r13
    2c42:	21 15       	cp	r18, r1
    2c44:	31 05       	cpc	r19, r1
    2c46:	41 05       	cpc	r20, r1
    2c48:	51 05       	cpc	r21, r1
    2c4a:	21 f0       	breq	.+8      	; 0x2c54 <_fpadd_parts+0x16e>
    2c4c:	21 e0       	ldi	r18, 0x01	; 1
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e0       	ldi	r20, 0x00	; 0
    2c52:	50 e0       	ldi	r21, 0x00	; 0
    2c54:	59 01       	movw	r10, r18
    2c56:	6a 01       	movw	r12, r20
    2c58:	a6 28       	or	r10, r6
    2c5a:	b7 28       	or	r11, r7
    2c5c:	c8 28       	or	r12, r8
    2c5e:	d9 28       	or	r13, r9
    2c60:	0b c0       	rjmp	.+22     	; 0x2c78 <_fpadd_parts+0x192>
    2c62:	82 15       	cp	r24, r2
    2c64:	93 05       	cpc	r25, r3
    2c66:	2c f0       	brlt	.+10     	; 0x2c72 <_fpadd_parts+0x18c>
    2c68:	1c 01       	movw	r2, r24
    2c6a:	aa 24       	eor	r10, r10
    2c6c:	bb 24       	eor	r11, r11
    2c6e:	65 01       	movw	r12, r10
    2c70:	03 c0       	rjmp	.+6      	; 0x2c78 <_fpadd_parts+0x192>
    2c72:	ee 24       	eor	r14, r14
    2c74:	ff 24       	eor	r15, r15
    2c76:	87 01       	movw	r16, r14
    2c78:	11 96       	adiw	r26, 0x01	; 1
    2c7a:	9c 91       	ld	r25, X
    2c7c:	d2 01       	movw	r26, r4
    2c7e:	11 96       	adiw	r26, 0x01	; 1
    2c80:	8c 91       	ld	r24, X
    2c82:	98 17       	cp	r25, r24
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <_fpadd_parts+0x1a2>
    2c86:	45 c0       	rjmp	.+138    	; 0x2d12 <_fpadd_parts+0x22c>
    2c88:	99 23       	and	r25, r25
    2c8a:	39 f0       	breq	.+14     	; 0x2c9a <_fpadd_parts+0x1b4>
    2c8c:	a8 01       	movw	r20, r16
    2c8e:	97 01       	movw	r18, r14
    2c90:	2a 19       	sub	r18, r10
    2c92:	3b 09       	sbc	r19, r11
    2c94:	4c 09       	sbc	r20, r12
    2c96:	5d 09       	sbc	r21, r13
    2c98:	06 c0       	rjmp	.+12     	; 0x2ca6 <_fpadd_parts+0x1c0>
    2c9a:	a6 01       	movw	r20, r12
    2c9c:	95 01       	movw	r18, r10
    2c9e:	2e 19       	sub	r18, r14
    2ca0:	3f 09       	sbc	r19, r15
    2ca2:	40 0b       	sbc	r20, r16
    2ca4:	51 0b       	sbc	r21, r17
    2ca6:	57 fd       	sbrc	r21, 7
    2ca8:	08 c0       	rjmp	.+16     	; 0x2cba <_fpadd_parts+0x1d4>
    2caa:	11 82       	std	Z+1, r1	; 0x01
    2cac:	33 82       	std	Z+3, r3	; 0x03
    2cae:	22 82       	std	Z+2, r2	; 0x02
    2cb0:	24 83       	std	Z+4, r18	; 0x04
    2cb2:	35 83       	std	Z+5, r19	; 0x05
    2cb4:	46 83       	std	Z+6, r20	; 0x06
    2cb6:	57 83       	std	Z+7, r21	; 0x07
    2cb8:	1d c0       	rjmp	.+58     	; 0x2cf4 <_fpadd_parts+0x20e>
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	81 83       	std	Z+1, r24	; 0x01
    2cbe:	33 82       	std	Z+3, r3	; 0x03
    2cc0:	22 82       	std	Z+2, r2	; 0x02
    2cc2:	88 27       	eor	r24, r24
    2cc4:	99 27       	eor	r25, r25
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	82 1b       	sub	r24, r18
    2cca:	93 0b       	sbc	r25, r19
    2ccc:	a4 0b       	sbc	r26, r20
    2cce:	b5 0b       	sbc	r27, r21
    2cd0:	84 83       	std	Z+4, r24	; 0x04
    2cd2:	95 83       	std	Z+5, r25	; 0x05
    2cd4:	a6 83       	std	Z+6, r26	; 0x06
    2cd6:	b7 83       	std	Z+7, r27	; 0x07
    2cd8:	0d c0       	rjmp	.+26     	; 0x2cf4 <_fpadd_parts+0x20e>
    2cda:	22 0f       	add	r18, r18
    2cdc:	33 1f       	adc	r19, r19
    2cde:	44 1f       	adc	r20, r20
    2ce0:	55 1f       	adc	r21, r21
    2ce2:	24 83       	std	Z+4, r18	; 0x04
    2ce4:	35 83       	std	Z+5, r19	; 0x05
    2ce6:	46 83       	std	Z+6, r20	; 0x06
    2ce8:	57 83       	std	Z+7, r21	; 0x07
    2cea:	82 81       	ldd	r24, Z+2	; 0x02
    2cec:	93 81       	ldd	r25, Z+3	; 0x03
    2cee:	01 97       	sbiw	r24, 0x01	; 1
    2cf0:	93 83       	std	Z+3, r25	; 0x03
    2cf2:	82 83       	std	Z+2, r24	; 0x02
    2cf4:	24 81       	ldd	r18, Z+4	; 0x04
    2cf6:	35 81       	ldd	r19, Z+5	; 0x05
    2cf8:	46 81       	ldd	r20, Z+6	; 0x06
    2cfa:	57 81       	ldd	r21, Z+7	; 0x07
    2cfc:	da 01       	movw	r26, r20
    2cfe:	c9 01       	movw	r24, r18
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	a1 09       	sbc	r26, r1
    2d04:	b1 09       	sbc	r27, r1
    2d06:	8f 5f       	subi	r24, 0xFF	; 255
    2d08:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0a:	af 4f       	sbci	r26, 0xFF	; 255
    2d0c:	bf 43       	sbci	r27, 0x3F	; 63
    2d0e:	28 f3       	brcs	.-54     	; 0x2cda <_fpadd_parts+0x1f4>
    2d10:	0b c0       	rjmp	.+22     	; 0x2d28 <_fpadd_parts+0x242>
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	33 82       	std	Z+3, r3	; 0x03
    2d16:	22 82       	std	Z+2, r2	; 0x02
    2d18:	ea 0c       	add	r14, r10
    2d1a:	fb 1c       	adc	r15, r11
    2d1c:	0c 1d       	adc	r16, r12
    2d1e:	1d 1d       	adc	r17, r13
    2d20:	e4 82       	std	Z+4, r14	; 0x04
    2d22:	f5 82       	std	Z+5, r15	; 0x05
    2d24:	06 83       	std	Z+6, r16	; 0x06
    2d26:	17 83       	std	Z+7, r17	; 0x07
    2d28:	83 e0       	ldi	r24, 0x03	; 3
    2d2a:	80 83       	st	Z, r24
    2d2c:	24 81       	ldd	r18, Z+4	; 0x04
    2d2e:	35 81       	ldd	r19, Z+5	; 0x05
    2d30:	46 81       	ldd	r20, Z+6	; 0x06
    2d32:	57 81       	ldd	r21, Z+7	; 0x07
    2d34:	57 ff       	sbrs	r21, 7
    2d36:	1a c0       	rjmp	.+52     	; 0x2d6c <_fpadd_parts+0x286>
    2d38:	c9 01       	movw	r24, r18
    2d3a:	aa 27       	eor	r26, r26
    2d3c:	97 fd       	sbrc	r25, 7
    2d3e:	a0 95       	com	r26
    2d40:	ba 2f       	mov	r27, r26
    2d42:	81 70       	andi	r24, 0x01	; 1
    2d44:	90 70       	andi	r25, 0x00	; 0
    2d46:	a0 70       	andi	r26, 0x00	; 0
    2d48:	b0 70       	andi	r27, 0x00	; 0
    2d4a:	56 95       	lsr	r21
    2d4c:	47 95       	ror	r20
    2d4e:	37 95       	ror	r19
    2d50:	27 95       	ror	r18
    2d52:	82 2b       	or	r24, r18
    2d54:	93 2b       	or	r25, r19
    2d56:	a4 2b       	or	r26, r20
    2d58:	b5 2b       	or	r27, r21
    2d5a:	84 83       	std	Z+4, r24	; 0x04
    2d5c:	95 83       	std	Z+5, r25	; 0x05
    2d5e:	a6 83       	std	Z+6, r26	; 0x06
    2d60:	b7 83       	std	Z+7, r27	; 0x07
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	93 83       	std	Z+3, r25	; 0x03
    2d6a:	82 83       	std	Z+2, r24	; 0x02
    2d6c:	df 01       	movw	r26, r30
    2d6e:	01 c0       	rjmp	.+2      	; 0x2d72 <_fpadd_parts+0x28c>
    2d70:	d2 01       	movw	r26, r4
    2d72:	cd 01       	movw	r24, r26
    2d74:	cd b7       	in	r28, 0x3d	; 61
    2d76:	de b7       	in	r29, 0x3e	; 62
    2d78:	e2 e1       	ldi	r30, 0x12	; 18
    2d7a:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__>

00002d7e <__subsf3>:
    2d7e:	a0 e2       	ldi	r26, 0x20	; 32
    2d80:	b0 e0       	ldi	r27, 0x00	; 0
    2d82:	e5 ec       	ldi	r30, 0xC5	; 197
    2d84:	f6 e1       	ldi	r31, 0x16	; 22
    2d86:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__+0x18>
    2d8a:	69 83       	std	Y+1, r22	; 0x01
    2d8c:	7a 83       	std	Y+2, r23	; 0x02
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
    2d90:	9c 83       	std	Y+4, r25	; 0x04
    2d92:	2d 83       	std	Y+5, r18	; 0x05
    2d94:	3e 83       	std	Y+6, r19	; 0x06
    2d96:	4f 83       	std	Y+7, r20	; 0x07
    2d98:	58 87       	std	Y+8, r21	; 0x08
    2d9a:	e9 e0       	ldi	r30, 0x09	; 9
    2d9c:	ee 2e       	mov	r14, r30
    2d9e:	f1 2c       	mov	r15, r1
    2da0:	ec 0e       	add	r14, r28
    2da2:	fd 1e       	adc	r15, r29
    2da4:	ce 01       	movw	r24, r28
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	b7 01       	movw	r22, r14
    2daa:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    2dae:	8e 01       	movw	r16, r28
    2db0:	0f 5e       	subi	r16, 0xEF	; 239
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	ce 01       	movw	r24, r28
    2db6:	05 96       	adiw	r24, 0x05	; 5
    2db8:	b8 01       	movw	r22, r16
    2dba:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    2dbe:	8a 89       	ldd	r24, Y+18	; 0x12
    2dc0:	91 e0       	ldi	r25, 0x01	; 1
    2dc2:	89 27       	eor	r24, r25
    2dc4:	8a 8b       	std	Y+18, r24	; 0x12
    2dc6:	c7 01       	movw	r24, r14
    2dc8:	b8 01       	movw	r22, r16
    2dca:	ae 01       	movw	r20, r28
    2dcc:	47 5e       	subi	r20, 0xE7	; 231
    2dce:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd0:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <_fpadd_parts>
    2dd4:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__pack_f>
    2dd8:	a0 96       	adiw	r28, 0x20	; 32
    2dda:	e6 e0       	ldi	r30, 0x06	; 6
    2ddc:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__+0x18>

00002de0 <__addsf3>:
    2de0:	a0 e2       	ldi	r26, 0x20	; 32
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	e6 ef       	ldi	r30, 0xF6	; 246
    2de6:	f6 e1       	ldi	r31, 0x16	; 22
    2de8:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__+0x18>
    2dec:	69 83       	std	Y+1, r22	; 0x01
    2dee:	7a 83       	std	Y+2, r23	; 0x02
    2df0:	8b 83       	std	Y+3, r24	; 0x03
    2df2:	9c 83       	std	Y+4, r25	; 0x04
    2df4:	2d 83       	std	Y+5, r18	; 0x05
    2df6:	3e 83       	std	Y+6, r19	; 0x06
    2df8:	4f 83       	std	Y+7, r20	; 0x07
    2dfa:	58 87       	std	Y+8, r21	; 0x08
    2dfc:	f9 e0       	ldi	r31, 0x09	; 9
    2dfe:	ef 2e       	mov	r14, r31
    2e00:	f1 2c       	mov	r15, r1
    2e02:	ec 0e       	add	r14, r28
    2e04:	fd 1e       	adc	r15, r29
    2e06:	ce 01       	movw	r24, r28
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	b7 01       	movw	r22, r14
    2e0c:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    2e10:	8e 01       	movw	r16, r28
    2e12:	0f 5e       	subi	r16, 0xEF	; 239
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	ce 01       	movw	r24, r28
    2e18:	05 96       	adiw	r24, 0x05	; 5
    2e1a:	b8 01       	movw	r22, r16
    2e1c:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    2e20:	c7 01       	movw	r24, r14
    2e22:	b8 01       	movw	r22, r16
    2e24:	ae 01       	movw	r20, r28
    2e26:	47 5e       	subi	r20, 0xE7	; 231
    2e28:	5f 4f       	sbci	r21, 0xFF	; 255
    2e2a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <_fpadd_parts>
    2e2e:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__pack_f>
    2e32:	a0 96       	adiw	r28, 0x20	; 32
    2e34:	e6 e0       	ldi	r30, 0x06	; 6
    2e36:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__+0x18>

00002e3a <__mulsf3>:
    2e3a:	a0 e2       	ldi	r26, 0x20	; 32
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e3 e2       	ldi	r30, 0x23	; 35
    2e40:	f7 e1       	ldi	r31, 0x17	; 23
    2e42:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__prologue_saves__>
    2e46:	69 83       	std	Y+1, r22	; 0x01
    2e48:	7a 83       	std	Y+2, r23	; 0x02
    2e4a:	8b 83       	std	Y+3, r24	; 0x03
    2e4c:	9c 83       	std	Y+4, r25	; 0x04
    2e4e:	2d 83       	std	Y+5, r18	; 0x05
    2e50:	3e 83       	std	Y+6, r19	; 0x06
    2e52:	4f 83       	std	Y+7, r20	; 0x07
    2e54:	58 87       	std	Y+8, r21	; 0x08
    2e56:	ce 01       	movw	r24, r28
    2e58:	01 96       	adiw	r24, 0x01	; 1
    2e5a:	be 01       	movw	r22, r28
    2e5c:	67 5f       	subi	r22, 0xF7	; 247
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    2e64:	ce 01       	movw	r24, r28
    2e66:	05 96       	adiw	r24, 0x05	; 5
    2e68:	be 01       	movw	r22, r28
    2e6a:	6f 5e       	subi	r22, 0xEF	; 239
    2e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6e:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    2e72:	99 85       	ldd	r25, Y+9	; 0x09
    2e74:	92 30       	cpi	r25, 0x02	; 2
    2e76:	88 f0       	brcs	.+34     	; 0x2e9a <__mulsf3+0x60>
    2e78:	89 89       	ldd	r24, Y+17	; 0x11
    2e7a:	82 30       	cpi	r24, 0x02	; 2
    2e7c:	c8 f0       	brcs	.+50     	; 0x2eb0 <__mulsf3+0x76>
    2e7e:	94 30       	cpi	r25, 0x04	; 4
    2e80:	19 f4       	brne	.+6      	; 0x2e88 <__mulsf3+0x4e>
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	51 f4       	brne	.+20     	; 0x2e9a <__mulsf3+0x60>
    2e86:	04 c0       	rjmp	.+8      	; 0x2e90 <__mulsf3+0x56>
    2e88:	84 30       	cpi	r24, 0x04	; 4
    2e8a:	29 f4       	brne	.+10     	; 0x2e96 <__mulsf3+0x5c>
    2e8c:	92 30       	cpi	r25, 0x02	; 2
    2e8e:	81 f4       	brne	.+32     	; 0x2eb0 <__mulsf3+0x76>
    2e90:	8c e2       	ldi	r24, 0x2C	; 44
    2e92:	92 e0       	ldi	r25, 0x02	; 2
    2e94:	c6 c0       	rjmp	.+396    	; 0x3022 <__mulsf3+0x1e8>
    2e96:	92 30       	cpi	r25, 0x02	; 2
    2e98:	49 f4       	brne	.+18     	; 0x2eac <__mulsf3+0x72>
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	8a 89       	ldd	r24, Y+18	; 0x12
    2ea0:	98 13       	cpse	r25, r24
    2ea2:	21 e0       	ldi	r18, 0x01	; 1
    2ea4:	2a 87       	std	Y+10, r18	; 0x0a
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	09 96       	adiw	r24, 0x09	; 9
    2eaa:	bb c0       	rjmp	.+374    	; 0x3022 <__mulsf3+0x1e8>
    2eac:	82 30       	cpi	r24, 0x02	; 2
    2eae:	49 f4       	brne	.+18     	; 0x2ec2 <__mulsf3+0x88>
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb4:	8a 89       	ldd	r24, Y+18	; 0x12
    2eb6:	98 13       	cpse	r25, r24
    2eb8:	21 e0       	ldi	r18, 0x01	; 1
    2eba:	2a 8b       	std	Y+18, r18	; 0x12
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	41 96       	adiw	r24, 0x11	; 17
    2ec0:	b0 c0       	rjmp	.+352    	; 0x3022 <__mulsf3+0x1e8>
    2ec2:	2d 84       	ldd	r2, Y+13	; 0x0d
    2ec4:	3e 84       	ldd	r3, Y+14	; 0x0e
    2ec6:	4f 84       	ldd	r4, Y+15	; 0x0f
    2ec8:	58 88       	ldd	r5, Y+16	; 0x10
    2eca:	6d 88       	ldd	r6, Y+21	; 0x15
    2ecc:	7e 88       	ldd	r7, Y+22	; 0x16
    2ece:	8f 88       	ldd	r8, Y+23	; 0x17
    2ed0:	98 8c       	ldd	r9, Y+24	; 0x18
    2ed2:	ee 24       	eor	r14, r14
    2ed4:	ff 24       	eor	r15, r15
    2ed6:	87 01       	movw	r16, r14
    2ed8:	aa 24       	eor	r10, r10
    2eda:	bb 24       	eor	r11, r11
    2edc:	65 01       	movw	r12, r10
    2ede:	40 e0       	ldi	r20, 0x00	; 0
    2ee0:	50 e0       	ldi	r21, 0x00	; 0
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	e0 e0       	ldi	r30, 0x00	; 0
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	c1 01       	movw	r24, r2
    2eec:	81 70       	andi	r24, 0x01	; 1
    2eee:	90 70       	andi	r25, 0x00	; 0
    2ef0:	89 2b       	or	r24, r25
    2ef2:	e9 f0       	breq	.+58     	; 0x2f2e <__mulsf3+0xf4>
    2ef4:	e6 0c       	add	r14, r6
    2ef6:	f7 1c       	adc	r15, r7
    2ef8:	08 1d       	adc	r16, r8
    2efa:	19 1d       	adc	r17, r9
    2efc:	9a 01       	movw	r18, r20
    2efe:	ab 01       	movw	r20, r22
    2f00:	2a 0d       	add	r18, r10
    2f02:	3b 1d       	adc	r19, r11
    2f04:	4c 1d       	adc	r20, r12
    2f06:	5d 1d       	adc	r21, r13
    2f08:	80 e0       	ldi	r24, 0x00	; 0
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	a0 e0       	ldi	r26, 0x00	; 0
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	e6 14       	cp	r14, r6
    2f12:	f7 04       	cpc	r15, r7
    2f14:	08 05       	cpc	r16, r8
    2f16:	19 05       	cpc	r17, r9
    2f18:	20 f4       	brcc	.+8      	; 0x2f22 <__mulsf3+0xe8>
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a0 e0       	ldi	r26, 0x00	; 0
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	ba 01       	movw	r22, r20
    2f24:	a9 01       	movw	r20, r18
    2f26:	48 0f       	add	r20, r24
    2f28:	59 1f       	adc	r21, r25
    2f2a:	6a 1f       	adc	r22, r26
    2f2c:	7b 1f       	adc	r23, r27
    2f2e:	aa 0c       	add	r10, r10
    2f30:	bb 1c       	adc	r11, r11
    2f32:	cc 1c       	adc	r12, r12
    2f34:	dd 1c       	adc	r13, r13
    2f36:	97 fe       	sbrs	r9, 7
    2f38:	08 c0       	rjmp	.+16     	; 0x2f4a <__mulsf3+0x110>
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	a0 e0       	ldi	r26, 0x00	; 0
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	a8 2a       	or	r10, r24
    2f44:	b9 2a       	or	r11, r25
    2f46:	ca 2a       	or	r12, r26
    2f48:	db 2a       	or	r13, r27
    2f4a:	31 96       	adiw	r30, 0x01	; 1
    2f4c:	e0 32       	cpi	r30, 0x20	; 32
    2f4e:	f1 05       	cpc	r31, r1
    2f50:	49 f0       	breq	.+18     	; 0x2f64 <__mulsf3+0x12a>
    2f52:	66 0c       	add	r6, r6
    2f54:	77 1c       	adc	r7, r7
    2f56:	88 1c       	adc	r8, r8
    2f58:	99 1c       	adc	r9, r9
    2f5a:	56 94       	lsr	r5
    2f5c:	47 94       	ror	r4
    2f5e:	37 94       	ror	r3
    2f60:	27 94       	ror	r2
    2f62:	c3 cf       	rjmp	.-122    	; 0x2eea <__mulsf3+0xb0>
    2f64:	fa 85       	ldd	r31, Y+10	; 0x0a
    2f66:	ea 89       	ldd	r30, Y+18	; 0x12
    2f68:	2b 89       	ldd	r18, Y+19	; 0x13
    2f6a:	3c 89       	ldd	r19, Y+20	; 0x14
    2f6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f70:	28 0f       	add	r18, r24
    2f72:	39 1f       	adc	r19, r25
    2f74:	2e 5f       	subi	r18, 0xFE	; 254
    2f76:	3f 4f       	sbci	r19, 0xFF	; 255
    2f78:	17 c0       	rjmp	.+46     	; 0x2fa8 <__mulsf3+0x16e>
    2f7a:	ca 01       	movw	r24, r20
    2f7c:	81 70       	andi	r24, 0x01	; 1
    2f7e:	90 70       	andi	r25, 0x00	; 0
    2f80:	89 2b       	or	r24, r25
    2f82:	61 f0       	breq	.+24     	; 0x2f9c <__mulsf3+0x162>
    2f84:	16 95       	lsr	r17
    2f86:	07 95       	ror	r16
    2f88:	f7 94       	ror	r15
    2f8a:	e7 94       	ror	r14
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	a0 e0       	ldi	r26, 0x00	; 0
    2f92:	b0 e8       	ldi	r27, 0x80	; 128
    2f94:	e8 2a       	or	r14, r24
    2f96:	f9 2a       	or	r15, r25
    2f98:	0a 2b       	or	r16, r26
    2f9a:	1b 2b       	or	r17, r27
    2f9c:	76 95       	lsr	r23
    2f9e:	67 95       	ror	r22
    2fa0:	57 95       	ror	r21
    2fa2:	47 95       	ror	r20
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa8:	77 fd       	sbrc	r23, 7
    2faa:	e7 cf       	rjmp	.-50     	; 0x2f7a <__mulsf3+0x140>
    2fac:	0c c0       	rjmp	.+24     	; 0x2fc6 <__mulsf3+0x18c>
    2fae:	44 0f       	add	r20, r20
    2fb0:	55 1f       	adc	r21, r21
    2fb2:	66 1f       	adc	r22, r22
    2fb4:	77 1f       	adc	r23, r23
    2fb6:	17 fd       	sbrc	r17, 7
    2fb8:	41 60       	ori	r20, 0x01	; 1
    2fba:	ee 0c       	add	r14, r14
    2fbc:	ff 1c       	adc	r15, r15
    2fbe:	00 1f       	adc	r16, r16
    2fc0:	11 1f       	adc	r17, r17
    2fc2:	21 50       	subi	r18, 0x01	; 1
    2fc4:	30 40       	sbci	r19, 0x00	; 0
    2fc6:	40 30       	cpi	r20, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	59 07       	cpc	r21, r25
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	69 07       	cpc	r22, r25
    2fd0:	90 e4       	ldi	r25, 0x40	; 64
    2fd2:	79 07       	cpc	r23, r25
    2fd4:	60 f3       	brcs	.-40     	; 0x2fae <__mulsf3+0x174>
    2fd6:	2b 8f       	std	Y+27, r18	; 0x1b
    2fd8:	3c 8f       	std	Y+28, r19	; 0x1c
    2fda:	db 01       	movw	r26, r22
    2fdc:	ca 01       	movw	r24, r20
    2fde:	8f 77       	andi	r24, 0x7F	; 127
    2fe0:	90 70       	andi	r25, 0x00	; 0
    2fe2:	a0 70       	andi	r26, 0x00	; 0
    2fe4:	b0 70       	andi	r27, 0x00	; 0
    2fe6:	80 34       	cpi	r24, 0x40	; 64
    2fe8:	91 05       	cpc	r25, r1
    2fea:	a1 05       	cpc	r26, r1
    2fec:	b1 05       	cpc	r27, r1
    2fee:	61 f4       	brne	.+24     	; 0x3008 <__mulsf3+0x1ce>
    2ff0:	47 fd       	sbrc	r20, 7
    2ff2:	0a c0       	rjmp	.+20     	; 0x3008 <__mulsf3+0x1ce>
    2ff4:	e1 14       	cp	r14, r1
    2ff6:	f1 04       	cpc	r15, r1
    2ff8:	01 05       	cpc	r16, r1
    2ffa:	11 05       	cpc	r17, r1
    2ffc:	29 f0       	breq	.+10     	; 0x3008 <__mulsf3+0x1ce>
    2ffe:	40 5c       	subi	r20, 0xC0	; 192
    3000:	5f 4f       	sbci	r21, 0xFF	; 255
    3002:	6f 4f       	sbci	r22, 0xFF	; 255
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	40 78       	andi	r20, 0x80	; 128
    3008:	1a 8e       	std	Y+26, r1	; 0x1a
    300a:	fe 17       	cp	r31, r30
    300c:	11 f0       	breq	.+4      	; 0x3012 <__mulsf3+0x1d8>
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	8a 8f       	std	Y+26, r24	; 0x1a
    3012:	4d 8f       	std	Y+29, r20	; 0x1d
    3014:	5e 8f       	std	Y+30, r21	; 0x1e
    3016:	6f 8f       	std	Y+31, r22	; 0x1f
    3018:	78 a3       	std	Y+32, r23	; 0x20
    301a:	83 e0       	ldi	r24, 0x03	; 3
    301c:	89 8f       	std	Y+25, r24	; 0x19
    301e:	ce 01       	movw	r24, r28
    3020:	49 96       	adiw	r24, 0x19	; 25
    3022:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__pack_f>
    3026:	a0 96       	adiw	r28, 0x20	; 32
    3028:	e2 e1       	ldi	r30, 0x12	; 18
    302a:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__epilogue_restores__>

0000302e <__divsf3>:
    302e:	a8 e1       	ldi	r26, 0x18	; 24
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	ed e1       	ldi	r30, 0x1D	; 29
    3034:	f8 e1       	ldi	r31, 0x18	; 24
    3036:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__prologue_saves__+0x10>
    303a:	69 83       	std	Y+1, r22	; 0x01
    303c:	7a 83       	std	Y+2, r23	; 0x02
    303e:	8b 83       	std	Y+3, r24	; 0x03
    3040:	9c 83       	std	Y+4, r25	; 0x04
    3042:	2d 83       	std	Y+5, r18	; 0x05
    3044:	3e 83       	std	Y+6, r19	; 0x06
    3046:	4f 83       	std	Y+7, r20	; 0x07
    3048:	58 87       	std	Y+8, r21	; 0x08
    304a:	b9 e0       	ldi	r27, 0x09	; 9
    304c:	eb 2e       	mov	r14, r27
    304e:	f1 2c       	mov	r15, r1
    3050:	ec 0e       	add	r14, r28
    3052:	fd 1e       	adc	r15, r29
    3054:	ce 01       	movw	r24, r28
    3056:	01 96       	adiw	r24, 0x01	; 1
    3058:	b7 01       	movw	r22, r14
    305a:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    305e:	8e 01       	movw	r16, r28
    3060:	0f 5e       	subi	r16, 0xEF	; 239
    3062:	1f 4f       	sbci	r17, 0xFF	; 255
    3064:	ce 01       	movw	r24, r28
    3066:	05 96       	adiw	r24, 0x05	; 5
    3068:	b8 01       	movw	r22, r16
    306a:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    306e:	29 85       	ldd	r18, Y+9	; 0x09
    3070:	22 30       	cpi	r18, 0x02	; 2
    3072:	08 f4       	brcc	.+2      	; 0x3076 <__divsf3+0x48>
    3074:	7e c0       	rjmp	.+252    	; 0x3172 <__divsf3+0x144>
    3076:	39 89       	ldd	r19, Y+17	; 0x11
    3078:	32 30       	cpi	r19, 0x02	; 2
    307a:	10 f4       	brcc	.+4      	; 0x3080 <__divsf3+0x52>
    307c:	b8 01       	movw	r22, r16
    307e:	7c c0       	rjmp	.+248    	; 0x3178 <__divsf3+0x14a>
    3080:	8a 85       	ldd	r24, Y+10	; 0x0a
    3082:	9a 89       	ldd	r25, Y+18	; 0x12
    3084:	89 27       	eor	r24, r25
    3086:	8a 87       	std	Y+10, r24	; 0x0a
    3088:	24 30       	cpi	r18, 0x04	; 4
    308a:	11 f0       	breq	.+4      	; 0x3090 <__divsf3+0x62>
    308c:	22 30       	cpi	r18, 0x02	; 2
    308e:	31 f4       	brne	.+12     	; 0x309c <__divsf3+0x6e>
    3090:	23 17       	cp	r18, r19
    3092:	09 f0       	breq	.+2      	; 0x3096 <__divsf3+0x68>
    3094:	6e c0       	rjmp	.+220    	; 0x3172 <__divsf3+0x144>
    3096:	6c e2       	ldi	r22, 0x2C	; 44
    3098:	72 e0       	ldi	r23, 0x02	; 2
    309a:	6e c0       	rjmp	.+220    	; 0x3178 <__divsf3+0x14a>
    309c:	34 30       	cpi	r19, 0x04	; 4
    309e:	39 f4       	brne	.+14     	; 0x30ae <__divsf3+0x80>
    30a0:	1d 86       	std	Y+13, r1	; 0x0d
    30a2:	1e 86       	std	Y+14, r1	; 0x0e
    30a4:	1f 86       	std	Y+15, r1	; 0x0f
    30a6:	18 8a       	std	Y+16, r1	; 0x10
    30a8:	1c 86       	std	Y+12, r1	; 0x0c
    30aa:	1b 86       	std	Y+11, r1	; 0x0b
    30ac:	04 c0       	rjmp	.+8      	; 0x30b6 <__divsf3+0x88>
    30ae:	32 30       	cpi	r19, 0x02	; 2
    30b0:	21 f4       	brne	.+8      	; 0x30ba <__divsf3+0x8c>
    30b2:	84 e0       	ldi	r24, 0x04	; 4
    30b4:	89 87       	std	Y+9, r24	; 0x09
    30b6:	b7 01       	movw	r22, r14
    30b8:	5f c0       	rjmp	.+190    	; 0x3178 <__divsf3+0x14a>
    30ba:	2b 85       	ldd	r18, Y+11	; 0x0b
    30bc:	3c 85       	ldd	r19, Y+12	; 0x0c
    30be:	8b 89       	ldd	r24, Y+19	; 0x13
    30c0:	9c 89       	ldd	r25, Y+20	; 0x14
    30c2:	28 1b       	sub	r18, r24
    30c4:	39 0b       	sbc	r19, r25
    30c6:	3c 87       	std	Y+12, r19	; 0x0c
    30c8:	2b 87       	std	Y+11, r18	; 0x0b
    30ca:	ed 84       	ldd	r14, Y+13	; 0x0d
    30cc:	fe 84       	ldd	r15, Y+14	; 0x0e
    30ce:	0f 85       	ldd	r16, Y+15	; 0x0f
    30d0:	18 89       	ldd	r17, Y+16	; 0x10
    30d2:	ad 88       	ldd	r10, Y+21	; 0x15
    30d4:	be 88       	ldd	r11, Y+22	; 0x16
    30d6:	cf 88       	ldd	r12, Y+23	; 0x17
    30d8:	d8 8c       	ldd	r13, Y+24	; 0x18
    30da:	ea 14       	cp	r14, r10
    30dc:	fb 04       	cpc	r15, r11
    30de:	0c 05       	cpc	r16, r12
    30e0:	1d 05       	cpc	r17, r13
    30e2:	40 f4       	brcc	.+16     	; 0x30f4 <__divsf3+0xc6>
    30e4:	ee 0c       	add	r14, r14
    30e6:	ff 1c       	adc	r15, r15
    30e8:	00 1f       	adc	r16, r16
    30ea:	11 1f       	adc	r17, r17
    30ec:	21 50       	subi	r18, 0x01	; 1
    30ee:	30 40       	sbci	r19, 0x00	; 0
    30f0:	3c 87       	std	Y+12, r19	; 0x0c
    30f2:	2b 87       	std	Y+11, r18	; 0x0b
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	a0 e0       	ldi	r26, 0x00	; 0
    3102:	b0 e4       	ldi	r27, 0x40	; 64
    3104:	60 e0       	ldi	r22, 0x00	; 0
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	ea 14       	cp	r14, r10
    310a:	fb 04       	cpc	r15, r11
    310c:	0c 05       	cpc	r16, r12
    310e:	1d 05       	cpc	r17, r13
    3110:	40 f0       	brcs	.+16     	; 0x3122 <__divsf3+0xf4>
    3112:	28 2b       	or	r18, r24
    3114:	39 2b       	or	r19, r25
    3116:	4a 2b       	or	r20, r26
    3118:	5b 2b       	or	r21, r27
    311a:	ea 18       	sub	r14, r10
    311c:	fb 08       	sbc	r15, r11
    311e:	0c 09       	sbc	r16, r12
    3120:	1d 09       	sbc	r17, r13
    3122:	b6 95       	lsr	r27
    3124:	a7 95       	ror	r26
    3126:	97 95       	ror	r25
    3128:	87 95       	ror	r24
    312a:	ee 0c       	add	r14, r14
    312c:	ff 1c       	adc	r15, r15
    312e:	00 1f       	adc	r16, r16
    3130:	11 1f       	adc	r17, r17
    3132:	6f 5f       	subi	r22, 0xFF	; 255
    3134:	7f 4f       	sbci	r23, 0xFF	; 255
    3136:	6f 31       	cpi	r22, 0x1F	; 31
    3138:	71 05       	cpc	r23, r1
    313a:	31 f7       	brne	.-52     	; 0x3108 <__divsf3+0xda>
    313c:	da 01       	movw	r26, r20
    313e:	c9 01       	movw	r24, r18
    3140:	8f 77       	andi	r24, 0x7F	; 127
    3142:	90 70       	andi	r25, 0x00	; 0
    3144:	a0 70       	andi	r26, 0x00	; 0
    3146:	b0 70       	andi	r27, 0x00	; 0
    3148:	80 34       	cpi	r24, 0x40	; 64
    314a:	91 05       	cpc	r25, r1
    314c:	a1 05       	cpc	r26, r1
    314e:	b1 05       	cpc	r27, r1
    3150:	61 f4       	brne	.+24     	; 0x316a <__divsf3+0x13c>
    3152:	27 fd       	sbrc	r18, 7
    3154:	0a c0       	rjmp	.+20     	; 0x316a <__divsf3+0x13c>
    3156:	e1 14       	cp	r14, r1
    3158:	f1 04       	cpc	r15, r1
    315a:	01 05       	cpc	r16, r1
    315c:	11 05       	cpc	r17, r1
    315e:	29 f0       	breq	.+10     	; 0x316a <__divsf3+0x13c>
    3160:	20 5c       	subi	r18, 0xC0	; 192
    3162:	3f 4f       	sbci	r19, 0xFF	; 255
    3164:	4f 4f       	sbci	r20, 0xFF	; 255
    3166:	5f 4f       	sbci	r21, 0xFF	; 255
    3168:	20 78       	andi	r18, 0x80	; 128
    316a:	2d 87       	std	Y+13, r18	; 0x0d
    316c:	3e 87       	std	Y+14, r19	; 0x0e
    316e:	4f 87       	std	Y+15, r20	; 0x0f
    3170:	58 8b       	std	Y+16, r21	; 0x10
    3172:	be 01       	movw	r22, r28
    3174:	67 5f       	subi	r22, 0xF7	; 247
    3176:	7f 4f       	sbci	r23, 0xFF	; 255
    3178:	cb 01       	movw	r24, r22
    317a:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__pack_f>
    317e:	68 96       	adiw	r28, 0x18	; 24
    3180:	ea e0       	ldi	r30, 0x0A	; 10
    3182:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__epilogue_restores__+0x10>

00003186 <__gtsf2>:
    3186:	a8 e1       	ldi	r26, 0x18	; 24
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e9 ec       	ldi	r30, 0xC9	; 201
    318c:	f8 e1       	ldi	r31, 0x18	; 24
    318e:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__+0x18>
    3192:	69 83       	std	Y+1, r22	; 0x01
    3194:	7a 83       	std	Y+2, r23	; 0x02
    3196:	8b 83       	std	Y+3, r24	; 0x03
    3198:	9c 83       	std	Y+4, r25	; 0x04
    319a:	2d 83       	std	Y+5, r18	; 0x05
    319c:	3e 83       	std	Y+6, r19	; 0x06
    319e:	4f 83       	std	Y+7, r20	; 0x07
    31a0:	58 87       	std	Y+8, r21	; 0x08
    31a2:	89 e0       	ldi	r24, 0x09	; 9
    31a4:	e8 2e       	mov	r14, r24
    31a6:	f1 2c       	mov	r15, r1
    31a8:	ec 0e       	add	r14, r28
    31aa:	fd 1e       	adc	r15, r29
    31ac:	ce 01       	movw	r24, r28
    31ae:	01 96       	adiw	r24, 0x01	; 1
    31b0:	b7 01       	movw	r22, r14
    31b2:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    31b6:	8e 01       	movw	r16, r28
    31b8:	0f 5e       	subi	r16, 0xEF	; 239
    31ba:	1f 4f       	sbci	r17, 0xFF	; 255
    31bc:	ce 01       	movw	r24, r28
    31be:	05 96       	adiw	r24, 0x05	; 5
    31c0:	b8 01       	movw	r22, r16
    31c2:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    31c6:	89 85       	ldd	r24, Y+9	; 0x09
    31c8:	82 30       	cpi	r24, 0x02	; 2
    31ca:	40 f0       	brcs	.+16     	; 0x31dc <__gtsf2+0x56>
    31cc:	89 89       	ldd	r24, Y+17	; 0x11
    31ce:	82 30       	cpi	r24, 0x02	; 2
    31d0:	28 f0       	brcs	.+10     	; 0x31dc <__gtsf2+0x56>
    31d2:	c7 01       	movw	r24, r14
    31d4:	b8 01       	movw	r22, r16
    31d6:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fpcmp_parts_f>
    31da:	01 c0       	rjmp	.+2      	; 0x31de <__gtsf2+0x58>
    31dc:	8f ef       	ldi	r24, 0xFF	; 255
    31de:	68 96       	adiw	r28, 0x18	; 24
    31e0:	e6 e0       	ldi	r30, 0x06	; 6
    31e2:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__+0x18>

000031e6 <__gesf2>:
    31e6:	a8 e1       	ldi	r26, 0x18	; 24
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	e9 ef       	ldi	r30, 0xF9	; 249
    31ec:	f8 e1       	ldi	r31, 0x18	; 24
    31ee:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__+0x18>
    31f2:	69 83       	std	Y+1, r22	; 0x01
    31f4:	7a 83       	std	Y+2, r23	; 0x02
    31f6:	8b 83       	std	Y+3, r24	; 0x03
    31f8:	9c 83       	std	Y+4, r25	; 0x04
    31fa:	2d 83       	std	Y+5, r18	; 0x05
    31fc:	3e 83       	std	Y+6, r19	; 0x06
    31fe:	4f 83       	std	Y+7, r20	; 0x07
    3200:	58 87       	std	Y+8, r21	; 0x08
    3202:	89 e0       	ldi	r24, 0x09	; 9
    3204:	e8 2e       	mov	r14, r24
    3206:	f1 2c       	mov	r15, r1
    3208:	ec 0e       	add	r14, r28
    320a:	fd 1e       	adc	r15, r29
    320c:	ce 01       	movw	r24, r28
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	b7 01       	movw	r22, r14
    3212:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    3216:	8e 01       	movw	r16, r28
    3218:	0f 5e       	subi	r16, 0xEF	; 239
    321a:	1f 4f       	sbci	r17, 0xFF	; 255
    321c:	ce 01       	movw	r24, r28
    321e:	05 96       	adiw	r24, 0x05	; 5
    3220:	b8 01       	movw	r22, r16
    3222:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	82 30       	cpi	r24, 0x02	; 2
    322a:	40 f0       	brcs	.+16     	; 0x323c <__gesf2+0x56>
    322c:	89 89       	ldd	r24, Y+17	; 0x11
    322e:	82 30       	cpi	r24, 0x02	; 2
    3230:	28 f0       	brcs	.+10     	; 0x323c <__gesf2+0x56>
    3232:	c7 01       	movw	r24, r14
    3234:	b8 01       	movw	r22, r16
    3236:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fpcmp_parts_f>
    323a:	01 c0       	rjmp	.+2      	; 0x323e <__gesf2+0x58>
    323c:	8f ef       	ldi	r24, 0xFF	; 255
    323e:	68 96       	adiw	r28, 0x18	; 24
    3240:	e6 e0       	ldi	r30, 0x06	; 6
    3242:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__+0x18>

00003246 <__ltsf2>:
    3246:	a8 e1       	ldi	r26, 0x18	; 24
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	e9 e2       	ldi	r30, 0x29	; 41
    324c:	f9 e1       	ldi	r31, 0x19	; 25
    324e:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__prologue_saves__+0x18>
    3252:	69 83       	std	Y+1, r22	; 0x01
    3254:	7a 83       	std	Y+2, r23	; 0x02
    3256:	8b 83       	std	Y+3, r24	; 0x03
    3258:	9c 83       	std	Y+4, r25	; 0x04
    325a:	2d 83       	std	Y+5, r18	; 0x05
    325c:	3e 83       	std	Y+6, r19	; 0x06
    325e:	4f 83       	std	Y+7, r20	; 0x07
    3260:	58 87       	std	Y+8, r21	; 0x08
    3262:	89 e0       	ldi	r24, 0x09	; 9
    3264:	e8 2e       	mov	r14, r24
    3266:	f1 2c       	mov	r15, r1
    3268:	ec 0e       	add	r14, r28
    326a:	fd 1e       	adc	r15, r29
    326c:	ce 01       	movw	r24, r28
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	b7 01       	movw	r22, r14
    3272:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    3276:	8e 01       	movw	r16, r28
    3278:	0f 5e       	subi	r16, 0xEF	; 239
    327a:	1f 4f       	sbci	r17, 0xFF	; 255
    327c:	ce 01       	movw	r24, r28
    327e:	05 96       	adiw	r24, 0x05	; 5
    3280:	b8 01       	movw	r22, r16
    3282:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    3286:	89 85       	ldd	r24, Y+9	; 0x09
    3288:	82 30       	cpi	r24, 0x02	; 2
    328a:	40 f0       	brcs	.+16     	; 0x329c <__ltsf2+0x56>
    328c:	89 89       	ldd	r24, Y+17	; 0x11
    328e:	82 30       	cpi	r24, 0x02	; 2
    3290:	28 f0       	brcs	.+10     	; 0x329c <__ltsf2+0x56>
    3292:	c7 01       	movw	r24, r14
    3294:	b8 01       	movw	r22, r16
    3296:	0e 94 a1 1b 	call	0x3742	; 0x3742 <__fpcmp_parts_f>
    329a:	01 c0       	rjmp	.+2      	; 0x329e <__ltsf2+0x58>
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	68 96       	adiw	r28, 0x18	; 24
    32a0:	e6 e0       	ldi	r30, 0x06	; 6
    32a2:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__epilogue_restores__+0x18>

000032a6 <__floatsisf>:
    32a6:	a8 e0       	ldi	r26, 0x08	; 8
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e9 e5       	ldi	r30, 0x59	; 89
    32ac:	f9 e1       	ldi	r31, 0x19	; 25
    32ae:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__prologue_saves__+0x12>
    32b2:	9b 01       	movw	r18, r22
    32b4:	ac 01       	movw	r20, r24
    32b6:	83 e0       	ldi	r24, 0x03	; 3
    32b8:	89 83       	std	Y+1, r24	; 0x01
    32ba:	da 01       	movw	r26, r20
    32bc:	c9 01       	movw	r24, r18
    32be:	88 27       	eor	r24, r24
    32c0:	b7 fd       	sbrc	r27, 7
    32c2:	83 95       	inc	r24
    32c4:	99 27       	eor	r25, r25
    32c6:	aa 27       	eor	r26, r26
    32c8:	bb 27       	eor	r27, r27
    32ca:	b8 2e       	mov	r11, r24
    32cc:	21 15       	cp	r18, r1
    32ce:	31 05       	cpc	r19, r1
    32d0:	41 05       	cpc	r20, r1
    32d2:	51 05       	cpc	r21, r1
    32d4:	19 f4       	brne	.+6      	; 0x32dc <__floatsisf+0x36>
    32d6:	82 e0       	ldi	r24, 0x02	; 2
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	3a c0       	rjmp	.+116    	; 0x3350 <__floatsisf+0xaa>
    32dc:	88 23       	and	r24, r24
    32de:	a9 f0       	breq	.+42     	; 0x330a <__floatsisf+0x64>
    32e0:	20 30       	cpi	r18, 0x00	; 0
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	38 07       	cpc	r19, r24
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	48 07       	cpc	r20, r24
    32ea:	80 e8       	ldi	r24, 0x80	; 128
    32ec:	58 07       	cpc	r21, r24
    32ee:	29 f4       	brne	.+10     	; 0x32fa <__floatsisf+0x54>
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	70 e0       	ldi	r23, 0x00	; 0
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	9f ec       	ldi	r25, 0xCF	; 207
    32f8:	30 c0       	rjmp	.+96     	; 0x335a <__floatsisf+0xb4>
    32fa:	ee 24       	eor	r14, r14
    32fc:	ff 24       	eor	r15, r15
    32fe:	87 01       	movw	r16, r14
    3300:	e2 1a       	sub	r14, r18
    3302:	f3 0a       	sbc	r15, r19
    3304:	04 0b       	sbc	r16, r20
    3306:	15 0b       	sbc	r17, r21
    3308:	02 c0       	rjmp	.+4      	; 0x330e <__floatsisf+0x68>
    330a:	79 01       	movw	r14, r18
    330c:	8a 01       	movw	r16, r20
    330e:	8e e1       	ldi	r24, 0x1E	; 30
    3310:	c8 2e       	mov	r12, r24
    3312:	d1 2c       	mov	r13, r1
    3314:	dc 82       	std	Y+4, r13	; 0x04
    3316:	cb 82       	std	Y+3, r12	; 0x03
    3318:	ed 82       	std	Y+5, r14	; 0x05
    331a:	fe 82       	std	Y+6, r15	; 0x06
    331c:	0f 83       	std	Y+7, r16	; 0x07
    331e:	18 87       	std	Y+8, r17	; 0x08
    3320:	c8 01       	movw	r24, r16
    3322:	b7 01       	movw	r22, r14
    3324:	0e 94 05 1a 	call	0x340a	; 0x340a <__clzsi2>
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	18 16       	cp	r1, r24
    332c:	19 06       	cpc	r1, r25
    332e:	84 f4       	brge	.+32     	; 0x3350 <__floatsisf+0xaa>
    3330:	08 2e       	mov	r0, r24
    3332:	04 c0       	rjmp	.+8      	; 0x333c <__floatsisf+0x96>
    3334:	ee 0c       	add	r14, r14
    3336:	ff 1c       	adc	r15, r15
    3338:	00 1f       	adc	r16, r16
    333a:	11 1f       	adc	r17, r17
    333c:	0a 94       	dec	r0
    333e:	d2 f7       	brpl	.-12     	; 0x3334 <__floatsisf+0x8e>
    3340:	ed 82       	std	Y+5, r14	; 0x05
    3342:	fe 82       	std	Y+6, r15	; 0x06
    3344:	0f 83       	std	Y+7, r16	; 0x07
    3346:	18 87       	std	Y+8, r17	; 0x08
    3348:	c8 1a       	sub	r12, r24
    334a:	d9 0a       	sbc	r13, r25
    334c:	dc 82       	std	Y+4, r13	; 0x04
    334e:	cb 82       	std	Y+3, r12	; 0x03
    3350:	ba 82       	std	Y+2, r11	; 0x02
    3352:	ce 01       	movw	r24, r28
    3354:	01 96       	adiw	r24, 0x01	; 1
    3356:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__pack_f>
    335a:	28 96       	adiw	r28, 0x08	; 8
    335c:	e9 e0       	ldi	r30, 0x09	; 9
    335e:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__epilogue_restores__+0x12>

00003362 <__fixsfsi>:
    3362:	ac e0       	ldi	r26, 0x0C	; 12
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e7 eb       	ldi	r30, 0xB7	; 183
    3368:	f9 e1       	ldi	r31, 0x19	; 25
    336a:	0c 94 31 1c 	jmp	0x3862	; 0x3862 <__prologue_saves__+0x20>
    336e:	69 83       	std	Y+1, r22	; 0x01
    3370:	7a 83       	std	Y+2, r23	; 0x02
    3372:	8b 83       	std	Y+3, r24	; 0x03
    3374:	9c 83       	std	Y+4, r25	; 0x04
    3376:	ce 01       	movw	r24, r28
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	be 01       	movw	r22, r28
    337c:	6b 5f       	subi	r22, 0xFB	; 251
    337e:	7f 4f       	sbci	r23, 0xFF	; 255
    3380:	0e 94 29 1b 	call	0x3652	; 0x3652 <__unpack_f>
    3384:	8d 81       	ldd	r24, Y+5	; 0x05
    3386:	82 30       	cpi	r24, 0x02	; 2
    3388:	61 f1       	breq	.+88     	; 0x33e2 <__fixsfsi+0x80>
    338a:	82 30       	cpi	r24, 0x02	; 2
    338c:	50 f1       	brcs	.+84     	; 0x33e2 <__fixsfsi+0x80>
    338e:	84 30       	cpi	r24, 0x04	; 4
    3390:	21 f4       	brne	.+8      	; 0x339a <__fixsfsi+0x38>
    3392:	8e 81       	ldd	r24, Y+6	; 0x06
    3394:	88 23       	and	r24, r24
    3396:	51 f1       	breq	.+84     	; 0x33ec <__fixsfsi+0x8a>
    3398:	2e c0       	rjmp	.+92     	; 0x33f6 <__fixsfsi+0x94>
    339a:	2f 81       	ldd	r18, Y+7	; 0x07
    339c:	38 85       	ldd	r19, Y+8	; 0x08
    339e:	37 fd       	sbrc	r19, 7
    33a0:	20 c0       	rjmp	.+64     	; 0x33e2 <__fixsfsi+0x80>
    33a2:	6e 81       	ldd	r22, Y+6	; 0x06
    33a4:	2f 31       	cpi	r18, 0x1F	; 31
    33a6:	31 05       	cpc	r19, r1
    33a8:	1c f0       	brlt	.+6      	; 0x33b0 <__fixsfsi+0x4e>
    33aa:	66 23       	and	r22, r22
    33ac:	f9 f0       	breq	.+62     	; 0x33ec <__fixsfsi+0x8a>
    33ae:	23 c0       	rjmp	.+70     	; 0x33f6 <__fixsfsi+0x94>
    33b0:	8e e1       	ldi	r24, 0x1E	; 30
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	82 1b       	sub	r24, r18
    33b6:	93 0b       	sbc	r25, r19
    33b8:	29 85       	ldd	r18, Y+9	; 0x09
    33ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    33bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    33be:	5c 85       	ldd	r21, Y+12	; 0x0c
    33c0:	04 c0       	rjmp	.+8      	; 0x33ca <__fixsfsi+0x68>
    33c2:	56 95       	lsr	r21
    33c4:	47 95       	ror	r20
    33c6:	37 95       	ror	r19
    33c8:	27 95       	ror	r18
    33ca:	8a 95       	dec	r24
    33cc:	d2 f7       	brpl	.-12     	; 0x33c2 <__fixsfsi+0x60>
    33ce:	66 23       	and	r22, r22
    33d0:	b1 f0       	breq	.+44     	; 0x33fe <__fixsfsi+0x9c>
    33d2:	50 95       	com	r21
    33d4:	40 95       	com	r20
    33d6:	30 95       	com	r19
    33d8:	21 95       	neg	r18
    33da:	3f 4f       	sbci	r19, 0xFF	; 255
    33dc:	4f 4f       	sbci	r20, 0xFF	; 255
    33de:	5f 4f       	sbci	r21, 0xFF	; 255
    33e0:	0e c0       	rjmp	.+28     	; 0x33fe <__fixsfsi+0x9c>
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e0       	ldi	r20, 0x00	; 0
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	09 c0       	rjmp	.+18     	; 0x33fe <__fixsfsi+0x9c>
    33ec:	2f ef       	ldi	r18, 0xFF	; 255
    33ee:	3f ef       	ldi	r19, 0xFF	; 255
    33f0:	4f ef       	ldi	r20, 0xFF	; 255
    33f2:	5f e7       	ldi	r21, 0x7F	; 127
    33f4:	04 c0       	rjmp	.+8      	; 0x33fe <__fixsfsi+0x9c>
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e0       	ldi	r20, 0x00	; 0
    33fc:	50 e8       	ldi	r21, 0x80	; 128
    33fe:	b9 01       	movw	r22, r18
    3400:	ca 01       	movw	r24, r20
    3402:	2c 96       	adiw	r28, 0x0c	; 12
    3404:	e2 e0       	ldi	r30, 0x02	; 2
    3406:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__epilogue_restores__+0x20>

0000340a <__clzsi2>:
    340a:	ef 92       	push	r14
    340c:	ff 92       	push	r15
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	7b 01       	movw	r14, r22
    3414:	8c 01       	movw	r16, r24
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	e8 16       	cp	r14, r24
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	f8 06       	cpc	r15, r24
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	08 07       	cpc	r16, r24
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	18 07       	cpc	r17, r24
    3426:	88 f4       	brcc	.+34     	; 0x344a <__clzsi2+0x40>
    3428:	8f ef       	ldi	r24, 0xFF	; 255
    342a:	e8 16       	cp	r14, r24
    342c:	f1 04       	cpc	r15, r1
    342e:	01 05       	cpc	r16, r1
    3430:	11 05       	cpc	r17, r1
    3432:	31 f0       	breq	.+12     	; 0x3440 <__clzsi2+0x36>
    3434:	28 f0       	brcs	.+10     	; 0x3440 <__clzsi2+0x36>
    3436:	88 e0       	ldi	r24, 0x08	; 8
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	a0 e0       	ldi	r26, 0x00	; 0
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	17 c0       	rjmp	.+46     	; 0x346e <__clzsi2+0x64>
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	a0 e0       	ldi	r26, 0x00	; 0
    3446:	b0 e0       	ldi	r27, 0x00	; 0
    3448:	12 c0       	rjmp	.+36     	; 0x346e <__clzsi2+0x64>
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	e8 16       	cp	r14, r24
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	f8 06       	cpc	r15, r24
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	08 07       	cpc	r16, r24
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	18 07       	cpc	r17, r24
    345a:	28 f0       	brcs	.+10     	; 0x3466 <__clzsi2+0x5c>
    345c:	88 e1       	ldi	r24, 0x18	; 24
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a0 e0       	ldi	r26, 0x00	; 0
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	04 c0       	rjmp	.+8      	; 0x346e <__clzsi2+0x64>
    3466:	80 e1       	ldi	r24, 0x10	; 16
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	a0 e0       	ldi	r26, 0x00	; 0
    346c:	b0 e0       	ldi	r27, 0x00	; 0
    346e:	20 e2       	ldi	r18, 0x20	; 32
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e0       	ldi	r20, 0x00	; 0
    3474:	50 e0       	ldi	r21, 0x00	; 0
    3476:	28 1b       	sub	r18, r24
    3478:	39 0b       	sbc	r19, r25
    347a:	4a 0b       	sbc	r20, r26
    347c:	5b 0b       	sbc	r21, r27
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <__clzsi2+0x7e>
    3480:	16 95       	lsr	r17
    3482:	07 95       	ror	r16
    3484:	f7 94       	ror	r15
    3486:	e7 94       	ror	r14
    3488:	8a 95       	dec	r24
    348a:	d2 f7       	brpl	.-12     	; 0x3480 <__clzsi2+0x76>
    348c:	f7 01       	movw	r30, r14
    348e:	ec 5c       	subi	r30, 0xCC	; 204
    3490:	fd 4f       	sbci	r31, 0xFD	; 253
    3492:	80 81       	ld	r24, Z
    3494:	28 1b       	sub	r18, r24
    3496:	31 09       	sbc	r19, r1
    3498:	41 09       	sbc	r20, r1
    349a:	51 09       	sbc	r21, r1
    349c:	c9 01       	movw	r24, r18
    349e:	1f 91       	pop	r17
    34a0:	0f 91       	pop	r16
    34a2:	ff 90       	pop	r15
    34a4:	ef 90       	pop	r14
    34a6:	08 95       	ret

000034a8 <__pack_f>:
    34a8:	df 92       	push	r13
    34aa:	ef 92       	push	r14
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	fc 01       	movw	r30, r24
    34b4:	e4 80       	ldd	r14, Z+4	; 0x04
    34b6:	f5 80       	ldd	r15, Z+5	; 0x05
    34b8:	06 81       	ldd	r16, Z+6	; 0x06
    34ba:	17 81       	ldd	r17, Z+7	; 0x07
    34bc:	d1 80       	ldd	r13, Z+1	; 0x01
    34be:	80 81       	ld	r24, Z
    34c0:	82 30       	cpi	r24, 0x02	; 2
    34c2:	48 f4       	brcc	.+18     	; 0x34d6 <__pack_f+0x2e>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a0 e1       	ldi	r26, 0x10	; 16
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	e8 2a       	or	r14, r24
    34ce:	f9 2a       	or	r15, r25
    34d0:	0a 2b       	or	r16, r26
    34d2:	1b 2b       	or	r17, r27
    34d4:	a5 c0       	rjmp	.+330    	; 0x3620 <__pack_f+0x178>
    34d6:	84 30       	cpi	r24, 0x04	; 4
    34d8:	09 f4       	brne	.+2      	; 0x34dc <__pack_f+0x34>
    34da:	9f c0       	rjmp	.+318    	; 0x361a <__pack_f+0x172>
    34dc:	82 30       	cpi	r24, 0x02	; 2
    34de:	21 f4       	brne	.+8      	; 0x34e8 <__pack_f+0x40>
    34e0:	ee 24       	eor	r14, r14
    34e2:	ff 24       	eor	r15, r15
    34e4:	87 01       	movw	r16, r14
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <__pack_f+0x4a>
    34e8:	e1 14       	cp	r14, r1
    34ea:	f1 04       	cpc	r15, r1
    34ec:	01 05       	cpc	r16, r1
    34ee:	11 05       	cpc	r17, r1
    34f0:	19 f4       	brne	.+6      	; 0x34f8 <__pack_f+0x50>
    34f2:	e0 e0       	ldi	r30, 0x00	; 0
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	96 c0       	rjmp	.+300    	; 0x3624 <__pack_f+0x17c>
    34f8:	62 81       	ldd	r22, Z+2	; 0x02
    34fa:	73 81       	ldd	r23, Z+3	; 0x03
    34fc:	9f ef       	ldi	r25, 0xFF	; 255
    34fe:	62 38       	cpi	r22, 0x82	; 130
    3500:	79 07       	cpc	r23, r25
    3502:	0c f0       	brlt	.+2      	; 0x3506 <__pack_f+0x5e>
    3504:	5b c0       	rjmp	.+182    	; 0x35bc <__pack_f+0x114>
    3506:	22 e8       	ldi	r18, 0x82	; 130
    3508:	3f ef       	ldi	r19, 0xFF	; 255
    350a:	26 1b       	sub	r18, r22
    350c:	37 0b       	sbc	r19, r23
    350e:	2a 31       	cpi	r18, 0x1A	; 26
    3510:	31 05       	cpc	r19, r1
    3512:	2c f0       	brlt	.+10     	; 0x351e <__pack_f+0x76>
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	2a c0       	rjmp	.+84     	; 0x3572 <__pack_f+0xca>
    351e:	b8 01       	movw	r22, r16
    3520:	a7 01       	movw	r20, r14
    3522:	02 2e       	mov	r0, r18
    3524:	04 c0       	rjmp	.+8      	; 0x352e <__pack_f+0x86>
    3526:	76 95       	lsr	r23
    3528:	67 95       	ror	r22
    352a:	57 95       	ror	r21
    352c:	47 95       	ror	r20
    352e:	0a 94       	dec	r0
    3530:	d2 f7       	brpl	.-12     	; 0x3526 <__pack_f+0x7e>
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	a0 e0       	ldi	r26, 0x00	; 0
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	04 c0       	rjmp	.+8      	; 0x3544 <__pack_f+0x9c>
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	aa 1f       	adc	r26, r26
    3542:	bb 1f       	adc	r27, r27
    3544:	2a 95       	dec	r18
    3546:	d2 f7       	brpl	.-12     	; 0x353c <__pack_f+0x94>
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	a1 09       	sbc	r26, r1
    354c:	b1 09       	sbc	r27, r1
    354e:	8e 21       	and	r24, r14
    3550:	9f 21       	and	r25, r15
    3552:	a0 23       	and	r26, r16
    3554:	b1 23       	and	r27, r17
    3556:	00 97       	sbiw	r24, 0x00	; 0
    3558:	a1 05       	cpc	r26, r1
    355a:	b1 05       	cpc	r27, r1
    355c:	21 f0       	breq	.+8      	; 0x3566 <__pack_f+0xbe>
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	a0 e0       	ldi	r26, 0x00	; 0
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	9a 01       	movw	r18, r20
    3568:	ab 01       	movw	r20, r22
    356a:	28 2b       	or	r18, r24
    356c:	39 2b       	or	r19, r25
    356e:	4a 2b       	or	r20, r26
    3570:	5b 2b       	or	r21, r27
    3572:	da 01       	movw	r26, r20
    3574:	c9 01       	movw	r24, r18
    3576:	8f 77       	andi	r24, 0x7F	; 127
    3578:	90 70       	andi	r25, 0x00	; 0
    357a:	a0 70       	andi	r26, 0x00	; 0
    357c:	b0 70       	andi	r27, 0x00	; 0
    357e:	80 34       	cpi	r24, 0x40	; 64
    3580:	91 05       	cpc	r25, r1
    3582:	a1 05       	cpc	r26, r1
    3584:	b1 05       	cpc	r27, r1
    3586:	39 f4       	brne	.+14     	; 0x3596 <__pack_f+0xee>
    3588:	27 ff       	sbrs	r18, 7
    358a:	09 c0       	rjmp	.+18     	; 0x359e <__pack_f+0xf6>
    358c:	20 5c       	subi	r18, 0xC0	; 192
    358e:	3f 4f       	sbci	r19, 0xFF	; 255
    3590:	4f 4f       	sbci	r20, 0xFF	; 255
    3592:	5f 4f       	sbci	r21, 0xFF	; 255
    3594:	04 c0       	rjmp	.+8      	; 0x359e <__pack_f+0xf6>
    3596:	21 5c       	subi	r18, 0xC1	; 193
    3598:	3f 4f       	sbci	r19, 0xFF	; 255
    359a:	4f 4f       	sbci	r20, 0xFF	; 255
    359c:	5f 4f       	sbci	r21, 0xFF	; 255
    359e:	e0 e0       	ldi	r30, 0x00	; 0
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	20 30       	cpi	r18, 0x00	; 0
    35a4:	a0 e0       	ldi	r26, 0x00	; 0
    35a6:	3a 07       	cpc	r19, r26
    35a8:	a0 e0       	ldi	r26, 0x00	; 0
    35aa:	4a 07       	cpc	r20, r26
    35ac:	a0 e4       	ldi	r26, 0x40	; 64
    35ae:	5a 07       	cpc	r21, r26
    35b0:	10 f0       	brcs	.+4      	; 0x35b6 <__pack_f+0x10e>
    35b2:	e1 e0       	ldi	r30, 0x01	; 1
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	79 01       	movw	r14, r18
    35b8:	8a 01       	movw	r16, r20
    35ba:	27 c0       	rjmp	.+78     	; 0x360a <__pack_f+0x162>
    35bc:	60 38       	cpi	r22, 0x80	; 128
    35be:	71 05       	cpc	r23, r1
    35c0:	64 f5       	brge	.+88     	; 0x361a <__pack_f+0x172>
    35c2:	fb 01       	movw	r30, r22
    35c4:	e1 58       	subi	r30, 0x81	; 129
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	d8 01       	movw	r26, r16
    35ca:	c7 01       	movw	r24, r14
    35cc:	8f 77       	andi	r24, 0x7F	; 127
    35ce:	90 70       	andi	r25, 0x00	; 0
    35d0:	a0 70       	andi	r26, 0x00	; 0
    35d2:	b0 70       	andi	r27, 0x00	; 0
    35d4:	80 34       	cpi	r24, 0x40	; 64
    35d6:	91 05       	cpc	r25, r1
    35d8:	a1 05       	cpc	r26, r1
    35da:	b1 05       	cpc	r27, r1
    35dc:	39 f4       	brne	.+14     	; 0x35ec <__pack_f+0x144>
    35de:	e7 fe       	sbrs	r14, 7
    35e0:	0d c0       	rjmp	.+26     	; 0x35fc <__pack_f+0x154>
    35e2:	80 e4       	ldi	r24, 0x40	; 64
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	a0 e0       	ldi	r26, 0x00	; 0
    35e8:	b0 e0       	ldi	r27, 0x00	; 0
    35ea:	04 c0       	rjmp	.+8      	; 0x35f4 <__pack_f+0x14c>
    35ec:	8f e3       	ldi	r24, 0x3F	; 63
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a0 e0       	ldi	r26, 0x00	; 0
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e8 0e       	add	r14, r24
    35f6:	f9 1e       	adc	r15, r25
    35f8:	0a 1f       	adc	r16, r26
    35fa:	1b 1f       	adc	r17, r27
    35fc:	17 ff       	sbrs	r17, 7
    35fe:	05 c0       	rjmp	.+10     	; 0x360a <__pack_f+0x162>
    3600:	16 95       	lsr	r17
    3602:	07 95       	ror	r16
    3604:	f7 94       	ror	r15
    3606:	e7 94       	ror	r14
    3608:	31 96       	adiw	r30, 0x01	; 1
    360a:	87 e0       	ldi	r24, 0x07	; 7
    360c:	16 95       	lsr	r17
    360e:	07 95       	ror	r16
    3610:	f7 94       	ror	r15
    3612:	e7 94       	ror	r14
    3614:	8a 95       	dec	r24
    3616:	d1 f7       	brne	.-12     	; 0x360c <__pack_f+0x164>
    3618:	05 c0       	rjmp	.+10     	; 0x3624 <__pack_f+0x17c>
    361a:	ee 24       	eor	r14, r14
    361c:	ff 24       	eor	r15, r15
    361e:	87 01       	movw	r16, r14
    3620:	ef ef       	ldi	r30, 0xFF	; 255
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	6e 2f       	mov	r22, r30
    3626:	67 95       	ror	r22
    3628:	66 27       	eor	r22, r22
    362a:	67 95       	ror	r22
    362c:	90 2f       	mov	r25, r16
    362e:	9f 77       	andi	r25, 0x7F	; 127
    3630:	d7 94       	ror	r13
    3632:	dd 24       	eor	r13, r13
    3634:	d7 94       	ror	r13
    3636:	8e 2f       	mov	r24, r30
    3638:	86 95       	lsr	r24
    363a:	49 2f       	mov	r20, r25
    363c:	46 2b       	or	r20, r22
    363e:	58 2f       	mov	r21, r24
    3640:	5d 29       	or	r21, r13
    3642:	b7 01       	movw	r22, r14
    3644:	ca 01       	movw	r24, r20
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	08 95       	ret

00003652 <__unpack_f>:
    3652:	fc 01       	movw	r30, r24
    3654:	db 01       	movw	r26, r22
    3656:	40 81       	ld	r20, Z
    3658:	51 81       	ldd	r21, Z+1	; 0x01
    365a:	22 81       	ldd	r18, Z+2	; 0x02
    365c:	62 2f       	mov	r22, r18
    365e:	6f 77       	andi	r22, 0x7F	; 127
    3660:	70 e0       	ldi	r23, 0x00	; 0
    3662:	22 1f       	adc	r18, r18
    3664:	22 27       	eor	r18, r18
    3666:	22 1f       	adc	r18, r18
    3668:	93 81       	ldd	r25, Z+3	; 0x03
    366a:	89 2f       	mov	r24, r25
    366c:	88 0f       	add	r24, r24
    366e:	82 2b       	or	r24, r18
    3670:	28 2f       	mov	r18, r24
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	99 1f       	adc	r25, r25
    3676:	99 27       	eor	r25, r25
    3678:	99 1f       	adc	r25, r25
    367a:	11 96       	adiw	r26, 0x01	; 1
    367c:	9c 93       	st	X, r25
    367e:	11 97       	sbiw	r26, 0x01	; 1
    3680:	21 15       	cp	r18, r1
    3682:	31 05       	cpc	r19, r1
    3684:	a9 f5       	brne	.+106    	; 0x36f0 <__unpack_f+0x9e>
    3686:	41 15       	cp	r20, r1
    3688:	51 05       	cpc	r21, r1
    368a:	61 05       	cpc	r22, r1
    368c:	71 05       	cpc	r23, r1
    368e:	11 f4       	brne	.+4      	; 0x3694 <__unpack_f+0x42>
    3690:	82 e0       	ldi	r24, 0x02	; 2
    3692:	37 c0       	rjmp	.+110    	; 0x3702 <__unpack_f+0xb0>
    3694:	82 e8       	ldi	r24, 0x82	; 130
    3696:	9f ef       	ldi	r25, 0xFF	; 255
    3698:	13 96       	adiw	r26, 0x03	; 3
    369a:	9c 93       	st	X, r25
    369c:	8e 93       	st	-X, r24
    369e:	12 97       	sbiw	r26, 0x02	; 2
    36a0:	9a 01       	movw	r18, r20
    36a2:	ab 01       	movw	r20, r22
    36a4:	67 e0       	ldi	r22, 0x07	; 7
    36a6:	22 0f       	add	r18, r18
    36a8:	33 1f       	adc	r19, r19
    36aa:	44 1f       	adc	r20, r20
    36ac:	55 1f       	adc	r21, r21
    36ae:	6a 95       	dec	r22
    36b0:	d1 f7       	brne	.-12     	; 0x36a6 <__unpack_f+0x54>
    36b2:	83 e0       	ldi	r24, 0x03	; 3
    36b4:	8c 93       	st	X, r24
    36b6:	0d c0       	rjmp	.+26     	; 0x36d2 <__unpack_f+0x80>
    36b8:	22 0f       	add	r18, r18
    36ba:	33 1f       	adc	r19, r19
    36bc:	44 1f       	adc	r20, r20
    36be:	55 1f       	adc	r21, r21
    36c0:	12 96       	adiw	r26, 0x02	; 2
    36c2:	8d 91       	ld	r24, X+
    36c4:	9c 91       	ld	r25, X
    36c6:	13 97       	sbiw	r26, 0x03	; 3
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	13 96       	adiw	r26, 0x03	; 3
    36cc:	9c 93       	st	X, r25
    36ce:	8e 93       	st	-X, r24
    36d0:	12 97       	sbiw	r26, 0x02	; 2
    36d2:	20 30       	cpi	r18, 0x00	; 0
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	38 07       	cpc	r19, r24
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	48 07       	cpc	r20, r24
    36dc:	80 e4       	ldi	r24, 0x40	; 64
    36de:	58 07       	cpc	r21, r24
    36e0:	58 f3       	brcs	.-42     	; 0x36b8 <__unpack_f+0x66>
    36e2:	14 96       	adiw	r26, 0x04	; 4
    36e4:	2d 93       	st	X+, r18
    36e6:	3d 93       	st	X+, r19
    36e8:	4d 93       	st	X+, r20
    36ea:	5c 93       	st	X, r21
    36ec:	17 97       	sbiw	r26, 0x07	; 7
    36ee:	08 95       	ret
    36f0:	2f 3f       	cpi	r18, 0xFF	; 255
    36f2:	31 05       	cpc	r19, r1
    36f4:	79 f4       	brne	.+30     	; 0x3714 <__unpack_f+0xc2>
    36f6:	41 15       	cp	r20, r1
    36f8:	51 05       	cpc	r21, r1
    36fa:	61 05       	cpc	r22, r1
    36fc:	71 05       	cpc	r23, r1
    36fe:	19 f4       	brne	.+6      	; 0x3706 <__unpack_f+0xb4>
    3700:	84 e0       	ldi	r24, 0x04	; 4
    3702:	8c 93       	st	X, r24
    3704:	08 95       	ret
    3706:	64 ff       	sbrs	r22, 4
    3708:	03 c0       	rjmp	.+6      	; 0x3710 <__unpack_f+0xbe>
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	8c 93       	st	X, r24
    370e:	12 c0       	rjmp	.+36     	; 0x3734 <__unpack_f+0xe2>
    3710:	1c 92       	st	X, r1
    3712:	10 c0       	rjmp	.+32     	; 0x3734 <__unpack_f+0xe2>
    3714:	2f 57       	subi	r18, 0x7F	; 127
    3716:	30 40       	sbci	r19, 0x00	; 0
    3718:	13 96       	adiw	r26, 0x03	; 3
    371a:	3c 93       	st	X, r19
    371c:	2e 93       	st	-X, r18
    371e:	12 97       	sbiw	r26, 0x02	; 2
    3720:	83 e0       	ldi	r24, 0x03	; 3
    3722:	8c 93       	st	X, r24
    3724:	87 e0       	ldi	r24, 0x07	; 7
    3726:	44 0f       	add	r20, r20
    3728:	55 1f       	adc	r21, r21
    372a:	66 1f       	adc	r22, r22
    372c:	77 1f       	adc	r23, r23
    372e:	8a 95       	dec	r24
    3730:	d1 f7       	brne	.-12     	; 0x3726 <__unpack_f+0xd4>
    3732:	70 64       	ori	r23, 0x40	; 64
    3734:	14 96       	adiw	r26, 0x04	; 4
    3736:	4d 93       	st	X+, r20
    3738:	5d 93       	st	X+, r21
    373a:	6d 93       	st	X+, r22
    373c:	7c 93       	st	X, r23
    373e:	17 97       	sbiw	r26, 0x07	; 7
    3740:	08 95       	ret

00003742 <__fpcmp_parts_f>:
    3742:	1f 93       	push	r17
    3744:	dc 01       	movw	r26, r24
    3746:	fb 01       	movw	r30, r22
    3748:	9c 91       	ld	r25, X
    374a:	92 30       	cpi	r25, 0x02	; 2
    374c:	08 f4       	brcc	.+2      	; 0x3750 <__fpcmp_parts_f+0xe>
    374e:	47 c0       	rjmp	.+142    	; 0x37de <__fpcmp_parts_f+0x9c>
    3750:	80 81       	ld	r24, Z
    3752:	82 30       	cpi	r24, 0x02	; 2
    3754:	08 f4       	brcc	.+2      	; 0x3758 <__fpcmp_parts_f+0x16>
    3756:	43 c0       	rjmp	.+134    	; 0x37de <__fpcmp_parts_f+0x9c>
    3758:	94 30       	cpi	r25, 0x04	; 4
    375a:	51 f4       	brne	.+20     	; 0x3770 <__fpcmp_parts_f+0x2e>
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	1c 91       	ld	r17, X
    3760:	84 30       	cpi	r24, 0x04	; 4
    3762:	99 f5       	brne	.+102    	; 0x37ca <__fpcmp_parts_f+0x88>
    3764:	81 81       	ldd	r24, Z+1	; 0x01
    3766:	68 2f       	mov	r22, r24
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	61 1b       	sub	r22, r17
    376c:	71 09       	sbc	r23, r1
    376e:	3f c0       	rjmp	.+126    	; 0x37ee <__fpcmp_parts_f+0xac>
    3770:	84 30       	cpi	r24, 0x04	; 4
    3772:	21 f0       	breq	.+8      	; 0x377c <__fpcmp_parts_f+0x3a>
    3774:	92 30       	cpi	r25, 0x02	; 2
    3776:	31 f4       	brne	.+12     	; 0x3784 <__fpcmp_parts_f+0x42>
    3778:	82 30       	cpi	r24, 0x02	; 2
    377a:	b9 f1       	breq	.+110    	; 0x37ea <__fpcmp_parts_f+0xa8>
    377c:	81 81       	ldd	r24, Z+1	; 0x01
    377e:	88 23       	and	r24, r24
    3780:	89 f1       	breq	.+98     	; 0x37e4 <__fpcmp_parts_f+0xa2>
    3782:	2d c0       	rjmp	.+90     	; 0x37de <__fpcmp_parts_f+0x9c>
    3784:	11 96       	adiw	r26, 0x01	; 1
    3786:	1c 91       	ld	r17, X
    3788:	11 97       	sbiw	r26, 0x01	; 1
    378a:	82 30       	cpi	r24, 0x02	; 2
    378c:	f1 f0       	breq	.+60     	; 0x37ca <__fpcmp_parts_f+0x88>
    378e:	81 81       	ldd	r24, Z+1	; 0x01
    3790:	18 17       	cp	r17, r24
    3792:	d9 f4       	brne	.+54     	; 0x37ca <__fpcmp_parts_f+0x88>
    3794:	12 96       	adiw	r26, 0x02	; 2
    3796:	2d 91       	ld	r18, X+
    3798:	3c 91       	ld	r19, X
    379a:	13 97       	sbiw	r26, 0x03	; 3
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	82 17       	cp	r24, r18
    37a2:	93 07       	cpc	r25, r19
    37a4:	94 f0       	brlt	.+36     	; 0x37ca <__fpcmp_parts_f+0x88>
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	bc f0       	brlt	.+46     	; 0x37da <__fpcmp_parts_f+0x98>
    37ac:	14 96       	adiw	r26, 0x04	; 4
    37ae:	8d 91       	ld	r24, X+
    37b0:	9d 91       	ld	r25, X+
    37b2:	0d 90       	ld	r0, X+
    37b4:	bc 91       	ld	r27, X
    37b6:	a0 2d       	mov	r26, r0
    37b8:	24 81       	ldd	r18, Z+4	; 0x04
    37ba:	35 81       	ldd	r19, Z+5	; 0x05
    37bc:	46 81       	ldd	r20, Z+6	; 0x06
    37be:	57 81       	ldd	r21, Z+7	; 0x07
    37c0:	28 17       	cp	r18, r24
    37c2:	39 07       	cpc	r19, r25
    37c4:	4a 07       	cpc	r20, r26
    37c6:	5b 07       	cpc	r21, r27
    37c8:	18 f4       	brcc	.+6      	; 0x37d0 <__fpcmp_parts_f+0x8e>
    37ca:	11 23       	and	r17, r17
    37cc:	41 f0       	breq	.+16     	; 0x37de <__fpcmp_parts_f+0x9c>
    37ce:	0a c0       	rjmp	.+20     	; 0x37e4 <__fpcmp_parts_f+0xa2>
    37d0:	82 17       	cp	r24, r18
    37d2:	93 07       	cpc	r25, r19
    37d4:	a4 07       	cpc	r26, r20
    37d6:	b5 07       	cpc	r27, r21
    37d8:	40 f4       	brcc	.+16     	; 0x37ea <__fpcmp_parts_f+0xa8>
    37da:	11 23       	and	r17, r17
    37dc:	19 f0       	breq	.+6      	; 0x37e4 <__fpcmp_parts_f+0xa2>
    37de:	61 e0       	ldi	r22, 0x01	; 1
    37e0:	70 e0       	ldi	r23, 0x00	; 0
    37e2:	05 c0       	rjmp	.+10     	; 0x37ee <__fpcmp_parts_f+0xac>
    37e4:	6f ef       	ldi	r22, 0xFF	; 255
    37e6:	7f ef       	ldi	r23, 0xFF	; 255
    37e8:	02 c0       	rjmp	.+4      	; 0x37ee <__fpcmp_parts_f+0xac>
    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	cb 01       	movw	r24, r22
    37f0:	1f 91       	pop	r17
    37f2:	08 95       	ret

000037f4 <__divmodhi4>:
    37f4:	97 fb       	bst	r25, 7
    37f6:	09 2e       	mov	r0, r25
    37f8:	07 26       	eor	r0, r23
    37fa:	0a d0       	rcall	.+20     	; 0x3810 <__divmodhi4_neg1>
    37fc:	77 fd       	sbrc	r23, 7
    37fe:	04 d0       	rcall	.+8      	; 0x3808 <__divmodhi4_neg2>
    3800:	0c d0       	rcall	.+24     	; 0x381a <__udivmodhi4>
    3802:	06 d0       	rcall	.+12     	; 0x3810 <__divmodhi4_neg1>
    3804:	00 20       	and	r0, r0
    3806:	1a f4       	brpl	.+6      	; 0x380e <__divmodhi4_exit>

00003808 <__divmodhi4_neg2>:
    3808:	70 95       	com	r23
    380a:	61 95       	neg	r22
    380c:	7f 4f       	sbci	r23, 0xFF	; 255

0000380e <__divmodhi4_exit>:
    380e:	08 95       	ret

00003810 <__divmodhi4_neg1>:
    3810:	f6 f7       	brtc	.-4      	; 0x380e <__divmodhi4_exit>
    3812:	90 95       	com	r25
    3814:	81 95       	neg	r24
    3816:	9f 4f       	sbci	r25, 0xFF	; 255
    3818:	08 95       	ret

0000381a <__udivmodhi4>:
    381a:	aa 1b       	sub	r26, r26
    381c:	bb 1b       	sub	r27, r27
    381e:	51 e1       	ldi	r21, 0x11	; 17
    3820:	07 c0       	rjmp	.+14     	; 0x3830 <__udivmodhi4_ep>

00003822 <__udivmodhi4_loop>:
    3822:	aa 1f       	adc	r26, r26
    3824:	bb 1f       	adc	r27, r27
    3826:	a6 17       	cp	r26, r22
    3828:	b7 07       	cpc	r27, r23
    382a:	10 f0       	brcs	.+4      	; 0x3830 <__udivmodhi4_ep>
    382c:	a6 1b       	sub	r26, r22
    382e:	b7 0b       	sbc	r27, r23

00003830 <__udivmodhi4_ep>:
    3830:	88 1f       	adc	r24, r24
    3832:	99 1f       	adc	r25, r25
    3834:	5a 95       	dec	r21
    3836:	a9 f7       	brne	.-22     	; 0x3822 <__udivmodhi4_loop>
    3838:	80 95       	com	r24
    383a:	90 95       	com	r25
    383c:	bc 01       	movw	r22, r24
    383e:	cd 01       	movw	r24, r26
    3840:	08 95       	ret

00003842 <__prologue_saves__>:
    3842:	2f 92       	push	r2
    3844:	3f 92       	push	r3
    3846:	4f 92       	push	r4
    3848:	5f 92       	push	r5
    384a:	6f 92       	push	r6
    384c:	7f 92       	push	r7
    384e:	8f 92       	push	r8
    3850:	9f 92       	push	r9
    3852:	af 92       	push	r10
    3854:	bf 92       	push	r11
    3856:	cf 92       	push	r12
    3858:	df 92       	push	r13
    385a:	ef 92       	push	r14
    385c:	ff 92       	push	r15
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	ca 1b       	sub	r28, r26
    386c:	db 0b       	sbc	r29, r27
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
    3878:	19 94       	eijmp

0000387a <__epilogue_restores__>:
    387a:	2a 88       	ldd	r2, Y+18	; 0x12
    387c:	39 88       	ldd	r3, Y+17	; 0x11
    387e:	48 88       	ldd	r4, Y+16	; 0x10
    3880:	5f 84       	ldd	r5, Y+15	; 0x0f
    3882:	6e 84       	ldd	r6, Y+14	; 0x0e
    3884:	7d 84       	ldd	r7, Y+13	; 0x0d
    3886:	8c 84       	ldd	r8, Y+12	; 0x0c
    3888:	9b 84       	ldd	r9, Y+11	; 0x0b
    388a:	aa 84       	ldd	r10, Y+10	; 0x0a
    388c:	b9 84       	ldd	r11, Y+9	; 0x09
    388e:	c8 84       	ldd	r12, Y+8	; 0x08
    3890:	df 80       	ldd	r13, Y+7	; 0x07
    3892:	ee 80       	ldd	r14, Y+6	; 0x06
    3894:	fd 80       	ldd	r15, Y+5	; 0x05
    3896:	0c 81       	ldd	r16, Y+4	; 0x04
    3898:	1b 81       	ldd	r17, Y+3	; 0x03
    389a:	aa 81       	ldd	r26, Y+2	; 0x02
    389c:	b9 81       	ldd	r27, Y+1	; 0x01
    389e:	ce 0f       	add	r28, r30
    38a0:	d1 1d       	adc	r29, r1
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	cd bf       	out	0x3d, r28	; 61
    38ac:	ed 01       	movw	r28, r26
    38ae:	08 95       	ret

000038b0 <_exit>:
    38b0:	f8 94       	cli

000038b2 <__stop_program>:
    38b2:	ff cf       	rjmp	.-2      	; 0x38b2 <__stop_program>
